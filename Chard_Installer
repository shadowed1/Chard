#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/bin/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"

echo "[+] Creating Chard directories..."
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp}
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"

echo "[+] Downloading chard configuration files..."
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "[+] Chard sourced to ~/.bashrc"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64) GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
sudo mkdir -p "$(dirname "$MAKE_CONF")"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF
echo "[+] make.conf created with ARCH=${GENTOO_ARCH}"

PORTAGE_DIR="$CHARD_ROOT/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="$CHARD_ROOT/var/tmp/portage-latest.tar.xz"
echo "[+] Downloading Portage tree snapshot..."
sudo curl -L -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1
sudo rm -f "$TMP_TAR"

case "$GENTOO_ARCH" in
    amd64) STAGE3_URL="https://gentoo.osuosl.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-20250831T170358Z.tar.xz";;
    arm64) STAGE3_URL="https://gentoo.osuosl.org/releases/arm64/autobuilds/current-stage3-arm64-systemd/stage3-arm64-systemd-20250831T234929Z.tar.xz";;
    *) echo "Unsupported architecture: $GENTOO_ARCH"; exit 1;;
esac
STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="$CHARD_ROOT/var/tmp/$STAGE3_FILE"
sudo curl -L -o "$TMP_STAGE3" "$STAGE3_URL"
sudo tar -xJf "$TMP_STAGE3" -C "$CHARD_ROOT" --strip-components=1
sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="$CHARD_ROOT/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="$CHARD_ROOT/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
    exit 1
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"

GCC_DIR="$CHARD_ROOT/usr/$CHOST/gcc-bin/14"

export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:$CHARD_ROOT/usr/bin"
export CFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L$CHARD_ROOT/usr/lib"
export AWK=/usr/bin/mawk

CHROOT_DIR="$CHARD_ROOT/chroot"
CHROOT_BUILD_DIR="$CHROOT_DIR/var/tmp/build"

sudo mkdir -p "$BUILD_DIR"
sudo mkdir -p "$CHROOT_BUILD_DIR"

PACKAGES=(
    "make|4.4|tar.gz|https://ftp.gnu.org/gnu/make/make-4.4.tar.gz"
    "gmp|6.3.0|tar.xz|https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz"
    "mpfr|4.2.2|tar.xz|https://www.mpfr.org/mpfr-current/mpfr-4.2.2.tar.xz"
    "binutils|2.45|tar.xz|https://ftp.gnu.org/gnu/binutils/binutils-2.45.tar.xz"
    "diffutils|3.12|tar.xz|https://ftp.gnu.org/gnu/diffutils/diffutils-3.12.tar.xz"
    "git|2.51.0|tar.gz|https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.51.0.tar.gz"
)

mkdir -p "$BUILD_DIR" "$CHROOT_BUILD_DIR"

for pkg in "${PACKAGES[@]}"; do
    NAME="${pkg%%|*}"
    REST="${pkg#*|}"
    VERSION="${REST%%|*}"
    REST="${REST#*|}"
    EXT="${REST%%|*}"
    URL="${REST#*|}"
    TAR_FILE="$BUILD_DIR/$NAME-$VERSION.$EXT"

    echo "[+] Downloading $NAME-$VERSION"
    sudo curl -L -o "$TAR_FILE" "$URL"

    echo "[+] Extracting $NAME-$VERSION"
    sudo tar -xf "$TAR_FILE" -C "$BUILD_DIR"
done

echo "[+] Copying CHARD_ROOT into Chard chroot..."
sudo tar -C "$CHARD_ROOT" -cf - --exclude='./chroot' . 2>/dev/null \
| gzip -1 \
| sudo tar -C "$CHROOT_DIR" -xzf -

echo "[+] Copying build directory into chroot..."
sudo tar -C "$BUILD_DIR" -cf - . \
| gzip -1 \
| sudo tar -C "$CHROOT_BUILD_DIR" -xzf -

for pkg in "${PACKAGES[@]}"; do
    NAME="${pkg%%|*}"
    REST="${pkg#*|}"
    VERSION="${REST%%|*}"

    echo "[+] Mounting pseudo-filesystems in chroot"
    mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
    mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
    mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
    mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

    echo "[+] Building $NAME-$VERSION in chroot"
    sudo chroot "$CHROOT_DIR" /bin/bash -c "

cd /var/tmp/build/$NAME-$VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'
export PATH=/usr/\$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin
export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH:+\$LD_LIBRARY_PATH:}$CHARD_ROOT/usr/lib64\"

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

    echo "[+] Finished building $NAME-$VERSION"
    echo
done

sudo rm -rf "$CHROOT_BUILD_DIR"

sudo chown -Rf 1000:1000 \
    "$CHARD_ROOT/bin" \
    "$CHARD_ROOT/lib" \
    "$CHARD_ROOT/include" \
    "$CHARD_ROOT/share" \
    "$CHARD_ROOT/lib/python$PYTHON_VERSION" \
    "$CHARD_ROOT/var/tmp" \
    "$CHARD_ROOT/usr/portage" \
    "$CHARD_ROOT/var/cache"

echo "[+] Chard Root Environment ready to run!"

