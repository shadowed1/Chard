#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

MAX_RETRIES=10
RETRY_DELAY=30

CHARD_ROOT="/usr/local/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"

echo "${GREEN}[+] Creating ${RESET}${RED}Chard Root${RESET}"
sudo mkdir -p "$CHARD_ROOT"/etc/portage \
              "$CHARD_ROOT"/usr/portage \
              "$CHARD_ROOT"/usr/bin \
              "$CHARD_ROOT"/usr/lib \
              "$CHARD_ROOT"/var/tmp/build \
              "$CHARD_ROOT"/var/cache/distfiles \
              "$CHARD_ROOT"/var/cache/packages \
              "$CHARD_ROOT"/dev \
              "$CHARD_ROOT"/dev/shm \
              "$CHARD_ROOT"/proc \
              "$CHARD_ROOT"/sys \
              "$CHARD_ROOT"/tmp


sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
sudo cp /etc/resolv.conf "$CHARD_ROOT/etc/resolv.conf"

echo "${YELLOW}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"

sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc


if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[+] Chard sourced to ~/.bashrc ${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64) GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        GENTOO_ARCH="amd64"
        CHOST="x86_64-pc-linux-gnu"

        echo "${BLUE}[+] Installing bootstrap make binary and cmake ${RESET}${MAGENTA}(x86_64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_x86_64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo ln -sf /usr/local/make "$CHARD_ROOT/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(x86_64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-x86_64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "$CHARD_ROOT/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "$CHARD_ROOT/usr/bin"
        ;;
    aarch64|arm64)
        GENTOO_ARCH="arm64"
        CHOST="aarch64-unknown-linux-gnu"

        echo "${BLUE}[+] Installing bootstrap make binary ${RESET}${MAGENTA}(ARM64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_ARM64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        sudo ln -sf /usr/local/make "$CHARD_ROOT/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(ARM64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-aarch64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "$CHARD_ROOT/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "$CHARD_ROOT/usr/bin"
        ;;
    *)
        echo "${RED}[!] Unsupported architecture: $ARCH${RESET}"
        exit 1
        ;;
esac


echo "${RESET}${GREEN}[+] Bootstrap make ready at /usr/local/make${RESET}"

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
sudo mkdir -p "$(dirname "$MAKE_CONF")"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF

echo "${YELLOW}[+] make.conf created with ARCH=${GENTOO_ARCH}${RESET}"

PORTAGE_DIR="$CHARD_ROOT/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="$CHARD_ROOT/var/tmp/portage-latest.tar.xz"
echo "${CYAN}[+] Downloading Portage tree snapshot"
sudo curl -L --progress-bar -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
sudo rm -f "$TMP_TAR"

STAGE3_TXT="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/current-stage3-$GENTOO_ARCH-systemd/latest-stage3-$GENTOO_ARCH-systemd.txt"

STAGE3_FILENAME=$(curl -fsSL "$STAGE3_TXT" | grep -Eo 'stage3-.*\.tar\.xz' | head -n1)
STAGE3_URL=$(dirname "$STAGE3_TXT")"/$STAGE3_FILENAME"

STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="$CHARD_ROOT/var/tmp/$STAGE3_FILE"

echo "${RESET}${BLUE}[+] Downloading latest Stage3 tarball: $STAGE3_FILENAME"
sudo curl -L --progress-bar -o "$TMP_STAGE3" "$STAGE3_URL"

echo "${RESET}${BLUE}[+] Extracting Stage3 tarball"
sudo tar -xJf "$TMP_STAGE3" -C "$CHARD_ROOT" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"

sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="$CHARD_ROOT/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="$CHARD_ROOT/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
    exit 1
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"

GCC_DIR="$CHARD_ROOT/usr/$CHOST/gcc-bin/14"
export PYTHON="$CHARD_ROOT/usr/local/chard/bin/python3"
export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:$CHARD_ROOT/usr/bin"
export CFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L$CHARD_ROOT/usr/lib"
export AWK=/usr/bin/mawk

KERNEL_VER="6.16"
KERNEL_TAR="linux-$KERNEL_VER.tar.xz"
KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v6.x/$KERNEL_TAR"
KERNEL_BUILD="$BUILD_DIR/linux-$KERNEL_VER"

sudo mkdir -p "$BUILD_DIR"

if [ ! -f "$BUILD_DIR/$KERNEL_TAR" ]; then
    echo "[+] Fetching $KERNEL_TAR..."
    sudo curl -L --progress-bar -o "$BUILD_DIR/$KERNEL_TAR" "$KERNEL_URL"
else
    echo "${RESET}${YELLOW}[!] Kernel tarball already exists, skipping download.${RESET}"
fi

sudo rm -rf "$KERNEL_BUILD"
sudo tar -xf "$BUILD_DIR/$KERNEL_TAR" -C "$BUILD_DIR" \
    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"

echo "${CYAN}[+] Installing Linux headers into Chard Root..."
sudo chroot "$CHARD_ROOT" /bin/bash -c "
cd /var/tmp/build/linux-$KERNEL_VER

HOST_ARCH=\$(uname -m)

case \"\$HOST_ARCH\" in
    x86_64) KERNEL_ARCH=x86_64;;
    aarch64) KERNEL_ARCH=arm64;;
    *) echo 'Unknown architecture: \$HOST_ARCH'; exit 1;;
esac

make mrproper
make HOST_ARCH=$HOST_ARCH defconfig
make HOST_ARCH=$HOST_ARCH INSTALL_HDR_PATH=/usr headers_install
"

echo "${RESET}${MAGENTA}[+] Linux headers installed to $CHARD_ROOT/usr/include${RESET}"

sudo rm -rf "$KERNEL_BUILD"

PACKAGES=(
    "make|4.4|tar.gz|https://mirrors.kernel.org//gnu/make/make-4.4.tar.gz|make-4.4|gnu"
    "gmp|6.3.0|tar.xz|https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz|gmp-6.3.0|gnu"
    "mpfr|4.2.2|tar.xz|https://www.mpfr.org/mpfr-current/mpfr-4.2.2.tar.xz|mpfr-4.2.2|gnu"
    "binutils|2.45|tar.xz|https://mirrors.kernel.org//gnu/binutils/binutils-2.45.tar.xz|binutils-2.45|gnu"
    "diffutils|3.12|tar.xz|https://mirrors.kernel.org//gnu/diffutils/diffutils-3.12.tar.xz|diffutils-3.12|gnu"
    "git|2.51.0|tar.gz|https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.51.0.tar.gz|git-2.51.0|gnu"
    "coreutils|9.7|tar.xz|https://mirrors.kernel.org//gnu/coreutils/coreutils-9.7.tar.xz|coreutils-9.7|gnu"
    "perl|5.40.0|tar.gz|https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz|perl-5.40.0|perl-core"
    "Config-AutoConf|0.320|tar.gz|https://cpan.metacpan.org/authors/id/A/AM/AMBS/Config-AutoConf-0.320.tar.gz|Config-AutoConf-0.320|perl"
    "Capture-Tiny|0.48|tar.gz|https://cpan.metacpan.org/authors/id/D/DA/DAGOLDEN/Capture-Tiny-0.48.tar.gz|Capture-Tiny-0.48|perl"
    "Test-Fatal|0.017|tar.gz|https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Test-Fatal-0.017.tar.gz|Test-Fatal-0.017|perl"
    "findutils|4.10.0|tar.xz|https://mirrors.kernel.org//gnu/findutils/findutils-4.10.0.tar.xz|findutils-4.10.0|gnu"
    "python|3.12.12|tar.xz|https://www.python.org/ftp/python/3.12.12/Python-3.12.12.tar.xz|Python-3.12.12|gnu"
    "libseccomp|2.5.5|tar.gz|https://github.com/seccomp/libseccomp/releases/download/v2.5.5/libseccomp-2.5.5.tar.gz|libseccomp-2.5.5|gnu"
    "file|5.45|tar.gz|https://astron.com/pub/file/file-5.45.tar.gz|file-5.45|gnu"
    "File-LibMagic|1.23|tar.gz|https://cpan.metacpan.org/authors/id/D/DR/DROLSKY/File-LibMagic-1.23.tar.gz|File-LibMagic-1.23|perl"
    "gtest|1.16.0|tar.gz|https://github.com/google/googletest/releases/download/v1.16.0/googletest-1.16.0.tar.gz|googletest-1.16.0|cmake"
    "ninja|1.13.1|tar.gz|https://github.com/ninja-build/ninja/archive/refs/tags/v1.13.1.tar.gz|ninja-1.13.1|cmake"
    "libffi|3.5.2|tar.gz|https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz|libffi-3.5.2|gnu"
    "pcre2|10.46|tar.gz|https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.46/pcre2-10.46.tar.gz|pcre2-10.46|gnu"
    "pkg-config|0.29.2|tar.gz|https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz|pkg-config-0.29.2|gnu"

)
mkdir -p "$BUILD_DIR"

sudo mkdir -p "$CHARD_ROOT/var/tmp/build"

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"

    echo "${RESET}${GREEN}[+] Mounting Chard Chroot${RESET}"
    mountpoint -q "$CHARD_ROOT/proc"    || sudo mount -t proc proc "$CHARD_ROOT/proc"
    mountpoint -q "$CHARD_ROOT/sys"     || sudo mount -t sysfs sys "$CHARD_ROOT/sys"
    mountpoint -q "$CHARD_ROOT/dev"     || sudo mount --bind /dev "$CHARD_ROOT/dev"
    mountpoint -q "$CHARD_ROOT/dev/shm" || sudo mount --bind /dev/shm "$CHARD_ROOT/dev/shm"

    echo "[+] Building $NAME-$VERSION in chroot${RESET}"
    sudo chroot "$CHARD_ROOT" /bin/bash -c "
        cd /var/tmp/build/$DIR || exit 1
        case '$BUILDSYS' in
            gnu)
                ./configure --prefix=/usr && make -j\$(nproc) && make install
                ;;
            cmake)
                mkdir -p build && cd build
                cmake .. -DCMAKE_INSTALL_PREFIX=/usr && make -j\$(nproc) && make install
                ;;
            meson)
                if [ -f meson.build ]; then
                    rm -rf build
                    meson setup build --prefix=/usr
                    ninja -C build && ninja -C build install
                fi
                ;;
            perl-core)
                sh Configure -des -Dprefix=/usr && make -j\$(nproc) && make install
                ;;
            perl)
                perl Makefile.PL PREFIX=/usr && make -j\$(nproc) && make install
                ;;
        esac
    "

    if [[ "$NAME" == "python" ]]; then
    echo "[+] Creating stable python wrapper"
    sudo tee /usr/local/bin/python >/dev/null <<'EOF'
#!/bin/sh
CHARD_ROOT="/usr/local/chard"
exec "$CHARD_ROOT/usr/bin/python3.12" "$@"
EOF
    sudo chmod +x /usr/local/bin/python
fi
done

PORTAGE_VER="3.5.0"
PORTAGE_ARCHIVE="portage-$PORTAGE_VER.tar.gz"
PORTAGE_DIR="portage-$PORTAGE_VER"
PORTAGE_URL="https://github.com/gentoo/portage/releases/download/$PORTAGE_VER/$PORTAGE_ARCHIVE"

cd "$BUILD_DIR"
curl -L -o "$BUILD_DIR/$PORTAGE_ARCHIVE" "$PORTAGE_URL"
tar xzf "$BUILD_DIR/$PORTAGE_ARCHIVE" -C "$BUILD_DIR"

sudo chroot "$CHARD_ROOT" /bin/bash -c "
    cd /var/tmp/build/$PORTAGE_DIR
    /usr/bin/python3 setup.py install --prefix=/usr
"

MESON_NAME="meson"
MESON_VERSION="1.9.0"
MESON_ARCHIVE="$MESON_NAME-$MESON_VERSION.tar.gz"
MESON_DIR="$MESON_NAME-$MESON_VERSION"
MESON_URL="https://github.com/mesonbuild/meson/releases/download/$MESON_VERSION/$MESON_ARCHIVE"

GLIB_NAME="glib"
GLIB_VERSION="2.86.0"
GLIB_ARCHIVE="$GLIB_NAME-$GLIB_VERSION.tar.xz"
GLIB_DIR="$GLIB_NAME-$GLIB_VERSION"
GLIB_URL="https://download.gnome.org/sources/glib/2.86/$GLIB_ARCHIVE"

echo "[+] Downloading Meson $MESON_VERSION"
sudo curl -L --progress-bar -o "$BUILD_DIR/$MESON_ARCHIVE" "$MESON_URL"
sudo tar -xzf "$BUILD_DIR/$MESON_ARCHIVE" -C "$BUILD_DIR"

echo "[+] Installing Meson $MESON_VERSION inside chroot"
sudo chroot "$CHARD_ROOT" /bin/bash -c "
    cd /var/tmp/build/$MESON_DIR
    /usr/bin/python3 -m pip install --prefix=/usr .
"

echo "[+] Downloading glib $GLIB_VERSION"
sudo curl -L --progress-bar -o "$BUILD_DIR/$GLIB_ARCHIVE" "$GLIB_URL"
sudo tar -xf "$BUILD_DIR/$GLIB_ARCHIVE" -C "$BUILD_DIR"

echo "[+] Building glib $GLIB_VERSION with meson"
sudo chroot "$CHARD_ROOT" /bin/bash -c "
    cd /var/tmp/build/$GLIB_DIR
    rm -rf build
    meson setup build --prefix=/usr
    ninja -C build
    ninja -C build install
"

echo "${RED}[+] Cleaning up${RESET}"
sudo umount -l "$CHARD_ROOT/dev/shm" 2>/dev/null || true
sudo umount -l "$CHARD_ROOT/dev"     2>/dev/null || true
sudo umount -l "$CHARD_ROOT/sys"     2>/dev/null || true
sudo umount -l "$CHARD_ROOT/proc"    2>/dev/null || true

sudo rm -rf "$BUILD_DIR"

sudo chown -R 1000:1000 "$CHARD_ROOT"
source /home/chronos/user/.bashrc
echo "[+] Chard Rootready to run!"
