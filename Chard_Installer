#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"

echo "${GREEN}[+] Creating ${RESET}${RED}Chard Root${RESET}"
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp}
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"

echo "${YELLOW}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"

sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc


if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[+] Chard sourced to ~/.bashrc ${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64) GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

echo "${GREEN}[+] Detected arch: ${ARCH}${RESET}"

case "$ARCH" in
    x86_64)
        echo "${BLUE}[+] Installing bootstrap make binary ${RESET}${MAGENTA}(x86_64)${RESET}"
        sudo curl -fsSL \
            https://github.com/shadowed1/Chard/raw/main/make_x86_64 \
            -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo ln -sf /usr/local/make "$CHARD_ROOT/usr/bin/make"
        ;;
    aarch64|arm64)
        echo "${BLUE}[+] Installing bootstrap make binary ${RESET}${MAGENTA}(ARM64)${RESET}"
        sudo curl -fsSL \
            https://github.com/shadowed1/Chard/raw/main/make_ARM64 \
            -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        sudo ln -sf /usr/local/make "$CHARD_ROOT/usr/bin/make"
        ;;
    *)
        echo "${RED}[!] Unsupported architecture: ${ARCH}${RESET}"
        exit 1
        ;;
esac

echo "${GREEN}[+] Bootstrap make ready at /usr/local/make${RESET}"

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
sudo mkdir -p "$(dirname "$MAKE_CONF")"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF

echo "${YELLOW}[+] make.conf created with ARCH=${GENTOO_ARCH}${RESET}"

PORTAGE_DIR="$CHARD_ROOT/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="$CHARD_ROOT/var/tmp/portage-latest.tar.xz"
echo "${CYAN}[+] Downloading Portage tree snapshot${RESET}"
sudo curl -L -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1
sudo rm -f "$TMP_TAR"

case "$GENTOO_ARCH" in
    amd64) STAGE3_URL="https://gentoo.osuosl.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-20250831T170358Z.tar.xz";;
    arm64) STAGE3_URL="https://gentoo.osuosl.org/releases/arm64/autobuilds/current-stage3-arm64-systemd/stage3-arm64-systemd-20250831T234929Z.tar.xz";;
    *) echo "Unsupported architecture: $GENTOO_ARCH"; exit 1;;
esac
STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="$CHARD_ROOT/var/tmp/$STAGE3_FILE"

echo "${BLUE}[+] Downloading Stage3 tarball"
sudo curl -L --progress-bar -o "$TMP_STAGE3" "$STAGE3_URL"

echo "${RESET}${MAGENTA}[+] Extracting Stage3 tarball"
sudo tar -xJf "$TMP_STAGE3" -C "$CHARD_ROOT" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"

sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="$CHARD_ROOT/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="$CHARD_ROOT/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
    exit 1
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"

GCC_DIR="$CHARD_ROOT/usr/$CHOST/gcc-bin/14"

export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:$CHARD_ROOT/usr/bin"
export CFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L$CHARD_ROOT/usr/lib"
export AWK=/usr/bin/mawk

echo "${RESET}${CYAN}[+] Downloading Linux headers..."
KERNEL_VER="6.16"
KERNEL_TAR="linux-$KERNEL_VER.tar.xz"
KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v6.x/$KERNEL_TAR"
KERNEL_BUILD="$BUILD_DIR/linux-$KERNEL_VER"

sudo mkdir -p "$BUILD_DIR"

if [ ! -f "$BUILD_DIR/$KERNEL_TAR" ]; then
    echo "[+] Fetching $KERNEL_TAR..."
    sudo curl -L --progress-bar -o "$BUILD_DIR/$KERNEL_TAR" "$KERNEL_URL"
else
    echo "${YELLOW}[!] Kernel tarball already exists, skipping download.${RESET}"
fi

sudo rm -rf "$KERNEL_BUILD"
sudo tar -xf "$BUILD_DIR/$KERNEL_TAR" -C "$BUILD_DIR"

echo "[+] Installing Linux headers into Chard Root..."
sudo chroot "$CHARD_ROOT" /bin/bash -c "
cd /var/tmp/build/linux-$KERNEL_VER

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

make mrproper
make ARCH=\$ARCH headers_install INSTALL_HDR_PATH=/usr
"

echo "${RESET}${MAGENTA}[+] Linux headers installed to $CHARD_ROOT/usr/include${RESET}"

sudo rm -rf "$KERNEL_BUILD"


# name|version|ext|url|dir|buildsys
PACKAGES=(
    "make|4.4|tar.gz|https://ftp.gnu.org/gnu/make/make-4.4.tar.gz|make-4.4|gnu"
    "gmp|6.3.0|tar.xz|https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz|gmp-6.3.0|gnu"
    "mpfr|4.2.2|tar.xz|https://www.mpfr.org/mpfr-current/mpfr-4.2.2.tar.xz|mpfr-4.2.2|gnu"
    "binutils|2.45|tar.xz|https://ftp.gnu.org/gnu/binutils/binutils-2.45.tar.xz|binutils-2.45|gnu"
    "diffutils|3.12|tar.xz|https://ftp.gnu.org/gnu/diffutils/diffutils-3.12.tar.xz|diffutils-3.12|gnu"
    "git|2.51.0|tar.gz|https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.51.0.tar.gz|git-2.51.0|gnu"
    "coreutils|9.7|tar.xz|https://ftp.gnu.org/gnu/coreutils/coreutils-9.7.tar.xz|coreutils-9.7|gnu"
    "perl|5.40.0|tar.gz|https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz|perl-5.40.0|perl-core"
    "Config-AutoConf|0.320|tar.gz|https://cpan.metacpan.org/authors/id/A/AM/AMBS/Config-AutoConf-0.320.tar.gz|Config-AutoConf-0.320|perl"
    "Test-Fatal|0.017|tar.gz|https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Test-Fatal-0.017.tar.gz|Test-Fatal-0.017|perl"
    "findutils|4.10.0|tar.xz|https://ftp.gnu.org/gnu/findutils/findutils-4.10.0.tar.xz|findutils-4.10.0|gnu"
    "python|3.13.7|tar.xz|https://www.python.org/ftp/python/3.13.7/Python-3.13.7.tar.xz|Python-3.13.7|gnu"
    "File-LibMagic|1.23|tar.gz|https://cpan.metacpan.org/authors/id/D/DR/DROLSKY/File-LibMagic-1.23.tar.gz|File-LibMagic-1.23|perl"
)

mkdir -p "$BUILD_DIR"

PERL_CORE_PACKAGES=()
PERL_MODULE_PACKAGES=()
OTHER_PACKAGES=()

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    case "$BUILDSYS" in
        perl-core) PERL_CORE_PACKAGES+=("$pkg") ;;
        perl)      PERL_MODULE_PACKAGES+=("$pkg") ;;
        *)         OTHER_PACKAGES+=("$pkg") ;;
    esac
done

SORTED_PACKAGES=("${PERL_CORE_PACKAGES[@]}" "${PERL_MODULE_PACKAGES[@]}" "${OTHER_PACKAGES[@]}")

for pkg in "${SORTED_PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    ARCHIVE="$NAME-$VERSION.$EXT"
    SRC_DIR="$BUILD_DIR/$DIR"

    if [ ! -f "$BUILD_DIR/$ARCHIVE" ]; then
        echo "${RESET}${GREEN}[+] Downloading $NAME-$VERSION"
        sudo curl -L --progress-bar -o "$BUILD_DIR/$ARCHIVE" "$URL"
    else
        echo "${RESET}${RED}[!] $ARCHIVE already downloaded, skipping.${RESET}"
    fi

    if [ ! -d "$SRC_DIR" ]; then
        echo "${RESET}${BLUE}[+] Extracting $NAME-$VERSION"
        case "$EXT" in
            tar.gz|tgz)
                sudo tar -xzf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
                ;;
            tar.xz)
                sudo tar -xJf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
                ;;
            tar.bz2)
                sudo tar -xjf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
                ;;
            zip)
                sudo unzip -q "$BUILD_DIR/$ARCHIVE" -d "$BUILD_DIR"
                ;;
            *)
                echo "Unknown archive format: $EXT"; exit 1 ;;
        esac
    else
        echo "${RESET}${YELLOW}[!] $DIR already extracted, skipping.${RESET}"
    fi
done


echo "${RESET}${GREEN}[+] Expanding ${RESET}${RED}Chard Chroot${RESET}${GREEN}"
sudo tar -C "$CHARD_ROOT" -cf - . 2>/dev/null \
| pv -s $(sudo du -sb "$CHARD_ROOT" | awk '{print $1}') \
| gzip -1 \
| sudo tar -C "$CHARD_ROOT" -xzf - 


for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"

    echo "${BLUE}${[+] Mounting Chard Chroot${RESET}"
    mountpoint -q "$CHARD_ROOT/proc"    || sudo mount -t proc proc "$CHARD_ROOT/proc"
    mountpoint -q "$CHARD_ROOT/sys"     || sudo mount -t sysfs sys "$CHARD_ROOT/sys"
    mountpoint -q "$CHARD_ROOT/dev"     || sudo mount --bind /dev "$CHARD_ROOT/dev"
    mountpoint -q "$CHARD_ROOT/dev/shm" || sudo mount --bind /dev/shm "$CHARD_ROOT/dev/shm"

    echo "${YELLOW}[+] Building $NAME-$VERSION in chroot${RESET}"
    sudo chroot "$CHARD_ROOT" /bin/bash -c "

cd /var/tmp/build/$DIR

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'
export PATH=/usr/\$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin
export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH:+\$LD_LIBRARY_PATH:}/usr/lib64\"

case \"$BUILDSYS\" in
    gnu)
        ./configure --prefix=/usr --disable-dependency-tracking
        make -j\$(nproc)
        make install
        ;;
    perl)
        perl Makefile.PL INSTALL_BASE=/usr
        make
        make test || true
        make install
        ;;
    perl-core)
        sh Configure -des -Dprefix=/usr
        make -j$(nproc)
        make install
        ;;
    cmake)
        cmake -DCMAKE_INSTALL_PREFIX=/usr .
        make -j\$(nproc)
        make install
        ;;
    meson)
        meson setup build --prefix=/usr
        ninja -C build
        ninja -C build install
        ;;
    *)
        echo \"Unknown build system: $BUILDSYS\"
        exit 1
        ;;
esac
"
    echo "[+] Finished building $NAME-$VERSION"
    echo
done

echo "${RED}[+] Cleaning up...${RESET}"
sudo umount -l "$CHARD_ROOT/dev/shm" 2>/dev/null || true
sudo umount -l "$CHARD_ROOT/dev"     2>/dev/null || true
sudo umount -l "$CHARD_ROOT/sys"     2>/dev/null || true
sudo umount -l "$CHARD_ROOT/proc"    2>/dev/null || true

sudo rm -rf "$BUILD_DIR"

EMERGE_FILE="$CHARD_ROOT/bin/emerge"

sudo chown -Rf 1000:1000 \
    "$CHARD_ROOT/bin" \
    "$CHARD_ROOT/lib" \
    "$CHARD_ROOT/include" \
    "$CHARD_ROOT/share" \
    "$CHARD_ROOT/lib/python$PYTHON_VERSION" \
    "$CHARD_ROOT/var/tmp" \
    "$CHARD_ROOT/usr/portage" \
    "$CHARD_ROOT/var/cache"

echo "${RESET}${RED}[+] Chard Root${RESET}${GREEN} ready to run!${RESET}"
