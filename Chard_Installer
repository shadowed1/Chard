#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/bin/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"

echo "[+] Creating Chard directories..."
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp}
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
sudo mkdir -p "$BUILD_DIR" "$RECOVERY_DIR" "$MOUNT_DIR"

echo "[+] Downloading Chard configuration files..."
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "[+] Chard sourced to ~/.bashrc"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

hwid=$(crossystem hwid | awk '{print $1}')
BOARD=${hwid%%-*}
BOARD=$(echo "$BOARD" | tr '[:upper:]' '[:lower:]')
echo "[+] Detected board: $BOARD"

echo "[+] Fetching recovery manifest..."
MANIFEST=$(curl -s https://dl.google.com/dl/edgedl/chromeos/recovery/recovery.json)
if [ -z "$MANIFEST" ]; then
    echo "${RED}Failed to fetch recovery manifest.${RESET}"
    exit 1
fi

LINK=$(echo "$MANIFEST" \
    | tr '\n' ' ' \
    | sed 's/},/}\n/g' \
    | grep -i "$hwid" \
    | grep -o '"url": *"[^"]*"' \
    | sed -E 's/.*"url": *"([^"]*)".*/\1/' \
    | tail -n1)

if [ -z "$LINK" ]; then
    echo "${RED}No recovery image found for HWID $hwid${RESET}"
    exit 1
fi

FILENAME=$(basename "$LINK")
ZIP_PATH="$RECOVERY_DIR/$FILENAME"

echo "[+] Downloading recovery image..."
sudo curl -L -o "$ZIP_PATH" "$LINK"

echo "[+] Extracting recovery image with bsdtar..."
sudo bsdtar -xf "$ZIP_PATH" -C "$RECOVERY_DIR"

BIN_FILE=$(find "$RECOVERY_DIR" -name "*.bin" | head -n1)
if [ -z "$BIN_FILE" ]; then
    echo "${RED}Failed to extract .bin from zip${RESET}"
    exit 1
fi
echo "[+] Recovery bin: $BIN_FILE"

echo "[+] Attaching loop device..."
LOOP_DEV=$(sudo losetup --show -fP "$BIN_FILE")
echo "[+] Using loop device: $LOOP_DEV"

ROOT_PART=$(sudo fdisk -l "$LOOP_DEV" \
    | grep 'Linux filesystem' \
    | awk '{print $1}' \
    | head -n1)

if [ -z "$ROOT_PART" ]; then
    echo "${RED}[!] Could not detect ROOT-A partition${RESET}"
    sudo losetup -d "$LOOP_DEV"
    exit 1
fi

echo "[+] Mounting ROOT-A partition $ROOT_PART..."
sudo mount -o ro "$ROOT_PART" "$MOUNT_DIR"

echo "[+] Copying system files into Chard root..."
sudo tar -C "$MOUNT_DIR" \
  --exclude=dev --exclude=proc --exclude=sys --exclude=run --exclude=tmp \
  --exclude=mnt --exclude=boot --exclude=var --exclude=home --exclude=opt \
  --exclude=usr/share --exclude=usr/local \
  --exclude=sbin \
  --exclude="$CHARD_ROOT" --exclude="$CHARD_ROOT/*" \
  -cf - bin etc lib lib64 usr \
| gzip -1 \
| sudo tar -C "$CHARD_ROOT" -xvzf -

sudo umount "$MOUNT_DIR"
sudo losetup -d "$LOOP_DEV"

sudo rm -rf "$RECOVERY_DIR"

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64) GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF
echo "[+] make.conf created with ARCH=${GENTOO_ARCH}"

GCC_DIR="$CHARD_ROOT/usr/$CHOST/gcc-bin/14"
export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:$CHARD_ROOT/usr/bin"
export CFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L$CHARD_ROOT/usr/lib"
export AWK=/usr/bin/mawk

echo "[+] Chard root environment ready!"
