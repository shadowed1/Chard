#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"

echo "${GREEN}[+] Creating Chard directories...${RESET}"
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp,bin,include,usr/include}
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"

sudo dev_install -y 2>/dev/null || true

cd /usr/local
sudo curl -LO https://files.pythonhosted.org/packages/8e/7c/6c56e0f58c1b2a8f3e3f04e2c98f2f8a1b1234c7f623d8f1a5b1f0e0b91c/protobuf-4.24.1-py3-none-any.whl
python3 -m ensurepip --default-pip
sudo python3 -m pip install /usr/local/protobuf-4.24.1-py3-none-any.whl
/usr/lib/python-exec/python3.11/python3 -m pip install --upgrade pip
python3 -m pip install --user protobuf

echo "${GREEN}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${YELLOW}[+] Chard sourced to ~/.bashrc${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc${RESET}"
fi

sudo chown -R 1000:1000 "$CHARD_ROOT" || true

ARCH=$(uname -m)
RECOVERY_DIR="$CHARD_ROOT/recovery"

mkdir -p "$RECOVERY_DIR"

if [[ "$ARCH" == "x86_64" ]]; then
    BIN_URL="https://dl.google.com/chromeos/samus/13816.82.0/stable-channel/chromeos_13816.82.0_samus_stable-channel_full_mp-v3.bin-gyydszjugq3wj4x2vmoatz2fonnr7g3y.signed"
    BIN_PATH="$RECOVERY_DIR/$(basename "$BIN_URL")"
else
    BIN_URL="https://dl.google.com/chromeos/kevin/14526.89.0/stable-channel/chromeos_14526.89.0_kevin_stable-channel_full_mp.bin-gyzdkn3dmqztq6qtgusvmfckvfocpax7.signed"
    BIN_PATH="$RECOVERY_DIR/$(basename "$BIN_URL")"
fi

echo "[+] Downloading recovery image for $ARCH..."
curl -L -o "$BIN_PATH" "$BIN_URL"


EXTRACTOR_DIR="/usr/local/extract_android_ota_payload"
EXTRACT_DIR="$EXTRACTOR_DIR/extracted"

sudo mkdir -p "$EXTRACTOR_DIR"
sudo chown 1000:1000 "$EXTRACTOR_DIR"
mkdir -p "$EXTRACT_DIR"

OTA_ZIP="$EXTRACTOR_DIR/extract_android_ota_payload.zip"
curl -L -o "$OTA_ZIP" https://github.com/cyxx/extract_android_ota_payload/archive/refs/heads/master.zip
bsdtar -xf "$OTA_ZIP" -C "$EXTRACTOR_DIR"
EXTRACTOR="$EXTRACTOR_DIR/extract_android_ota_payload-master/extract_android_ota_payload.py"

cp "$BIN_PATH" "$EXTRACTOR_DIR/update.signed"
ZIP_PATH="$EXTRACTOR_DIR/update.signed"

mkdir -p "$EXTRACT_DIR"
python3 "$EXTRACTOR" "$ZIP_PATH" "$EXTRACT_DIR" || echo "${YELLOW}[!] Warning: extractor returned non-zero exit code, continuing...${RESET}"

ROOT_IMG=$(find "$EXTRACT_DIR" -name "root.img" | head -n1)
if [ -z "$ROOT_IMG" ]; then
    echo "${RED}Failed to extract root.img${RESET}"
    exit 1
fi
echo "[+] root.img found at $ROOT_IMG"

mkdir -p "$MOUNT_DIR"
sudo mount -o ro "$ROOT_IMG" "$MOUNT_DIR"

echo "[+] Copying system files into Chard root..."
rsync -aH --info=progress2 \
  --exclude=dev \
  --exclude=proc \
  --exclude=sys \
  --exclude=run \
  --exclude=tmp \
  --exclude=mnt \
  --exclude=boot \
  --exclude=var \
  --exclude=home \
  --exclude=opt \
  --exclude=usr/share \
  --exclude=usr/local \
  --exclude=sbin \
  "$MOUNT_DIR"/bin \
  "$MOUNT_DIR"/etc \
  "$MOUNT_DIR"/include \
  "$MOUNT_DIR"/lib \
  "$MOUNT_DIR"/lib64 \
  "$MOUNT_DIR"/usr \
  "$CHARD_ROOT"/

sudo umount "$MOUNT_DIR"
sudo rm -rf "$RECOVERY_DIR"

resolve_final_url() {
    local src="$1"
    local final
    final=$(curl -sSL -w '%{url_effective}' -o /dev/null "$src" 2>/dev/null || true)
    echo "$final"
}

extract_to_target() {
    local archive="$1"
    local target="$2"

    if [[ ! -f "$archive" ]]; then
        echo "${RED}[!] Archive not found: $archive${RESET}"
        return 1
    fi

    mkdir -p "$target"

    case "$archive" in
        *.zst|*.pkg.tar.zst)
            echo "${YELLOW}Extracting zst package to $target..."
            if command -v unzstd >/dev/null 2>&1; then
                sudo tar --use-compress-program=unzstd -xvpf "$archive" -C "$target"
            elif command -v zstd >/dev/null 2>&1; then
                zstd -d -c "$archive" | sudo tar -xpf - -C "$target"
            else
                echo "${RED}Missing 'zstd' or 'unzstd' required to extract .zst packages.${RESET}"
                return 1
            fi
            ;;
        *.xz|*.pkg.tar.xz)
            echo "${YELLOW}Extracting xz package to $target...${RESET}"
            if command -v xz >/dev/null 2>&1 || command -v unxz >/dev/null 2>&1; then
                sudo tar -xJpf "$archive" -C "$target"
            else
                echo "${RED}Missing 'xz' (or 'unxz') required to extract .xz packages.${RESET}"
                return 1
            fi
            ;;
        *.tar.gz|*.tgz)
            echo "${CYAN}Extracting gzip tar to $target...${RESET}"
            sudo tar -xzf "$archive" -C "$target"
            ;;
        *)
            echo "${YELLOW}Unknown archive type for $archive${RESET}"
            return 1
            ;;
    esac

    sudo find "$target/usr/bin" -type f -exec chmod +x {} + 2>/dev/null || true
    sudo find "$target/usr/lib" -type f -exec chmod 755 {} + 2>/dev/null || true
    sudo find "$target/usr/lib64" -type f -exec chmod 755 {} + 2>/dev/null || true

    return 0
}

download_and_install_pkg() {
    local src_url="$1"
    local target="$CHARD_ROOT"

    echo "${GREEN}[+] Resolving final URL for: $src_url${RESET}"
    local final
    final=$(resolve_final_url "$src_url")
    if [[ -z "$final" ]]; then
        echo "${YELLOW}[!] Could not resolve final URL; trying to download original URL directly${RESET}"
        final="$src_url"
    fi
    echo "${RED}==> Mirror:${RESET}${YELLOW} $final ${RESET}"

    local filename
    filename=$(basename "${final%%\?*}")
    local tmpfile="/tmp/$filename"

    echo "${GREEN}[+] Downloading: $final -> $tmpfile${RESET}"
    if command -v curl >/dev/null 2>&1; then
        curl -L --fail --silent --show-error --output "$tmpfile" "$final" || true
    fi
    if [[ ! -s "$tmpfile" && $(command -v wget >/dev/null 2>&1) ]]; then
        wget --no-check-certificate -O "$tmpfile" "$final" || true
    fi

    if [[ ! -s "$tmpfile" ]]; then
        echo "${RED}[!] Failed to download $final${RESET}"
        return 1
    fi

    if head -c 256 "$tmpfile" | grep -qiE '<html|<!doctype|<head'; then
        echo "${RED}[!] Download appears to be HTML, not a package. URL: $final${RESET}"
        rm -f "$tmpfile"
        return 1
    fi

    if ! extract_to_target "$tmpfile" "$target"; then
        echo "${RED}[!] Extraction failed for $tmpfile${RESET}"
        rm -f "$tmpfile"
        return 1
    fi

    rm -f "$tmpfile"
    echo "${GREEN}[+] Installed package from $final into $target${RESET}"
    return 0
}


ARCH="$(uname -m)"
echo "${YELLOW}[+] Detected arch: ${ARCH}${RESET}"

if [[ "$ARCH" == "x86_64" ]]; then
    echo "${GREEN}[+] Installing bootstrap make binary...${RESET}"
    sudo curl -fsSL https://github.com/shadowed1/Chard/raw/refs/heads/main/make_x86_64 -o /usr/local/make
    sudo chmod +x /usr/local/make
    sudo ln -sf /usr/local/make "$CHARD_ROOT/usr/bin/make"
    PACKS=(
        "https://archlinux.org/packages/core/x86_64/gcc/download"
        "https://archlinux.org/packages/core/x86_64/binutils/download"
        "https://archlinux.org/packages/core/x86_64/gcc-libs/download"
        "https://archlinux.org/packages/core/x86_64/libmpc/download"
        "https://archlinux.org/packages/core/x86_64/libisl/download"
        "https://archlinux.org/packages/extra/x86_64/fastfetch/download"
        "https://archlinux.org/packages/extra/x86_64/yyjson/download"
        "https://archlinux.org/packages/core/x86_64/nano/download"
        "https://archlinux.org/packages/core/x86_64/m4/download"
        "https://archlinux.org/packages/core/any/autoconf/download"
        "https://archlinux.org/packages/core/any/automake/download"
        "https://archlinux.org/packages/core/x86_64/libtool/download"
        "https://archlinux.org/packages/core/x86_64/pkgconf/download"
        "https://archlinux.org/packages/core/x86_64/gettext/download"
        "https://archlinux.org/packages/core/x86_64/expat/download"
        "https://archlinux.org/packages/core/x86_64/libxcrypt/download"
        "https://archlinux.org/packages/core/x86_64/gdbm/download"
        "https://archlinux.org/packages/core/x86_64/db5.3/download"
        "https://archlinux.org/packages/core/x86_64/perl/download"
        "https://archlinux.org/packages/extra/any/perl-local-lib/download"

    )
elif [[ "$ARCH" == "aarch64" ]] || [[ "$ARCH" == "arm64" ]]; then
    echo "${GREEN}[+] Installing bootstrap make binary...${RESET}"
    sudo curl -fsSL https://github.com/shadowed1/Chard/raw/refs/heads/main/make_ARM64 -o /usr/local/make
    sudo chmod +x /usr/local/make
    sudo ln -sf /usr/local/make "$CHARD_ROOT/usr/bin/make"
    PACKS=(
        "http://mirror.archlinuxarm.org/aarch64/core/gcc-14.2.1+r753+g1cd744a6828f-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/gcc-libs-14.2.1+r753+g1cd744a6828f-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/mpfr-4.2.2-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/binutils-2.44-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libmpc-1.3.1-2-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libisl-0.27-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/fastfetch-2.51.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/yyjson-0.12.0-1-aarch64.pkg.tar.xz"
        "https://archlinux.org/packages/core/any/autoconf/download"
        "https://archlinux.org/packages/core/any/automake/download"
        "http://mirror.archlinuxarm.org/aarch64/core/pkgconf-2.5.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/expat-2.7.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/perl-local-lib-2.000029-5-any.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/db5.3-5.3.28-5-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/gdbm-1.26-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libxcrypt-4.4.38-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/perl-5.42.0-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/armv7h/extra/perl-mailtools-2.22-2-any.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/armv7h/extra/perl-timedate-2.33-8-any.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/shadow-4.18.0-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/acl-2.3.2-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/git-2.51.0-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/audit-4.0.5-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/keyutils-1.6.3-3-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/krb5-1.21.3-2-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libldap-2.6.10-2-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libsasl-2.1.28-5-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/lmdb-0.9.33-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libcap-ng-0.8.5-3-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/pam-1.7.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/pambase-20250719-1-any.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libtirpc-1.3.7-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libnsl-2.0.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/pcre2-10.46-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/zlib-ng-2.2.5-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/file-5.46-5-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libseccomp-2.5.6-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/jansson-2.14.1-1-aarch64.pkg.tar.xz"
    )
else
    echo "${RED}Unsupported architecture: $ARCH${RESET}"
    exit 1
fi

for p in "${PACKS[@]}"; do
    echo
    echo "${RED}==> Processing:${RESET}${YELLOW} $p${RESET}"
    download_and_install_pkg "$p" || {
        echo "${YELLOW}[!] Warning: failed to download/install package: $p - continuing${RESET}"
    }
done

echo "${YELLOW}[+] Fixing ownership to chronos:chronos (uid 1000) for $CHARD_ROOT${RESET}"
sudo chown -R 1000:1000 "$CHARD_ROOT" || true

echo "${GREEN}[+] Done. Chard root at: $CHARD_ROOT${RESET}"
