#!/bin/bash
set -e

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/bin/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"

sudo mkdir -p "$CHARD_ROOT"/{var/tmp,etc,usr/bin,usr/lib,var/cache}
sudo chown -R 1000:1000 "$CHARD_ROOT"

echo "[+] Downloading chard configuration files..."
curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc -o "$CHARD_RC"
curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env -o "$CHARD_ROOT/.chard.env"
curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "[+] Chard sourced to ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) ALPINE_ARCH="x86_64" ;;
    aarch64) ALPINE_ARCH="aarch64" ;;
    *) echo "${RED}Unsupported architecture: $ARCH"; exit 1 ;;
esac

declare -A ALPINE_URLS=(
    [x86_64]="https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/x86_64/alpine-minirootfs-3.22.1-x86_64.tar.gz"
    [aarch64]="https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/aarch64/alpine-minirootfs-3.22.1-aarch64.tar.gz"
)

ALPINE_TAR="$CHARD_ROOT/var/tmp/alpine-rootfs.tar.gz"
echo "[+] Downloading Alpine $ALPINE_ARCH rootfs..."
curl -L -o "$ALPINE_TAR" "${ALPINE_URLS[$ALPINE_ARCH]}"

echo "[+] Extracting Alpine rootfs into $CHARD_ROOT..."
tar -xzf "$ALPINE_TAR" -C "$CHARD_ROOT"
rm -f "$ALPINE_TAR"
sudo chown -R 1000:1000 "$CHARD_ROOT"

echo "[+] Alpine $ALPINE_ARCH rootfs setup complete"

TOOLCHAIN_DIR="$CHARD_ROOT/usr/toolchain"
mkdir -p "$TOOLCHAIN_DIR"

case "$ARCH" in
    x86_64) MUSL_ARCH="x86_64"; TOOLCHAIN_URL="https://musl.cc/x86_64-linux-musl-native.tgz" ;;
    aarch64) MUSL_ARCH="aarch64"; TOOLCHAIN_URL="https://musl.cc/aarch64-linux-musl-native.tgz" ;;
esac

TOOLCHAIN_TAR="$CHARD_ROOT/var/tmp/$(basename "$TOOLCHAIN_URL")"
curl -L -o "$TOOLCHAIN_TAR" "$TOOLCHAIN_URL"
tar -xzf "$TOOLCHAIN_TAR" -C "$TOOLCHAIN_DIR" --strip-components=1
rm -f "$TOOLCHAIN_TAR"

for bin in gcc g++ ar ld ranlib strip; do
    ln -sf "$TOOLCHAIN_DIR/bin/$MUSL_ARCH-linux-musl-$bin" "$CHARD_ROOT/usr/bin/$bin"
done

export CC="$CHARD_ROOT/usr/bin/gcc"
export CXX="$CHARD_ROOT/usr/bin/g++"
export AR="$CHARD_ROOT/usr/bin/ar"
export RANLIB="$CHARD_ROOT/usr/bin/ranlib"
export PATH="$CHARD_ROOT/usr/bin:$TOOLCHAIN_DIR/bin:$PATH"

echo "[+] Musl toolchain installed and ready"

echo
echo "[+] Setting up build environment inside Alpine musl rootfs..."

mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

export CC="$CHARD_ROOT/usr/bin/gcc"
export CXX="$CHARD_ROOT/usr/bin/g++"
export AR="$CHARD_ROOT/usr/bin/ar"
export RANLIB="$CHARD_ROOT/usr/bin/ranlib"
export PATH="$CHARD_ROOT/usr/bin:$PATH"
export CFLAGS="-O2 -pipe -static -I$CHARD_ROOT/usr/include"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L$CHARD_ROOT/usr/lib -static"
AWK=/usr/bin/mawk
