#!/bin/bash
START_TIME=$(date +%s)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

MAX_RETRIES=10
RETRY_DELAY=30

format_time() {
    local total_seconds=$1
    local hours=$((total_seconds / 3600))
    local minutes=$(((total_seconds % 3600) / 60))
    local seconds=$((total_seconds % 60))
    
    if [ $hours -gt 0 ]; then
        printf "%dh %dm %ds" $hours $minutes $seconds
    elif [ $minutes -gt 0 ]; then
        printf "%dm %ds" $minutes $seconds
    else
        printf "%ds" $seconds
    fi
}

show_progress() {
    local current_time=$(date +%s)
    local elapsed=$((current_time - START_TIME))
    local formatted_time=$(format_time $elapsed)
    echo "${CYAN}[Runtime: $formatted_time]${RESET} $1"
}

CHARD_ROOT="/usr/local/chard"
CHARD_RC="/usr/local/chard/.chardrc"
BUILD_DIR="/usr/local/chard/var/tmp/build"
LOG_FILE=/usr/local/chard/chardbuild.log
echo "${RESET}${GREEN}"
echo
echo
echo
echo
echo
echo
echo "                                                             AA"
echo "                                                            A${RESET}${RED}::${RESET}${GREEN}A"
echo "        CCCCCCCCCCCCCHHHHHHHHH     HHHHHHHHH               A${RESET}${RED}::::${RESET}${GREEN}A               RRRRRRRRRRRRRRRRR   DDDDDDDDDDDDD" 
echo "     CCC${RESET}${YELLOW}::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H              A${RESET}${RED}::::::${RESET}${GREEN}A              R${RESET}${YELLOW}::::::::::::::::${RESET}${GREEN}R  D${RESET}${YELLOW}::::::::::::${RESET}${GREEN}DDD"  
echo "   CC${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H             A${RESET}${RED}::::::::${RESET}${GREEN}A             R${RESET}${YELLOW}::::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R D${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}DD"  
echo "  C${RESET}${YELLOW}:::::${RESET}${GREEN}CCCCCCCC${RESET}${YELLOW}::::${RESET}${GREEN}CHH${RESET}${YELLOW}::::::${RESET}${GREEN}H     H${RESET}${YELLOW}::::::${RESET}${GREEN}HH            A${RESET}${RED}::::::::::${RESET}${GREEN}A            RR${RESET}${YELLOW}:::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RDDD${RESET}${YELLOW}:::::${RESET}${GREEN}DDDDD${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo " C${RESET}${YELLOW}:::::${RESET}${GREEN}C       CCCCCC  H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H             A${RESET}${RED}::::::::::::${RESET}${GREEN}A             R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H            A${RESET}${RED}::::::::::::::${RESET}${GREEN}A            R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}::::::${RESET}${GREEN}HHHHH${RESET}${YELLOW}::::::${RESET}${GREEN}H           A${RESET}${RED}::            ::${RESET}${GREEN}A           R${RESET}${YELLOW}::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R   D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::::::::::::::${RESET}${GREEN}H          A${RESET}${RED}:::            :::${RESET}${GREEN}A          R${RESET}${YELLOW}:::::::::::::${RESET}${GREEN}RR    D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::::::::::::::${RESET}${GREEN}H         A${RESET}${RED}::::            ::::${RESET}${GREEN}A         R${RESET}${YELLOW}::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R   D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"    
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}::::::${RESET}${GREEN}HHHHH${RESET}${YELLOW}::::::${RESET}${GREEN}H        A${RESET}${RED}:::::            :::::${RESET}${GREEN}A        R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"    
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H       A${RESET}${RED}::::::            ::::::${RESET}${GREEN}A       R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"   
echo " C${RESET}${YELLOW}:::::${RESET}${GREEN}C       CCCCCC  H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H      A${RESET}${RED}:::::                :::::${RESET}${GREEN}A      R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "  C${RESET}${YELLOW}:::::${RESET}${GREEN}CCCCCCCC${RESET}${YELLOW}::::${RESET}${GREEN}CHH${RESET}${YELLOW}::::::${RESET}${GREEN}H     H${RESET}${YELLOW}::::::${RESET}${GREEN}HH   A${RESET}${RED}:::::::::          :::::::::${RESET}${GREEN}A   RR${RESET}${YELLOW}:::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RDDD${RESET}${YELLOW}:::::${RESET}${GREEN}DDDDD${RESET}${YELLOW}:::::${RESET}${GREEN}D" 
echo "   CC${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H  A${RESET}${RED}:::::::::            :::::::::${RESET}${GREEN}A  R${RESET}${YELLOW}::::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RD${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}DD"  
echo "     CCC${RESET}${YELLOW}::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H A${RESET}${RED}::::::::                ::::::::${RESET}${GREEN}A R${RESET}${YELLOW}::::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RD${RESET}${YELLOW}::::::::::::${RESET}${GREEN}DDD"  
echo "        CCCCCCCCCCCCCHHHHHHHHH     HHHHHHHHHA${BOLD}======                      ======${RESET}${GREEN}ARRRRRRRR     RRRRRRRDDDDDDDDDDDDD"   
echo "                                           ${BOLD}A====                            ====A"
echo "                                          A====                              ====A"
echo "${RESET}"

               
echo "${RESET}"
echo "${RED}- Chard Installer can take ${BOLD}5-20 minutes${RESET}${RED} depending on your CPU and storage speed. Requires ~8 GB of space. Supports ${BOLD}x86_64${RESET}${RED} and ${BOLD}ARM64${RESET}${RED}! ${RESET}"
echo "${YELLOW}- Chard will be installed in ${RESET}${YELLOW}${BOLD}${CHARD_ROOT}${RESET}${YELLOW} and will not affect ChromeOS or system commands.${RESET}"
echo "${GREEN}- It is ${BOLD}semi-sandboxed within itself${RESET}${GREEN}, but can rely on Host libraries. Automatically updates itself build and compile with.${RESET}"
echo "${CYAN}- Chard has ${BOLD}not${RESET}${CYAN} been tested with Brunch Toolchain or Chromebrew - this project uses a different implementation. It does ${BOLD}NOT${RESET}${CYAN} require dev_install.${RESET}"
echo "${BLUE}- Does not require altering current state of /usr/local/ during Install and Uninstall.${RESET}"
echo "${MAGENTA}- Chard is current in early development. ${BOLD}Bugs will exist${RESET}${MAGENTA}, so please have a ${BOLD}USB backup${RESET}${MAGENTA} in case of serious mistakes.${RESET}"
echo
   read -rp "${GREEN}${BOLD}Install Chard? (Y/n): ${RESET}" response
response=${response:-Y}

case "$response" in
    y|Y|yes|YES|Yes)
        echo
        echo "${GREEN}[CONTINUE]${RESET}"
        echo
        ;;
    *)
        echo "${RED}[EXIT]${RESET}"
        exit 1
        sleep 1
        exit 0
        ;;
esac
    unset LD_PRELOAD
    echo "${RED}Chard Installs to /usr/local/chard${RESET}${YELLOW} - Install will eventually chroot into chard. ${BOLD}This means / will be /usr/local/chard/ in reality.${RESET}"
    echo
    echo "${GREEN}[+] Creating ${RESET}${RED}Chard Root${RESET}"

    if command -v lscpu >/dev/null 2>&1 && lscpu -e=CPU,MAXMHZ >/dev/null 2>&1; then
        mapfile -t CORES < <(lscpu -e=CPU,MAXMHZ 2>/dev/null | \
            awk 'NR>1 && $2 ~ /^[0-9.]+$/ {print $1 ":" $2}' | sort -t: -k2,2n)
    else
        mapfile -t CORES < <(awk -v c=-1 '
            /^processor/ {c=$3}
            /cpu MHz/ && c>=0 {print c ":" $4; c=-1}
        ' /proc/cpuinfo | sort -t: -k2,2n)
    fi
    
    if (( ${#CORES[@]} == 0 )); then
        total=$(nproc)
        half=$(( total / 1 ))
        WEAK_CORES=$half
    else
        mhz_values=($(printf '%s\n' "${CORES[@]}" | cut -d: -f2 | sort -n))
        count=${#mhz_values[@]}
        mid=$((count / 2))
        if (( count % 2 == 0 )); then
            threshold=$(awk "BEGIN {print (${mhz_values[mid-1]} + ${mhz_values[mid]}) / 2}")
        else
            threshold="${mhz_values[mid]}"
        fi
    
        WEAK_CORES=$(printf '%s\n' "${CORES[@]}" | \
            awk -v t="$threshold" -F: '{if ($2 <= t) print $1}' | paste -sd, -)
    
        if [[ -z "$WEAK_CORES" || "$WEAK_CORES" == "$(seq -s, 0 $(( $(nproc)-1 )))" ]]; then
            total=$(nproc)
            half=$(( total / 1 ))
            WEAK_CORES=$half
        fi
    fi
    
    export TASKSET="taskset -c $WEAK_CORES"
    
    MEM_KB=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
    MEM_GB=$(( (MEM_KB + 1024*1024 - 1) / 1024 / 1024 ))
    THREADS=$((MEM_GB / 2))
    ((THREADS < 1)) && THREADS=1
    
    TOTAL_CORES=$(nproc)
    ECORE_COUNT=$(echo "$WEAK_CORES" | tr ',' '\n' | wc -l)
    ECORE_RATIO=$(awk "BEGIN {print $ECORE_COUNT / $TOTAL_CORES}")
    
    if (( $(awk "BEGIN {print ($ECORE_RATIO >= 0.65)}") )); then
        THREADS=$(awk -v t="$THREADS" 'BEGIN {printf("%d", t * 3.0)}')
    fi
    
    export MAKEOPTS="-j$THREADS"
    
    parallel_tools=(make emerge ninja scons meson cmake)
    for tool in "${parallel_tools[@]}"; do
        if command -v "$tool" >/dev/null 2>&1; then
            alias "$tool"="$TASKSET $tool $MAKEOPTS"
        fi
    done
    
    serial_tools=(cargo go rustc gcc g++ clang clang++ ccache waf python pip install npm yarn node gyp bazel b2 bjam dune dune-build)
    for tool in "${serial_tools[@]}"; do
        if command -v "$tool" >/dev/null 2>&1; then
            alias "$tool"="$TASKSET $tool"
        fi
    done

    if [[ -t 1 ]]; then
        echo "${BLUE}────────────────────────────────────────────────────────${RESET}"
        echo "${CYAN}Chard Root CPU Profile:${RESET}"
        echo "${GREEN}Cores assigned:               ${BOLD}$WEAK_CORES ${RESET}"
        echo "${GREEN}Parallelized threads:         ${BOLD}$MAKEOPTS ${RESET}"
        echo "${CYAN}Taskset:                      ${BOLD}$TASKSET ${RESET}"
        echo "${BLUE}────────────────────────────────────────────────────────${RESET}"
    fi

    echo "${RESET}${MAGENTA}[*] Unmounting active bind mounts in case of reinstall...${RESET}"
            sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
            sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
            sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
    
            echo "${BLUE}[*] Removing $CHARD_ROOT in case of reinstall...${RESET}"
            sudo rm -rf "$CHARD_ROOT"
    
            sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc 2>/dev/null || true

sudo mkdir -p "$CHARD_ROOT"/etc/portage \
                 "$CHARD_ROOT"/etc/sandbox.d \
                 "$CHARD_ROOT"/etc/ssl \
                 "$CHARD_ROOT"/usr/bin \
                 "$CHARD_ROOT"/usr/lib \
                 "$CHARD_ROOT"/usr/lib64 \
                 "$CHARD_ROOT"/usr/include \
                 "$CHARD_ROOT"/usr/share \
                 "$CHARD_ROOT"/usr/local/bin \
                 "$CHARD_ROOT"/usr/local/lib \
                 "$CHARD_ROOT"/usr/local/include \
                 "$CHARD_ROOT"/var/tmp/build \
                 "$CHARD_ROOT"/var/cache/distfiles \
                 "$CHARD_ROOT"/var/cache/packages \
                 "$CHARD_ROOT"/var/log \
                 "$CHARD_ROOT"/var/run \
                 "$CHARD_ROOT"/dev/shm \
                 "$CHARD_ROOT"/dev/pts \
                 "$CHARD_ROOT"/proc \
                 "$CHARD_ROOT"/sys \
                 "$CHARD_ROOT"/tmp \
                 "$CHARD_ROOT"/run \
                 "$CHARD_ROOT"/home/chronos/user/.cargo \
                 "$CHARD_ROOT"/home/chronos/user/.rustup \
                 "$CHARD_ROOT"/home/chronos/user/.local/share \
                 "$CHARD_ROOT"/home/chronos/user/Desktop \
                 "$CHARD_ROOT"/mnt

sudo mkdir -p /usr/local/chard/usr/local/src/gtest-1.16.0
sudo mkdir -p "$(dirname "$LOG_FILE")"
sudo mkdir -p /usr/local/chard/etc/portage/repos.conf"
sudo mkdir -p /usr/local/chard/var/db/repos/gentoo/profiles"
sudo mkdir -p "/usr/local/chard/etc/portage/make.profile"
sudo mkdir -p /usr/local/chard/run/user/0
sudo chmod 700 /usr/local/chard/run/user/0
exec > >(sudo tee -a "$LOG_FILE") 2>&1

sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
echo "${YELLOW}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "/usr/local/chard/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "/usr/local/chard/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "/usr/local/chard/.chard.logic"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.bashrc -o "/usr/local/chard/home/chronos/user/.bashrc"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[+] Chard sourced to ~/.bashrc ${RESET}${YELLOW}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

sudo mkdir -p /usr/local/chard/etc/portage/package.use

sudo tee /usr/local/chard/etc/portage/package.use/systemd-overrides <<EOF
sys-auth/elogind -systemd
media-video/pipewire -elogind
media-video/wireplumber -elogind
sys-auth/polkit -elogind
sys-apps/dbus -elogind
EOF

sudo tee /usr/local/chard/etc/portage/package.use/flatpak-systemd > /dev/null <<'EOF'
sys-auth/elogind -systemd
media-video/pipewire -elogind
media-video/wireplumber -elogind
sys-auth/polkit -elogind
sys-apps/dbus -elogind
sys-libs/pam -elogind systemd
sys-apps/shadow -elogind systemd
sys-apps/util-linux -elogind systemd
EOF

echo "sys-auth/polkit systemd -elogind" | sudo tee -a /usr/local/chard/etc/portage/package.use/polkit

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH" ;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        GENTOO_ARCH="amd64"
        CHOST="x86_64-pc-linux-gnu"
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    aarch64|arm64)
        GENTOO_ARCH="arm64"
        CHOST="aarch64-unknown-linux-gnu"
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    *)
        echo "${RED}[!] Unsupported architecture: $ARCH${RESET}"
        exit 1
        ;;
esac

sudo mkdir -p "/usr/local/chard/var/tmp"
PORTAGE_DIR="/usr/local/chard/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="/usr/local/chard/var/tmp/portage-latest.tar.xz"
echo "${CYAN}[+] Downloading Portage tree snapshot"
sudo curl -L --progress-bar -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
sudo rm -f "$TMP_TAR"

STAGE3_TXT="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/current-stage3-$GENTOO_ARCH-systemd/latest-stage3-$GENTOO_ARCH-systemd.txt"

STAGE3_FILENAME=$(curl -fsSL "$STAGE3_TXT" | grep -Eo 'stage3-.*\.tar\.xz' | head -n1)
STAGE3_URL=$(dirname "$STAGE3_TXT")"/$STAGE3_FILENAME"

STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="/usr/local/chard/var/tmp/$STAGE3_FILE"

echo "${RESET}${BLUE}[+] Downloading latest Stage3 tarball: $STAGE3_FILENAME"
sudo curl -L --progress-bar -o "$TMP_STAGE3" "$STAGE3_URL"

echo "${RESET}${BLUE}[+] Extracting Stage3 tarball"
sudo tar -xJf "$TMP_STAGE3" -C "/usr/local/chard" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"

sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="/usr/local/chard/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="/usr/local/chard/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "/usr/local/chard/bin/chard"
sudo chmod +x "/usr/local/chard/bin/chard"

export PYTHON="/usr/local/chard/bin/python3"
export CC="/usr/local/chard/usr/bin/gcc"
export CXX="/usr/local/chard/usr/bin/g++"
export AR="/usr/local/chard/usr/bin/gcc-ar"
export RANLIB="/usr/local/chard/usr/bin/gcc-ranlib"
export PATH="$PATH:/usr/local/chard/usr/bin"
export CXXFLAGS="$CFLAGS"
export AWK=/usr/bin/mawk
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/usr/lib64"
export MAKEFLAGS="-j$(nproc)"
export INSTALL_ROOT="/usr/local/chard"
export ACLOCAL_PATH="/usr/local/chard/usr/share/aclocal"
export PYTHONPATH="/usr/local/chard/usr/lib/python3.13/site-packages:$PYTHONPATH"
export PKG_CONFIG_PATH=/usr/local/chard/usr/lib64/pkgconfig:/usr/local/chard/usr/lib/pkgconfig
export CFLAGS="-I/usr/local/chard/usr/include $CFLAGS"
export LDFLAGS="-L/usr/local/chard/usr/lib64 -L/usr/local/chard/usr/lib $LDFLAGS"
export GIT_TEMPLATE_DIR=/usr/local/chard/usr/share/git-core/templates

KERNEL_INDEX=$(curl -fsSL https://cdn.kernel.org/pub/linux/kernel/v6.x/ \
    | grep -o 'href="linux-[0-9]\+\.[0-9]\+\.[0-9]\+\.tar\.xz"' \
    | sed 's/href="linux-\(.*\)\.tar\.xz"/\1/' )

KERNEL_VER=$(echo "$KERNEL_INDEX" | sort -V | tail -n2 | head -n1)

KERNEL_TAR="linux-$KERNEL_VER.tar.xz"
KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v6.x/$KERNEL_TAR"
KERNEL_BUILD="$BUILD_DIR/linux-$KERNEL_VER"

echo "Fetching kernel version: $KERNEL_VER"
echo "URL: $KERNEL_URL"

sudo mkdir -p "$BUILD_DIR"

if [ ! -f "$BUILD_DIR/$KERNEL_TAR" ]; then
    echo "${RESET}${BLUE}[+] Fetching $KERNEL_TAR..."
    sudo curl -L --progress-bar -o "$BUILD_DIR/$KERNEL_TAR" "$KERNEL_URL"
else
    echo "${RESET}${RED}[!] Kernel tarball already exists, skipping download."
fi


sudo rm -rf "$KERNEL_BUILD"
sudo tar -xf "$BUILD_DIR/$KERNEL_TAR" -C "$BUILD_DIR" \
    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"

echo "${RESET}${BLUE}[+] Installing Linux headers into Chard Root..."
sudo chroot "/usr/local/chard" /bin/bash -c "
cd /var/tmp/build/linux-$KERNEL_VER

HOST_ARCH=\$(uname -m)
case \"\$HOST_ARCH\" in
    x86_64) KERNEL_ARCH=x86_64 ;;
    aarch64) KERNEL_ARCH=arm64 ;;
    *) echo \"Unknown architecture: \$HOST_ARCH\"; exit 1 ;;
esac

make mrproper
make defconfig

rm -rf /usr/src/linux
cp -a . /usr/src/linux

make INSTALL_HDR_PATH=/usr headers_install

cp .config /usr/src/linux/.config
"

echo "${RESET}${CYAN}[+] Linux headers and sources installed to /usr/local/chard/usr/src/linux"
sudo rm -rf "$KERNEL_BUILD"

CONFIG_FILE="/usr/local/chard/usr/src/linux/.config"
OPTIONS=(
    "CONFIG_CGROUP_BPF"
    "CONFIG_FANOTIFY"
    "CONFIG_USER_NS"
    "CONFIG_CRYPTO_USER_API_HASH"
    "CONFIG_INPUT_MOUSEDEV"
)

for opt in "${OPTIONS[@]}"; do
    sudo sed -i -E "s/^# $opt is not set/$opt=y/" "$CONFIG_FILE"
done

for opt in "${OPTIONS[@]}"; do
    if ! sudo grep -q "^$opt=" "$CONFIG_FILE"; then
        echo "$opt=y" | sudo tee -a "$CONFIG_FILE" >/dev/null
    fi
done

sudo grep -E "CONFIG_CGROUP_BPF|CONFIG_FANOTIFY|CONFIG_USER_NS|CONFIG_CRYPTO_USER_API_HASH|CONFIG_INPUT_MOUSEDEV" /usr/local/chard/usr/src/linux/.config | wc -l

sudo mkdir -p /usr/local/chard/tmp/docbook-4.3
cd /usr/local/chard/tmp/docbook-4.3
sudo curl -L --progress-bar -o docbook-xml-4.3.zip https://www.oasis-open.org/docbook/xml/4.3/docbook-xml-4.3.zip
sudo mkdir -p "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo mkdir -p "$CHARD_ROOT/etc/xml"
sudo bsdtar -xf docbook-xml-4.3.zip -C "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo chmod -R 755 "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo touch "$CHARD_ROOT/etc/xml/catalog"


cleanup_chroot() {
    echo "${RED}Unmounting Chard${RESET}"
    sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
    sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
    sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
    sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
    sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
    sudo cp /usr/local/chard/chardbuild.log /home/chronos/user/MyFiles/Downloads/
}

trap cleanup_chroot EXIT INT TERM

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    ARCHIVE="$NAME-$VERSION.$EXT"

    echo "${RESET}${GREEN}[+] Downloading $URL "

    attempt=1
    while true; do
        sudo curl -L --progress-bar -o "$BUILD_DIR/$ARCHIVE" "$URL" && break

        echo "${RED}[!] Download failed for $NAME-$VERSION (attempt $attempt/$MAX_RETRIES), retrying in $RETRY_DELAY seconds..."
        (( attempt++ ))

        if (( attempt > MAX_RETRIES )); then
            echo "${BOLD}${RED}[!] Failed to download $NAME-$VERSION after $MAX_RETRIES attempts. Aborting.${RESET}"
            exit 1
        fi
        sleep $RETRY_DELAY
    done

    echo "${RESET}${YELLOW}[+] Extracting $NAME-$VERSION"
    case "$EXT" in
        tar.gz|tgz)
            sudo tar -xzf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.xz)
            sudo tar -xJf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.bz2)
            sudo tar -xjf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        zip)
            sudo bsdtar -xf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR"
            ;;
        *)
            echo "Unknown archive format: $EXT"
    esac
done

sudo tee /usr/local/chard/bin/emerge > /dev/null <<'EOF'
#!/usr/bin/env python3
import os
import sys
import errno
import glob
import tokenize

CHROOT_PYTHON = "/usr/local/chard/usr/sbin/python"
if os.path.exists(CHROOT_PYTHON):
    python_exec = CHROOT_PYTHON
else:
    python_exec = sys.executable

major = sys.version_info.major
minor = sys.version_info.minor
dotver = f"{major}.{minor}"

PYEXEC_BASE = "/usr/local/chard/usr/lib/python-exec"
if not os.path.isdir(PYEXEC_BASE):
    PYEXEC_BASE = "/usr/lib/python-exec"

exec_dirs = sorted(glob.glob(os.path.join(PYEXEC_BASE, "python[0-9]*.[0-9]*")))
if not exec_dirs:
    exec_dirs = [os.path.join(PYEXEC_BASE, f"python{dotver}")]

python_dir = exec_dirs[-2] if len(exec_dirs) > 1 else exec_dirs[-1]

python_ver = python_dir.split('/')[-1].replace("python", "")
python_underscore = python_ver.replace(".", "_")

os.environ["PYEXEC_DIR"] = python_dir
os.environ["PYTHON_SINGLE_TARGET"] = f"python{python_underscore}"
os.environ["PYTHON_TARGETS"] = f"python{python_underscore}"

python_site = f"/usr/lib/python{python_ver}/site-packages"
if os.environ.get("PYTHONPATH"):
    os.environ["PYTHONPATH"] = f"{python_site}:{os.environ['PYTHONPATH']}"
else:
    os.environ["PYTHONPATH"] = python_site

target_name = os.path.basename(sys.argv[0])
target_path = os.path.join(python_dir, target_name)

data = None
while data is None:
    try:
        kwargs = {}
        with open(target_path, "rb") as f:
            kwargs["encoding"] = tokenize.detect_encoding(f.readline)[0]
        with open(target_path, "r", **kwargs) as f:
            data = f.read()
    except IOError as e:
        if e.errno == errno.EINTR:
            continue
        elif e.errno == errno.ENOENT:
            sys.stderr.write(f"{target_path}: Python implementation not supported: {python_exec}\n")
            sys.exit(127)
        else:
            raise

sys.argv[0] = target_path
new_globals = dict(globals())
new_globals["__file__"] = target_path

exec(data, new_globals)
EOF

sudo chmod +x /usr/local/chard/bin/emerge

sudo tee "$CHARD_ROOT/etc/portage/repos.conf/gentoo.conf" > /dev/null <<'EOF'
[gentoo]
location = /var/db/repos/gentoo
sync-type = rsync
sync-uri = rsync://rsync.gentoo.org/gentoo-portage
auto-sync = yes
EOF

sudo tee /usr/local/chard/etc/profile.d/display.sh > /dev/null <<'EOF'
export DISPLAY=:0
EOF
sudo chmod +x /usr/local/chard/etc/profile.d/display.sh

 ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH"; exit 1 ;;
esac

sudo tee /usr/local/chard/etc/portage/make.conf > /dev/null <<EOF
# Chard Portage make.conf
# Manually generated
COMMON_FLAGS="-O2 -pipe"
CFLAGS="-O2 -pipe"
CXXFLAGS="-O2 -pipe"
FCFLAGS="-O2 -pipe"
FFLAGS="-O2 -pipe"
LC_MESSAGES=C.utf8
DISTDIR="/var/cache/distfiles"
PKGDIR="/var/cache/packages"
PORTAGE_TMPDIR="/var/tmp"
PORTDIR="/usr/portage"
SANDBOX="/usr/bin/sandbox"
CHOST="$CHOST"
CC="/usr/bin/gcc"
CXX="/usr/bin/g++"
AR="/usr/bin/gcc-ar"
RANLIB="/usr/bin/gcc-ranlib"
STRIP="/usr/bin/strip"
FEATURES="assume-digests binpkg-docompress binpkg-dostrip binpkg-logs config-protect-if-modified distlocks ebuild-locks fixlafiles ipc-sandbox merge-sync multilib-strict network-sandbox news parallel-fetch pid-sandbox preserve-libs protect-owned strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersync xattr"
USE="X a52 aac acl acpi alsa bluetooth bindist branding bzip2 cairo cdda cdr cet crypt cups dbus dri dts dvd dvdr -elogind encode exif flac gdbm gif gpm gtk gui iconv icu ipv6 jpeg lcms libnotify libtirpc mad mng mp3 mp4 mpeg multilib ncurses nls ogg opengl openmp pam pango pcre pdf png policykit ppds qml qt5 qt6 readline sdl seccomp sound spell ssl startup-notification svg test-rust truetype udev udisks unicode upower usb vorbis vulkan wayland wxwidgets x264 xattr xcb xft xml xv xvid zlib x11 -network-sandbox -sandbox -usersandbox"
PYTHON_TARGETS="python3_13"
ACCEPT_KEYWORDS="~amd64 ~x86 ~arm ~arm64"
PKG_CONFIG_PATH="/usr/lib/pkgconfig:/lib/pkgconfig:/usr/share/pkgconfig:/share/pkgconfig:$PKG_CONFIG_PATH"
PKG_CONFIG="/usr/bin/pkg-config"
PORTAGE_PROFILE_DIR="/usr/local/etc/portage/make.profile"
MESON_NATIVE_FILE="/meson-cross.ini"
EOF

#PORTAGE_PROFILE_DIR="/usr/local/chard/etc/portage/make.profile"
#sudo mkdir -p "$PORTAGE_PROFILE_DIR"
#echo "/etc/portage/make.profile" | sudo tee "$PORTAGE_PROFILE_DIR/parent" > /dev/null

sudo mkdir -p /usr/local/chard/usr/share/sandbox

sudo tee /usr/local/chard/etc/sandbox.conf > /dev/null <<'EOF'
SANDBOX_BASHRC="/usr/share/sandbox/sandbox.bashrc"
SANDBOX_D="/etc/sandbox.d"
ns-mount-off
ns-pid-off
ns-ipc-off
ns-net-off
ns-user-off
EOF

sudo tee "/usr/local/chard/usr/share/sandbox/sandbox.bashrc" > /dev/null <<'EOF'
export HOME="/home/chronos/user/"
export USER="chronos"
export LOGNAME="chronos"
export PATH=/usr/bin:/bin:/usr/local/bin:$HOME/.cargo/bin:$PATH
EOF

ARCH=$(uname -m)

case "$ARCH" in
    x86_64)
        sudo tee "$CHARD_ROOT/mesonrust.ini" > /dev/null <<'EOF'
[binaries]
c = '/usr/bin/gcc'
cpp = '/usr/bin/g++'
ar = '/usr/bin/gcc-ar'
ranlib = '/usr/bin/gcc-ranlib'
strip = '/usr/bin/strip'
pkgconfig = 'pkg-config'
cargo = '/home/chronos/user/.cargo/bin/cargo'
rust = '/home/chronos/user/.cargo/bin/rustc'

[properties]
rust_target = 'x86_64-pc-linux-gnu'

[host_machine]
system = 'linux'
cpu_family = 'x86_64'
cpu = 'x86_64'
endian = 'little'
EOF
        ;;
    aarch64|arm64)
        sudo tee "$CHARD_ROOT/mesonrust.ini" > /dev/null <<'EOF'
[binaries]
c = '/usr/bin/gcc'
cpp = '/usr/bin/g++'
ar = '/usr/bin/gcc-ar'
ranlib = '/usr/bin/gcc-ranlib'
strip = '/usr/bin/strip'
pkgconfig = 'pkg-config'
cargo = '/home/chronos/user/.cargo/bin/cargo'
rust = '/home/chronos/user/.cargo/bin/rustc'

[properties]
rust_target = 'aarch64-unknown-linux-gnu'

[host_machine]
system = 'linux'
cpu_family = 'aarch64'
cpu = 'aarch64'
endian = 'little'
EOF
        ;;
    *)
        echo "Unsupported architecture: $ARCH"
        exit 1
        ;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        CHOST=x86_64-pc-linux-gnu
        PROFILE_DIR="$CHARD_ROOT/var/db/repos/gentoo/profiles/default/linux/amd64/17.1"
        ;;
    aarch64)
        CHOST=aarch64-unknown-linux-gnu
        PROFILE_DIR="$CHARD_ROOT/var/db/repos/gentoo/profiles/default/linux/arm64/17.1"
        ;;
    *)
        echo "Unknown architecture: $ARCH"
        exit 1
        ;;
esac

sudo mkdir -p "$CHARD_ROOT/var/db/repos/gentoo/profiles"
sudo mkdir -p "$PROFILE_DIR"

sudo tee "$CHARD_ROOT/var/db/repos/gentoo/profiles/repo_name" > /dev/null <<'EOF'
gentoo
EOF

#sudo touch "$PROFILE_DIR/parent"

echo "${RESET}${MAGENTA}Created $CHARD_ROOT/mesonrust.ini for $ARCH ${RESET}"
ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        CHOST=x86_64-pc-linux-gnu
        CPU_FAMILY=x86_64
        ;;
    aarch64)
        CHOST=aarch64-unknown-linux-gnu
        CPU_FAMILY=arm64
        ;;
    *)
        echo "Unknown architecture: $ARCH"
        exit 1
        ;;
esac

MESON_FILE="/usr/local/chard/meson-cross.ini"

sudo tee "$MESON_FILE" > /dev/null <<EOF

c = '/usr/bin/gcc'
cpp = '/usr/bin/g++'
ar = '/usr/bin/gcc-ar'
ranlib = '/usr/bin/gcc-ranlib'
strip = '/usr/bin/strip'
pkgconfig = '/usr/bin/pkg-config'
pkg-config = '/usr/bin/pkg-config'
llvm-config = 'llvm-config'
fortran = 'false'
objc = 'false'
objcpp = 'false'
objcopy = '/usr/bin/gcc-objcopy'
windres = '/usr/bin/gcc-windres'
python = '/usr/bin/python3'
ninja = '/usr/bin/ninja'

[built-in options]
c_args = ['-O2', '-pipe', '-fPIC', '-I/usr/include']
c_link_args = ['-L/usr/lib64']
cpp_args = ['-O2', '-pipe', '-fPIC', '-I/usr/include']
cpp_link_args = ['-L/usr/lib64']
fortran_args = []
fortran_link_args = []
objc_args = []
objc_link_args = []
objcpp_args = []
objcpp_link_args = []

[properties]
needs_exe_wrapper = false
pkg_config_libdir = '/usr/lib64/pkgconfig'

[build_machine]
system = 'linux'
cpu_family = '$CPU_FAMILY'
cpu = '$CPU_FAMILY'
endian = 'little'
EOF

echo "${RESET}${GREEN}[+] Meson file created at $MESON_FILE for architecture $ARCH ${RESET}"

sudo mkdir -p /usr/local/chard/etc/X11/xorg.conf.d

XORG_CONF_DIR="/usr/local/chard/etc/X11/xorg.conf.d"
sudo mkdir -p "$XORG_CONF_DIR"

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        CHOST="x86_64-pc-linux-gnu"
        CPU_FAMILY="x86_64"
        ;;
    aarch64)
        CHOST="aarch64-unknown-linux-gnu"
        CPU_FAMILY="arm64"
        ;;
    armv7*|armhf)
        CHOST="armv7a-unknown-linux-gnueabihf"
        CPU_FAMILY="arm"
        ;;
    *)
        echo "${YELLOW}Unknown architecture:${RESET} $ARCH"
        ;;
esac

detect_gpu_freq() {
    GPU_FREQ_PATH=""
    GPU_MAX_FREQ=""
    GPU_TYPE="unknown"

    if [ -f "/sys/class/drm/card0/gt_max_freq_mhz" ]; then
        GPU_FREQ_PATH="/sys/class/drm/card0/gt_max_freq_mhz"
        GPU_MAX_FREQ=$(cat "$GPU_FREQ_PATH")
        GPU_TYPE="intel"
        return
    fi

    if [ -f "/sys/class/drm/card0/device/pp_od_clk_voltage" ]; then
        GPU_TYPE="amd"
        PP_OD_FILE="/sys/class/drm/card0/device/pp_od_clk_voltage"
        mapfile -t SCLK_LINES < <(grep -i '^sclk' "$PP_OD_FILE")
        if [[ ${#SCLK_LINES[@]} -gt 0 ]]; then
            MAX_MHZ=$(printf '%s\n' "${SCLK_LINES[@]}" | sed -n 's/.*\([0-9]\{1,\}\)[Mm][Hh][Zz].*/\1/p' | sort -nr | head -n1)
            if [[ -n "$MAX_MHZ" ]]; then
                GPU_MAX_FREQ="$MAX_MHZ"
            fi
        fi
        GPU_FREQ_PATH="$PP_OD_FILE"
        return
    fi

    for d in /sys/class/devfreq/*; do
        if grep -qi 'mali' <<< "$d" || grep -qi 'gpu' <<< "$d"; then
            if [ -f "$d/max_freq" ]; then
                GPU_FREQ_PATH="$d/max_freq"
                GPU_MAX_FREQ=$(cat "$GPU_FREQ_PATH")
                GPU_TYPE="mali"
                return
            elif [ -f "$d/available_frequencies" ]; then
                GPU_FREQ_PATH="$d/available_frequencies"
                GPU_MAX_FREQ=$(tr ' ' '\n' < "$GPU_FREQ_PATH" | sort -nr | head -n1)
                GPU_TYPE="mali"
                return
            fi
        fi
    done

    if [ -d "/sys/class/kgsl/kgsl-3d0" ]; then
        if [ -f "/sys/class/kgsl/kgsl-3d0/max_gpuclk" ]; then
            GPU_FREQ_PATH="/sys/class/kgsl/kgsl-3d0/max_gpuclk"
            GPU_MAX_FREQ=$(cat "$GPU_FREQ_PATH")
            GPU_TYPE="adreno"
            return
        elif [ -f "/sys/class/kgsl/kgsl-3d0/gpuclk" ]; then
            GPU_FREQ_PATH="/sys/class/kgsl/kgsl-3d0/gpuclk"
            GPU_MAX_FREQ=$(cat "$GPU_FREQ_PATH")
            GPU_TYPE="adreno"
            return
        fi
    fi

    if [[ -d /sys/class/drm ]]; then
        if grep -qi "mediatek" /sys/class/drm/*/device/uevent 2>/dev/null; then
            GPU_TYPE="mediatek"
        elif grep -qi "vivante" /sys/class/drm/*/device/uevent 2>/dev/null; then
            GPU_TYPE="vivante"
        fi
    fi

    GPU_FREQ_PATH=""
    GPU_MAX_FREQ=""
}

detect_gpu_freq
GPU_VENDOR="$GPU_TYPE"
IDENTIFIER="Generic GPU"
DRIVER="modesetting"
ACCEL="glamor"

case "$GPU_VENDOR" in
    intel)
        IDENTIFIER="Intel Graphics"
        DRIVER="modesetting"
        ;;
    amd)
        IDENTIFIER="AMD Graphics"
        DRIVER="amdgpu"
        ;;
    nvidia)
        IDENTIFIER="NVIDIA Graphics"
        DRIVER="nvidia"
        ACCEL=""
        ;;
    mali)
        IDENTIFIER="ARM Mali Graphics"
        DRIVER="panfrost"
        ;;
    adreno)
        IDENTIFIER="Qualcomm Adreno Graphics"
        DRIVER="modesetting"
        ;;
    mediatek)
        IDENTIFIER="MediaTek GPU"
        DRIVER="modesetting"
        ;;
    vivante)
        IDENTIFIER="Vivante GPU"
        DRIVER="etnaviv"
        ;;
    *)
        IDENTIFIER="Generic GPU"
        DRIVER="modesetting"
        ;;
esac

sudo tee "$XORG_CONF_DIR/20-glamor.conf" > /dev/null <<EOF
Section "Device"
    Identifier "$IDENTIFIER"
    Driver "$DRIVER"
EOF

if [[ -n "$ACCEL" ]]; then
    echo "    Option \"AccelMethod\" \"$ACCEL\"" | sudo tee -a "$XORG_CONF_DIR/20-glamor.conf" > /dev/null
fi

cat <<EOF | sudo tee -a "$XORG_CONF_DIR/20-glamor.conf" > /dev/null
EndSection
EOF

if [[ -n "$GPU_VENDOR" && "$GPU_VENDOR" != "unknown" ]]; then
    echo "${MAGENTA}Detected GPU:${RESET} $GPU_VENDOR ($ARCH)"
else
    echo "${YELLOW}Warning:${RESET} GPU not detected. Using generic Xorg configuration."
fi

echo "${MAGENTA}Generated:${RESET} $XORG_CONF_DIR/20-glamor.conf for ${GREEN}$IDENTIFIER${RESET} (${CPU_FAMILY})"

sudo mkdir -p /usr/local/chard/run/dbus
sudo mkdir -p /usr/local/chard/tmp/.X11-unix

echo "${RESET}${GREEN}[+] Mounting Chard Chroot${RESET}"
sudo cp /etc/resolv.conf /usr/local/chard/etc/resolv.conf

echo "${BLUE}${BOLD}chardbuild.log${RESET}${BLUE} copied to Downloads folder for viewing. ${RESET}"
echo "${RESET}${YELLOW}make.conf successfully updated for Chard. ${RESET}"
echo "${RESET}${BLUE}Setting up Emerge!"

sudo chroot /usr/local/chard /bin/bash -c "

    mountpoint -q /proc    || mount -t proc proc /proc
    mountpoint -q /sys     || mount -t sysfs sys /sys
    mountpoint -q /dev     || mount -t devtmpfs devtmpfs /dev
    mountpoint -q /dev/shm || mount -t tmpfs tmpfs /dev/shm
    mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts
    mountpoint -q /etc/ssl || mount --bind /etc/ssl /etc/ssl
    [ -e /dev/null    ] || mknod -m 666 /dev/null c 1 3
    [ -e /dev/tty     ] || mknod -m 666 /dev/tty c 5 0
    [ -e /dev/random  ] || mknod -m 666 /dev/random c 1 8
    [ -e /dev/urandom ] || mknod -m 666 /dev/urandom c 1 9

    ARCH=\$(uname -m)
    case \"\$ARCH\" in
        x86_64)  CHOST=x86_64-pc-linux-gnu ;;
        aarch64) CHOST=aarch64-unknown-linux-gnu ;;
        *) echo \"Unknown architecture: \$ARCH\"; exit 1 ;;
    esac
            export ARCH
            export CHOST
            export HOME=/home/chronos/user
            export MAGIC=\"/usr/share/misc/magic.mgc\"
            export CC=/usr/bin/gcc
            export CXX=/usr/bin/g++
            export AR=/usr/bin/gcc-ar
            export RANLIB=/usr/bin/gcc-ranlib
            export STRIP=/usr/bin/strip
            export PATH=/usr/bin:/bin:/usr/local/bin:\$HOME/.cargo/bin
            export LD_LIBRARY_PATH=\"/lib:/lib64:/usr/lib:/usr/lib64:\$HOME/.rustup/toolchains/stable-$CHOST/lib:/usr/local/lib:/usr/local/lib64\${LD_LIBRARY_PATH:+:\$LD_LIBRARY_PATH}\"
            export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:\${PERL5LIB}
            export PKG_CONFIG=/usr/bin/pkg-config
            export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:\${PKG_CONFIG_PATH}
            export PYTHON=\"/bin/python3\"
            export FORCE_UNSAFE_CONFIGURE=1
            export XDG_DATA_DIRS=\"/usr/share:/usr/local/share\"
            export CFLAGS=\"-O2 -pipe -fPIC -I/usr/include\"
            export CXXFLAGS=\"-O2 -pipe -fPIC -I/usr/include\"
            export LDFLAGS=\"-L/usr/lib -L/usr/lib64\"
            export GI_TYPELIB_PATH=/usr/lib64/girepository-1.0:\${GI_TYPELIB_PATH:-}
            export CARGO_HOME=\$HOME/.cargo
            export RUSTUP_HOME=\$HOME/.rustup
            export GIT_TEMPLATE_DIR=/usr/share/git-core/templates
            export PORTAGE_PROFILE_DIR=\"/usr/local/etc/portage/make.profile\"
            export PORTAGE_LOGDIR=\"/var/log/portage\"
            export PORTAGE_CONFIGROOT=\"/\"
            export PORTAGE_TMPDIR=\"/var/tmp\"
            export MESON_CROSS_FILE=\"/meson-cross.ini\"
            export XDG_RUNTIME_DIR=\"/usr/local/chard/run/user/0\"
            export DISPLAY=:0
            export LD=\"/usr/bin/ld\"

    emerge --sync

    umount /etc/ssl
    umount /dev/pts
    umount /dev/shm
    umount /dev
    umount /sys
    umount /proc
"
sudo mv /usr/local/chard/usr/lib/libcrypt.so /usr/local/chard/usr/lib/libcrypt.so.bak 2>/dev/null

if ! lscpu -e=CPU,MAXMHZ >/dev/null 2>&1; then
    echo "Error: lscpu -e=CPU,MAXMHZ not supported on this system."
    return 0
fi

mapfile -t CORES < <(lscpu -e=CPU,MAXMHZ 2>/dev/null | \
    awk 'NR>1 && $2 ~ /^[0-9.]+$/ {print $1 ":" $2}' | sort -t: -k2,2n)

if (( ${#CORES[@]} == 0 )); then
    echo "No CPU frequency data found."
    return 0
fi

mhz_values=($(printf '%s\n' "${CORES[@]}" | cut -d: -f2 | sort -n))
count=${#mhz_values[@]}
mid=$((count / 2))
if (( count % 2 == 0 )); then
    threshold=$(awk "BEGIN {print (${mhz_values[mid-1]} + ${mhz_values[mid]}) / 2}")
else
    threshold="${mhz_values[mid]}"
fi

WEAK_CORES=$(printf '%s\n' "${CORES[@]}" | \
    awk -v t="$threshold" -F: '{if ($2 <= t) print $1}' | paste -sd, -)

if [[ -z "$WEAK_CORES" ]]; then
    echo "Warning: Could not determine weak cores, defaulting to all cores."
    WEAK_CORES=$(seq 0 $(( $(nproc) - 1 )) | paste -sd, -)
fi

export TASKSET="taskset -c $WEAK_CORES"

MEM_KB=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
MEM_GB=$(( (MEM_KB + 1024*1024 - 1) / 1024 / 1024 ))
THREADS=$((MEM_GB / 2))
((THREADS < 1)) && THREADS=1

TOTAL_CORES=$(nproc)
ECORE_COUNT=$(echo "$WEAK_CORES" | tr ',' '\n' | wc -l)
ECORE_RATIO=$(awk "BEGIN {print $ECORE_COUNT / $TOTAL_CORES}")

if (( $(awk "BEGIN {print ($ECORE_RATIO >= 0.5)}") )); then
    THREADS=$(awk -v t="$THREADS" 'BEGIN {printf("%d", t * 3.0)}')
fi

export MAKEOPTS="-j$THREADS"

parallel_tools=(make emerge ninja scons meson cmake)
for tool in "${parallel_tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        alias "$tool"="$TASKSET $tool $MAKEOPTS"
    fi
done

serial_tools=(cargo go rustc gcc g++ clang clang++ ccache waf python pip install npm yarn node gyp bazel b2 bjam dune dune-build)
for tool in "${serial_tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        alias "$tool"="$TASKSET $tool"
    fi
done

sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true

echo "${RESET}${YELLOW}Chard Root is ready!"
echo "${RESET}${BLUE}Emerge is ready! Please do not sync more than once a day.${RESET}"
echo "${RESET}${MAGENTA}[!] Open a new shell and run:"
echo "${RESET}${BOLD}${GREEN}chard root${RESET}"
echo
echo "${CYAN}Compiling takes a long time, so please be patient if you have a slow CPU. ${RESET}"
echo "${BLUE}To start compiling apps, run ${BOLD}chard root${RESET}${BLUE}${RESET}"
echo "${RESET}${GREEN}Eventually a precompiled version will be made once thorough testing is done. Chard is only supporting chard chroot for testing purposes. ${RESET}"
echo

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        sudo tee /usr/local/chard/usr/src/linux/enable_features.cfg > /dev/null <<'EOF'
CONFIG_BT=y
CONFIG_BT_RFCOMM=y
CONFIG_BT_RFCOMM_TTY=y
CONFIG_BT_BNEP=y
CONFIG_BT_BNEP_MC_FILTER=y
CONFIG_BT_BNEP_PROTO_FILTER=y
CONFIG_BT_HIDP=y
CONFIG_CRYPTO_USER=y
CONFIG_CRYPTO_USER_API=y
CONFIG_CRYPTO_USER_API_SKCIPHER=y
CONFIG_CRYPTO_USER_API_AEAD=y
CONFIG_CRYPTO_SHA1=y
CONFIG_KEY_DH_OPERATIONS=y
CONFIG_UHID=y
CONFIG_CRYPTO_SHA256=y
CONFIG_CRYPTO_SHA512=y
CONFIG_CRYPTO_USER_API_HASH=y
CONFIG_CRYPTO_USER_API_RNG=y
CONFIG_KEYS=y
CONFIG_SECURITY=y
CONFIG_SECURITY_FILE_CAPABILITIES=y
CONFIG_INTEGRITY=y
CONFIG_INTEGRITY_AUDIT=y
CONFIG_IMA_READ_POLICY=y
CONFIG_FUSE=y
CONFIG_FUSE_FS=y
CONFIG_VIRTIO_FS=y
CONFIG_9P_FS=y
CONFIG_9P_FS_POSIX_ACL=y
CONFIG_9P_FS_SECURITY=y
CONFIG_MEDIA_SUPPORT=y
CONFIG_VIDEO_DEV=y
CONFIG_VIDEOBUF2_CORE=y
CONFIG_VIDEOBUF2_MEMOPS=y
CONFIG_VIDEOBUF2_V4L2=y
CONFIG_V4L2_COMMON=y
CONFIG_VIDEO_V4L2=m
CONFIG_SOUND=y
CONFIG_ALSA=y
CONFIG_SND=y
CONFIG_SND_TIMER=y
CONFIG_SND_PCM=y
CONFIG_SND_MIXER_OSS=y
CONFIG_SND_PCM_OSS=y
CONFIG_SND_HWDEP=y
CONFIG_DRM=y
CONFIG_DRM_KMS_HELPER=y
CONFIG_DRM_FBDEV_EMULATION=y
CONFIG_DRM_TTM=y
CONFIG_DRM_VMA_MANAGER=y
CONFIG_DRM_I915=y
CONFIG_DRM_AMDGPU=y
CONFIG_DRM_NOUVEAU=y
CONFIG_KVM=y
CONFIG_KVM_INTEL=y
CONFIG_VIRTUALIZATION=y
CONFIG_VIRTIO=y
CONFIG_VIRTIO_BLK=y
CONFIG_VIRTIO_NET=y
EOF
        ;;

    aarch64)
        sudo tee /usr/local/chard/usr/src/linux/enable_features.cfg > /dev/null <<'EOF'
CONFIG_BT=y
CONFIG_BT_RFCOMM=y
CONFIG_BT_RFCOMM_TTY=y
CONFIG_BT_BNEP=y
CONFIG_BT_BNEP_MC_FILTER=y
CONFIG_BT_BNEP_PROTO_FILTER=y
CONFIG_BT_HIDP=y
CONFIG_CRYPTO_USER=y
CONFIG_CRYPTO_USER_API=y
CONFIG_CRYPTO_USER_API_SKCIPHER=y
CONFIG_CRYPTO_USER_API_AEAD=y
CONFIG_CRYPTO_SHA1=y
CONFIG_KEY_DH_OPERATIONS=y
CONFIG_UHID=y
CONFIG_CRYPTO_SHA256=y
CONFIG_CRYPTO_SHA512=y
CONFIG_CRYPTO_USER_API_HASH=y
CONFIG_CRYPTO_USER_API_RNG=y
CONFIG_KEYS=y
CONFIG_SECURITY=y
CONFIG_SECURITY_FILE_CAPABILITIES=y
CONFIG_INTEGRITY=y
CONFIG_INTEGRITY_AUDIT=y
CONFIG_IMA_READ_POLICY=y
CONFIG_FUSE=y
CONFIG_FUSE_FS=y
CONFIG_VIRTIO_FS=y
CONFIG_9P_FS=y
CONFIG_9P_FS_POSIX_ACL=y
CONFIG_9P_FS_SECURITY=y
CONFIG_MEDIA_SUPPORT=y
CONFIG_VIDEO_DEV=y
CONFIG_VIDEOBUF2_CORE=y
CONFIG_VIDEOBUF2_MEMOPS=y
CONFIG_VIDEOBUF2_V4L2=y
CONFIG_V4L2_COMMON=y
CONFIG_VIDEO_V4L2=m
CONFIG_SOUND=y
CONFIG_ALSA=y
CONFIG_SND=y
CONFIG_SND_TIMER=y
CONFIG_SND_PCM=y
CONFIG_SND_MIXER_OSS=y
CONFIG_SND_PCM_OSS=y
CONFIG_SND_HWDEP=y
CONFIG_DRM=y
CONFIG_DRM_KMS_HELPER=y
CONFIG_DRM_FBDEV_EMULATION=y
CONFIG_DRM_TTM=y
CONFIG_DRM_VMA_MANAGER=y
CONFIG_DRM_ROCKCHIP=y
CONFIG_DRM_ARM_DC=y
CONFIG_KVM=y
CONFIG_KVM_ARM_VIRTUALIZATION=y
CONFIG_VIRTUALIZATION=y
CONFIG_VIRTIO=y
CONFIG_VIRTIO_BLK=y
CONFIG_VIRTIO_NET=y
EOF
        ;;
    *)
        echo "Unknown architecture: $ARCH"
        exit 1
        ;;
esac



sudo chroot /usr/local/chard /bin/bash -c "

        mountpoint -q /proc    || mount -t proc proc /proc
        mountpoint -q /sys     || mount -t sysfs sys /sys
        mountpoint -q /dev     || mount -t devtmpfs devtmpfs /dev
        mountpoint -q /dev/shm || mount -t tmpfs tmpfs /dev/shm
        mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts
        mountpoint -q /etc/ssl || mount --bind /etc/ssl /etc/ssl
        [ -e /dev/null    ] || mknod -m 666 /dev/null c 1 3
        [ -e /dev/tty     ] || mknod -m 666 /dev/tty c 5 0
        [ -e /dev/random  ] || mknod -m 666 /dev/random c 1 8
        [ -e /dev/urandom ] || mknod -m 666 /dev/urandom c 1 9
    
        ARCH=\$(uname -m)
        case \"\$ARCH\" in
            x86_64)  CHOST=x86_64-pc-linux-gnu ;;
            aarch64) CHOST=aarch64-unknown-linux-gnu ;;
            *) echo \"Unknown architecture: \$ARCH\"; exit 1 ;;
        esac
                export ARCH
                export CHOST
                export HOME=/home/chronos/user
                export MAGIC=\"/usr/share/misc/magic.mgc\"
                export CC=/usr/bin/gcc
                export CXX=/usr/bin/g++
                export AR=/usr/bin/gcc-ar
                export RANLIB=/usr/bin/gcc-ranlib
                export STRIP=/usr/bin/strip
                export PATH=/usr/bin:/bin:/usr/local/bin:\$HOME/.cargo/bin
                export LD_LIBRARY_PATH=\"/lib:/lib64:/usr/lib:/usr/lib64:\$HOME/.rustup/toolchains/stable-$CHOST/lib:/usr/local/lib:/usr/local/lib64\${LD_LIBRARY_PATH:+:\$LD_LIBRARY_PATH}\"
                export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:\${PERL5LIB}
                export PKG_CONFIG=/usr/bin/pkg-config
                export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:\${PKG_CONFIG_PATH}
                export PYTHON=\"/bin/python3\"
                export FORCE_UNSAFE_CONFIGURE=1
                export XDG_DATA_DIRS=\"/usr/share:/usr/local/share\"
                export CFLAGS=\"-O2 -pipe -fPIC -I/usr/include\"
                export CXXFLAGS=\"-O2 -pipe -fPIC -I/usr/include\"
                export LDFLAGS=\"-L/usr/lib -L/usr/lib64\"
                export GI_TYPELIB_PATH=/usr/lib64/girepository-1.0:\${GI_TYPELIB_PATH:-}
                export CARGO_HOME=\$HOME/.cargo
                export RUSTUP_HOME=\$HOME/.rustup
                export GIT_TEMPLATE_DIR=/usr/share/git-core/templates
                export PORTAGE_PROFILE_DIR=\"/usr/local/etc/portage/make.profile\"
                export PORTAGE_LOGDIR=\"/var/log/portage\"
                export PORTAGE_CONFIGROOT=\"/\"
                export PORTAGE_TMPDIR=\"/var/tmp\"
                export MESON_CROSS_FILE=\"/meson-cross.ini\"
                export XDG_RUNTIME_DIR=\"/usr/local/chard/run/user/0\"
                export DISPLAY=:0
                export LD=\"/usr/bin/ld\"
                source /home/chronos/user/.bashrc
                dbus-daemon --system --fork 2>/dev/null
                emerge dev-build/make
                USE="-gui" emerge -1 dev-build/cmake
                emerge sys-devel/gcc
                emerge dev-libs/gmp
                emerge dev-libs/mpfr
                emerge sys-devel/binutils
                emerge sys-apps/diffutils
                emerge dev-libs/openssl
                emerge net-misc/curl
                emerge dev-vcs/git
                emerge sys-apps/coreutils
                emerge app-misc/fastfetch
                echo dev-lang/perl ~$(portageq envvar ARCH) >> /etc/portage/package.accept_keywords/perl
                emerge -1 dev-lang/perl
                perl-cleaner --reallyall
                emerge virtual/perl-Digest
                emerge virtual/perl-CPAN
                emerge virtual/perl-CPAN-Meta
                emerge virtual/perl-Data-Dumper
                emerge virtual/perl-Math-BigInt
                emerge virtual/perl-Scalar-List-Utils
                emerge dev-perl/Capture-Tiny
                emerge dev-perl/Try-Tiny
                emerge dev-perl/Config-AutoConf
                emerge dev-perl/Test-Fatal
                emerge sys-apps/findutils
                emerge dev-libs/elfutils
                cd /usr/src/linux
                scripts/kconfig/merge_config.sh -m .config enable_features.cfg
                make olddefconfig
                make -j\$(nproc) tools/objtool
                make -j\$(nproc)
                make modules_install
                make INSTALL_PATH=/boot install
                emerge dev-lang/python
                emerge dev-build/meson
                emerge dev-python/pillow
                emerge media-libs/harfbuzz
                emerge dev-libs/glib
                emerge dev-util/pkgconf
                #emerge -1 dev-lang/ruby --autounmask-backtrack=y
                #emerge dev-ruby/pkg-config
                emerge dev-cpp/gtest
                emerge dev-util/gtest-parallel
                emerge dev-util/re2c
                emerge dev-build/ninja
                emerge app-text/docbook2X
                emerge app-text/build-docbook-catalog
                emerge dev-util/gtk-doc
                emerge sys-libs/zlib
                emerge dev-libs/libunistring
                emerge sys-apps/file
                emerge kde-frameworks/extra-cmake-modules
                emerge dev-perl/File-LibMagic
                emerge net-libs/libpsl
                emerge dev-libs/expat
                emerge dev-lang/duktape
                emerge app-arch/brotli
                mv /usr/lib/libcrypt.so /usr/lib/libcrypt.so.bak || true
                emerge dev-lang/rust
                emerge sys-auth/polkit
                emerge sys-apps/bubblewrap
                emerge app-portage/gentoolkit
                emerge media-libs/harfbuzz
                emerge x11-base/xorg-drivers
                emerge x11-base/xorg-server
                emerge x11-base/xorg-apps
                emerge x11-libs/libX11
                emerge x11-libs/libXft
                emerge x11-libs/libXrender
                emerge x11-libs/libXrandr
                emerge x11-libs/libXcursor
                emerge x11-libs/libXi
                emerge x11-libs/libXinerama
                emerge x11-libs/pango
                emerge dev-libs/wayland
                emerge dev-libs/wayland-protocols
                emerge x11-base/xwayland
                emerge x11-libs/libxkbcommon
                emerge gui-libs/gtk
                emerge xfce-base/libxfce4util
                emerge xfce-base/xfconf
                emerge sys-apps/xdg-desktop-portal
                emerge gui-libs/xdg-desktop-portal-wlr
                emerge media-libs/mesa
                emerge x11-apps/mesa-progs
                emerge media-sound/pulseaudio-daemon
                emerge media-sound/pulseaudio-ctl
                emerge dev-qt/qtbase
                emerge dev-qt/qttools
                emerge dev-build/cmake
                emerge media-libs/pulseaudio-qt
                emerge media-sound/alsa-utils
                emerge sys-apps/dbus
                emerge app-accessibility/at-spi2-core
                emerge app-accessibility/at-spi2-atk
                emerge media-libs/fontconfig
                emerge media-fonts/dejavu
                emerge app-text/doxygen
                emerge x11-themes/gtk-engines
                emerge x11-themes/gtk-engines-murrine
                emerge sys-fs/udisks
                emerge sys-power/upower
                emerge sys-apps/bluez
                emerge dev-python/pybluez
                emerge dev-lang/python
                emerge x11-libs/libnotify
                emerge dev-libs/libdbusmenu
                emerge x11-libs/libSM
                emerge x11-libs/libICE
                emerge x11-libs/libwnck
                emerge cmake
                emerge app-admin/exo
                emerge app-arch/tar
                emerge app-arch/xz-utils
                emerge net-libs/gnutls
                emerge net-libs/glib-networking
                emerge sys-libs/libseccomp
                emerge app-eselect/eselect-repository
                emerge dev-libs/appstream-glib
                emerge app-crypt/gpgme
                emerge dev-libs/json-glib
                emerge dev-util/ostree
                emerge sys-apps/xdg-dbus-proxy
                emerge x11-libs/gdk-pixbuf
                emerge sys-fs/fuse
                emerge dev-python/pygobject
                emerge gnome-base/dconf
                emerge x11-misc/xdg-utils
                emerge x11-apps/xinit
                emerge x11-terms/xterm
                emerge x11-wm/twm
                emerge xfce-extra/xfce4-screensaver
                emerge xfce-base/xfce4-meta
                emerge media-gfx/chafa
                cd /tmp
                git clone https://chromium.googlesource.com/chromiumos/platform2
                cd vm_tools/sommelier
                meson setup build --prefix=/usr
                ninja -C build
                ninja -C build install
                emerge www-client/firefox
                emerge sys-apps/flatpak
                flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
                umount /etc/ssl
                umount /dev/pts
                umount /dev/shm
                umount /dev
                umount /sys
                umount /proc
            "
            show_progress
            echo "${GREEN}[+] Chard Root is ready! ${RESET}"
            sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
            sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
            sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
            sudo cp /usr/local/chard/chardbuild.log /home/chronos/user/MyFiles/Downloads/
