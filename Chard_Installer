#!/bin/bash

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"

echo "${GREEN}[+] Creating Chard directories...${RESET}"
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp,bin,include,usr/include/linux}
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"

echo "${GREEN}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"
sudo chown -R 1000:1000 "$CHARD_ROOT" || true


if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${YELLOW}[+] Chard sourced to ~/.bashrc${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc${RESET}"
fi

WORK_DIR="$CHARD_ROOT/var/tmp/linux-src"
INCLUDE_DIR="$CHARD_ROOT/usr/include"

mkdir -p "$WORK_DIR" "$INCLUDE_DIR"

ARCH=$(uname -m)
LINUX_DIR="$WORK_DIR/linux-master"

echo "${MAGENTA}[+] Downloading Linux source master.zip...${RESET}"
curl -L -o "$WORK_DIR/linux-master.zip" https://github.com/torvalds/linux/archive/refs/heads/master.zip

echo "${YELLOW}[+] Extracting Linux source...${RESET}"
bsdtar -xf "$WORK_DIR/linux-master.zip" -C "$WORK_DIR"

case "$ARCH" in
    x86_64)
        SRC_PATH="$LINUX_DIR/arch/x86"
        ;;
    aarch64|arm64)
        SRC_PATH="$LINUX_DIR/arch/arm64"
        ;;
    *)
        echo "${RED}Unsupported architecture: $ARCH${RESET}"
        exit 1
        ;;
esac

if [ -d "$SRC_PATH/include/uapi/asm" ]; then
    mkdir -p "$INCLUDE_DIR/asm"
    cp -r "$SRC_PATH/include/uapi/asm/"* "$INCLUDE_DIR/asm/"
fi

if [ -d "$LINUX_DIR/include/linux" ]; then
    mkdir -p "$INCLUDE_DIR/linux"
    cp -r "$LINUX_DIR/include/linux/"* "$INCLUDE_DIR/linux/"
fi

if [ -d "$SRC_PATH/include/asm" ]; then
    cp -r "$SRC_PATH/include/asm/"* "$INCLUDE_DIR/asm/"
fi

if [ -d "$LINUX_DIR/include/uapi/linux" ]; then
    mkdir -p "$INCLUDE_DIR/uapi/linux"
    cp -r "$LINUX_DIR/include/uapi/linux/"* "$INCLUDE_DIR/uapi/linux/"
fi

if [ -d "$INCLUDE_DIR/asm-generic" ]; then
    cd "$INCLUDE_DIR/asm"
    for f in "$INCLUDE_DIR/asm-generic/"*; do
        base=$(basename "$f")
        if [ ! -e "$base" ]; then
            ln -s "../asm-generic/$base" "$base"
            echo "  symlinked $base"
        fi
    done
fi

if [ -d "$INCLUDE_DIR/linux" ] && [ -d "$INCLUDE_DIR/uapi/linux" ]; then
    cd "$INCLUDE_DIR/uapi/linux"
    for f in "$INCLUDE_DIR/linux/"*; do
        base=$(basename "$f")
        if [ ! -e "$base" ]; then
            ln -s "../../linux/$base" "$base"
            echo "  symlinked linux/$base"
        fi
    done
fi

echo "${GREEN}[+] Linux headers prepared at $INCLUDE_DIR${RESET}"

resolve_final_url() {
    local src="$1"
    local final
    final=$(curl -sSL -w '%{url_effective}' -o /dev/null "$src" 2>/dev/null || true)
    echo "$final"
}

extract_to_target() {
    local archive="$1"
    local target="$2"

    if [[ ! -f "$archive" ]]; then
        echo "${RED}[!] Archive not found: $archive${RESET}"
        return 1
    fi

    mkdir -p "$target"

    case "$archive" in
        *.zst|*.pkg.tar.zst)
            echo "${YELLOW}Extracting zst package to $target..."
            if command -v unzstd >/dev/null 2>&1; then
                sudo tar --use-compress-program=unzstd -xvpf "$archive" -C "$target"
            elif command -v zstd >/dev/null 2>&1; then
                zstd -d -c "$archive" | sudo tar -xpf - -C "$target"
            else
                echo "${RED}Missing 'zstd' or 'unzstd' required to extract .zst packages.${RESET}"
                return 1
            fi
            ;;
        *.xz|*.pkg.tar.xz)
            echo "${YELLOW}Extracting xz package to $target...${RESET}"
            if command -v xz >/dev/null 2>&1 || command -v unxz >/dev/null 2>&1; then
                sudo tar -xJpf "$archive" -C "$target"
            else
                echo "${RED}Missing 'xz' (or 'unxz') required to extract .xz packages.${RESET}"
                return 1
            fi
            ;;
        *.tar.gz|*.tgz)
            echo "${CYAN}Extracting gzip tar to $target...${RESET}"
            sudo tar -xzf "$archive" -C "$target"
            ;;
        *)
            echo "${YELLOW}Unknown archive type for $archive${RESET}"
            return 1
            ;;
    esac

    sudo find "$target/usr/bin" -type f -exec chmod +x {} + 2>/dev/null || true
    sudo find "$target/usr/lib" -type f -exec chmod 755 {} + 2>/dev/null || true
    sudo find "$target/usr/lib64" -type f -exec chmod 755 {} + 2>/dev/null || true

    return 0
}

download_and_install_pkg() {
    local src_url="$1"
    local target="$CHARD_ROOT"

    echo "${GREEN}[+] Resolving final URL for: $src_url${RESET}"
    local final
    final=$(resolve_final_url "$src_url")
    if [[ -z "$final" ]]; then
        echo "${YELLOW}[!] Could not resolve final URL; trying to download original URL directly${RESET}"
        final="$src_url"
    fi
    echo "${RED}==> Mirror:${RESET}${YELLOW} $final ${RESET}"

    local filename
    filename=$(basename "${final%%\?*}")
    local tmpfile="/tmp/$filename"

    echo "${GREEN}[+] Downloading: $final -> $tmpfile${RESET}"
    if command -v curl >/dev/null 2>&1; then
        curl -L --fail --silent --show-error --output "$tmpfile" "$final" || true
    fi
    if [[ ! -s "$tmpfile" && $(command -v wget >/dev/null 2>&1) ]]; then
        wget --no-check-certificate -O "$tmpfile" "$final" || true
    fi

    if [[ ! -s "$tmpfile" ]]; then
        echo "${RED}[!] Failed to download $final${RESET}"
        return 1
    fi

    if head -c 256 "$tmpfile" | grep -qiE '<html|<!doctype|<head'; then
        echo "${RED}[!] Download appears to be HTML, not a package. URL: $final${RESET}"
        rm -f "$tmpfile"
        return 1
    fi

    if ! extract_to_target "$tmpfile" "$target"; then
        echo "${RED}[!] Extraction failed for $tmpfile${RESET}"
        rm -f "$tmpfile"
        return 1
    fi

    rm -f "$tmpfile"
    echo "${GREEN}[+] Installed package from $final into $target${RESET}"
    return 0
}


ARCH="$(uname -m)"
echo "${YELLOW}[+] Detected arch: ${ARCH}${RESET}"

if [[ "$ARCH" == "x86_64" ]]; then
    echo "${GREEN}[+] Installing bootstrap make binary...${RESET}"
    sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_x86_64 -o /usr/local/make
    sudo chmod +x /usr/local/make

    PACKS=(
        "https://archlinux.org/packages/core/x86_64/gcc/download"
        "https://archlinux.org/packages/core/x86_64/binutils/download"
        "https://archlinux.org/packages/core/x86_64/gcc-libs/download"
        "https://archlinux.org/packages/core/x86_64/libmpc/download"
        "https://archlinux.org/packages/core/x86_64/libisl/download"
        "https://archlinux.org/packages/extra/x86_64/fastfetch/download"
        "https://archlinux.org/packages/extra/x86_64/yyjson/download"
        "https://archlinux.org/packages/core/x86_64/nano/download"
        "https://archlinux.org/packages/core/x86_64/m4/download"
        "https://archlinux.org/packages/core/any/autoconf/download"
        "https://archlinux.org/packages/core/any/automake/download"
        "https://archlinux.org/packages/core/x86_64/ncurses/download"
        "https://archlinux.org/packages/core/x86_64/libtool/download"
        "https://archlinux.org/packages/core/x86_64/pkgconf/download"
        "https://archlinux.org/packages/core/x86_64/gettext/download"
        "https://archlinux.org/packages/core/x86_64/expat/download"
        "https://archlinux.org/packages/core/x86_64/libxcrypt/download"
        "https://archlinux.org/packages/core/x86_64/gdbm/download"
        "https://archlinux.org/packages/core/x86_64/db5.3/download"
        "https://archlinux.org/packages/core/x86_64/perl/download"
        "https://archlinux.org/packages/extra/any/perl-local-lib/download"
        "https://archlinux.org/packages/core/x86_64/linux-headers/download"
        "https://archlinux.org/packages/extra/x86_64/pahole/download"
        "https://archlinux.org/packages/core/x86_64/bison/download"
        "https://archlinux.org/packages/core/x86_64/gawk/download"
        "https://archlinux.org/packages/core/x86_64/jansson/download"
        "https://archlinux.org/packages/core/x86_64/libseccomp/download"
        "https://archlinux.org/packages/core/x86_64/file/download"
        "https://archlinux.org/packages/extra/x86_64/zlib-ng/download"
        "https://archlinux.org/packages/core/x86_64/pcre2/download"
        "https://archlinux.org/packages/core/x86_64/libnsl/download"
        "https://archlinux.org/packages/core/x86_64/libtirpc/download"
        "https://archlinux.org/packages/core/x86_64/libcap-ng/download"
        "https://archlinux.org/packages/extra/x86_64/lmdb/download"
        "https://archlinux.org/packages/core/x86_64/libsasl/download"
        "https://archlinux.org/packages/core/x86_64/libldap/download"
        "https://archlinux.org/packages/core/x86_64/krb5/download"
        "https://archlinux.org/packages/core/x86_64/keyutils/download"
        "https://archlinux.org/packages/core/x86_64/audit/download"
        "https://archlinux.org/packages/extra/x86_64/git/download"
        "https://archlinux.org/packages/core/x86_64/acl/download"
        "https://archlinux.org/packages/core/x86_64/shadow/download"
        "https://archlinux.org/packages/extra/any/perl-timedate/download"
        "https://archlinux.org/packages/extra/x86_64/flatpak/download"
        "https://archlinux.org/packages/extra/x86_64/ostree/download"
        "https://archlinux.org/packages/extra/x86_64/appstream/download"
        "https://archlinux.org/packages/extra/x86_64/libstemmer/download"
        "https://archlinux.org/packages/extra/x86_64/cairo/download"
        "https://archlinux.org/packages/extra/x86_64/bubblewrap/download"
        "https://archlinux.org/packages/extra/x86_64/json-glib/download"
        "https://archlinux.org/packages/core/x86_64/python/download"
        "https://archlinux.org/packages/extra/x86_64/python-gobject/download"
    )
elif [[ "$ARCH" == "aarch64" ]] || [[ "$ARCH" == "arm64" ]]; then
    echo "${GREEN}[+] Installing bootstrap make binary...${RESET}"
    sudo curl -fsSL https://github.com/shadowed1/Chard/raw/refs/heads/main/make_ARM64 -o /usr/local/make
    sudo chmod +x /usr/local/make
    sudo ln -sf /usr/local/make "$CHARD_ROOT/usr/bin/make"


    PACKS=(
        "http://mirror.archlinuxarm.org/aarch64/core/gcc-14.2.1+r753+g1cd744a6828f-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/gcc-libs-14.2.1+r753+g1cd744a6828f-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/mpfr-4.2.2-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/binutils-2.44-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libmpc-1.3.1-2-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libisl-0.27-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/fastfetch-2.51.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/yyjson-0.12.0-1-aarch64.pkg.tar.xz"
        "https://archlinux.org/packages/core/any/autoconf/download"
        "https://archlinux.org/packages/core/any/automake/download"
        "http://mirror.archlinuxarm.org/aarch64/core/pkgconf-2.5.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/expat-2.7.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/perl-local-lib-2.000029-5-any.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/db5.3-5.3.28-5-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/gdbm-1.26-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libxcrypt-4.4.38-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/perl-5.42.0-1-aarch64.pkg.tar.xz"
        "https://archlinux.org/packages/extra/any/perl-mailtools/download"
        "https://archlinux.org/packages/extra/any/perl-timedate/download"
        "http://mirror.archlinuxarm.org/aarch64/core/shadow-4.18.0-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/acl-2.3.2-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/git-2.51.0-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/audit-4.0.5-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/keyutils-1.6.3-3-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/krb5-1.21.3-2-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libldap-2.6.10-2-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libsasl-2.1.28-5-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/lmdb-0.9.33-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libcap-ng-0.8.5-3-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libtirpc-1.3.7-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libnsl-2.0.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/pcre2-10.46-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/zlib-ng-2.2.5-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/file-5.46-5-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/libseccomp-2.5.6-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/jansson-2.14.1-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/gawk-5.3.2-1-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/bison-3.8.2-8-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/core/linux-aarch64-headers-6.16.4-3-aarch64.pkg.tar.xz"
        "http://mirror.archlinuxarm.org/aarch64/extra/flatpak-1:1.16.1-1.1-aarch64.pkg.tar.xz"
    )
else
    echo "${RED}Unsupported architecture: $ARCH${RESET}"
    exit 1
fi

for p in "${PACKS[@]}"; do
    echo
    echo "${RED}==> Processing:${RESET}${YELLOW} $p${RESET}"
    download_and_install_pkg "$p" || {
        echo "${YELLOW}[!] Warning: failed to download/install package: $p - continuing${RESET}"
    }
done

echo "${YELLOW}[+] Fixing ownership to chronos:chronos (uid 1000) for $CHARD_ROOT${RESET}"
sudo chown -R 1000:1000 "$CHARD_ROOT" || true

source /home/chronos/user/.bashrc
#export CHARD_ROOT="/usr/local/chard"
#export INSTALL_PREFIX="$CHARD_ROOT/usr"
#export SRC_DIR="$CHARD_ROOT/var/tmp/glibc-src"
#export BUILD_DIR="$CHARD_ROOT/var/tmp/glibc-build"
#GLIBC_VERSION="2.40"

#mkdir -p "$SRC_DIR" "$BUILD_DIR"
#cd "$SRC_DIR"

#echo "[+] Downloading glibc $GLIBC_VERSION..."
#curl -fL --progress-bar -O "https://ftp.gnu.org/gnu/libc/glibc-$GLIBC_VERSION.tar.gz"

#echo "[+] Extracting glibc..."
#tar -xzf "glibc-$GLIBC_VERSION.tar.gz" --strip-components=1

#echo "[+] Creating build directory..."
#cd "$BUILD_DIR"

#echo "[+] Configuring glibc..."
#"$SRC_DIR/configure" \
#    --prefix="$INSTALL_PREFIX" \
#    --host=aarch64-unknown-linux-gnu \
#    --build=$(gcc -dumpmachine) \
#    --with-headers="$INSTALL_PREFIX/include" \
#    --disable-mathvec \
#    2>&1 | tee configure.log

#echo "[+] Building glibc..."
#make -j"$(nproc)" V=1 2>&1 | tee build.log

#echo "[+] Installing glibc..."
#make install 2>&1 | tee install.log

#echo "[+] glibc installed to $INSTALL_PREFIX"

echo "${GREEN}[+] Done. Chard root at: $CHARD_ROOT${RESET}"
