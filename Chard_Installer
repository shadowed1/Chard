#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/bin/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"
RECOVERY_DIR="$CHARD_ROOT/var/tmp/recovery"
MOUNT_DIR="$RECOVERY_DIR/mount"

echo "[+] Creating Chard directories..."
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp,bin}
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
sudo mkdir -p "$BUILD_DIR" "$RECOVERY_DIR" "$MOUNT_DIR"

echo "[+] Downloading Chard configuration files..."
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"

sudo dev_install 2>/dev/null || true

cd /usr/local
sudo curl -LO https://files.pythonhosted.org/packages/8e/7c/6c56e0f58c1b2a8f3e3f04e2c98f2f8a1b1234c7f623d8f1a5b1f0e0b91c/protobuf-4.24.1-py3-none-any.whl
python3 -m ensurepip --default-pip
sudo python3 -m pip install /usr/local/protobuf-4.24.1-py3-none-any.whl
/usr/lib/python-exec/python3.11/python3 -m pip install --upgrade pip
python3 -m pip install --user protobuf

sudo chown -R 1000:1000 "$CHARD_ROOT"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "[+] Chard sourced to ~/.bashrc"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

# ------------------------------
# Download correct ChromeOS recovery
# ------------------------------
ARCH=$(uname -m)
RECOVERY_DIR="$HOME/Downloads"

mkdir -p "$RECOVERY_DIR"

if [[ "$ARCH" == "x86_64" ]]; then
    BIN_URL="https://dl.google.com/chromeos/samus/13816.82.0/stable-channel/chromeos_13816.82.0_samus_stable-channel_full_mp-v3.bin-gyydszjugq3wj4x2vmoatz2fonnr7g3y.signed"
    BIN_PATH="$RECOVERY_DIR/$(basename "$BIN_URL")"
else
    BIN_URL="https://dl.google.com/chromeos/kevin/14526.89.0/stable-channel/chromeos_14526.89.0_kevin_stable-channel_full_mp.bin-gyzdkn3dmqztq6qtgusvmfckvfocpax7.signed"
    BIN_PATH="$RECOVERY_DIR/$(basename "$BIN_URL")"
fi

echo "[+] Downloading recovery image for $ARCH..."
curl -L -o "$BIN_PATH" "$BIN_URL"


EXTRACTOR_DIR="/usr/local/extract_android_ota_payload"
EXTRACT_DIR="$EXTRACTOR_DIR/extracted"


sudo mkdir -p "$EXTRACTOR_DIR"
sudo chown 1000:1000 "$EXTRACTOR_DIR"
mkdir -p "$EXTRACT_DIR"

OTA_ZIP="$EXTRACTOR_DIR/extract_android_ota_payload.zip"
curl -L -o "$OTA_ZIP" https://github.com/cyxx/extract_android_ota_payload/archive/refs/heads/master.zip
bsdtar -xf "$OTA_ZIP" -C "$EXTRACTOR_DIR"
EXTRACTOR="$EXTRACTOR_DIR/extract_android_ota_payload-master/extract_android_ota_payload.py"

cp "$BIN_PATH" "$EXTRACTOR_DIR/update.signed"
ZIP_PATH="$EXTRACTOR_DIR/update.signed"

mkdir -p "$EXTRACT_DIR"
python3 "$EXTRACTOR" "$ZIP_PATH" "$EXTRACT_DIR" || echo "${YELLOW}[!] Warning: extractor returned non-zero exit code, continuing...${RESET}"

ROOT_IMG=$(find "$EXTRACT_DIR" -name "root.img" | head -n1)
if [ -z "$ROOT_IMG" ]; then
    echo "${RED}Failed to extract root.img${RESET}"
    exit 1
fi
echo "[+] root.img found at $ROOT_IMG"

mkdir -p "$MOUNT_DIR"
sudo mount -o ro "$ROOT_IMG" "$MOUNT_DIR"

echo "[+] Copying system files into Chard root..."
rsync -aH --info=progress2 \
  --exclude=dev \
  --exclude=proc \
  --exclude=sys \
  --exclude=run \
  --exclude=tmp \
  --exclude=mnt \
  --exclude=boot \
  --exclude=var \
  --exclude=home \
  --exclude=opt \
  --exclude=usr/share \
  --exclude=usr/local \
  --exclude=sbin \
  "$MOUNT_DIR"/bin \
  "$MOUNT_DIR"/etc \
  "$MOUNT_DIR"/lib \
  "$MOUNT_DIR"/lib64 \
  "$MOUNT_DIR"/usr \
  "$CHARD_ROOT"/

sudo umount "$MOUNT_DIR"
sudo rm -rf "$RECOVERY_DIR"

case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64) GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF
echo "[+] make.conf created with ARCH=${GENTOO_ARCH}"

export AWK=/usr/bin/mawk
echo "[+] Downloading and installing GNU Make for $ARCH..."

if [[ "$ARCH" == "x86_64" ]]; then
    MAKE_URL="https://archlinux.org/packages/core/x86_64/make/download"
    MAKE_ARCHIVE="$CHARD_ROOT/var/tmp/make.pkg.tar.zst"
elif [[ "$ARCH" == "aarch64" ]]; then
    MAKE_URL="http://mirror.archlinuxarm.org/aarch64/core/make-4.4.1-2-aarch64.pkg.tar.xz"
    MAKE_ARCHIVE="$CHARD_ROOT/var/tmp/make.pkg.tar.xz"
else
    echo "${RED}[!] Unknown architecture: $ARCH${RESET}"
    exit 1
fi

curl -L -o "$MAKE_ARCHIVE" "$MAKE_URL"

mkdir -p "$CHARD_ROOT/opt/make"
case "$MAKE_ARCHIVE" in
    *.zst) 
        zstd -d --stdout "$MAKE_ARCHIVE" | bsdtar -x -C "$CHARD_ROOT/opt/make"
        ;;
    *.xz)
        bsdtar -xf "$MAKE_ARCHIVE" -C "$CHARD_ROOT/opt/make"
        ;;
    *) 
        echo "${RED}[!] Unsupported archive format${RESET}"
        exit 1
        ;;
esac

MAKE_BIN=$(find "$CHARD_ROOT/opt/make" -type f -name make | head -n1)
if [[ -n "$MAKE_BIN" ]]; then
    ln -sf "$MAKE_BIN" "$CHARD_ROOT/usr/bin/make"
    chmod +x "$MAKE_BIN"
    echo "[+] GNU Make installed at $MAKE_BIN and symlinked to $CHARD_ROOT/usr/bin/make"
else
    echo "${RED}[!] Failed to locate make binary in archive${RESET}"
fi

rm -f "$MAKE_ARCHIVE"

echo "[+] Chard root environment ready!"
