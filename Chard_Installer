#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

set -e

CHARD_ROOT="/usr/local/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Creating Chard Root...${GENTOO_ARCH}"

sudo groupadd -f chard
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp}
sudo chown -R root:chard "$CHARD_ROOT"
sudo chmod -R 2775 "$CHARD_ROOT"
sudo usermod -aG chard "$USER"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Downloading chard configuration files..."
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic"
if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "$HOME/.bashrc"; then
    cat >> "$HOME/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Chard sourced to ~/.bashrc${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc${RESET}"
fi

CHARD_PATH="$CHARD_ROOT/usr/bin:$CHARD_ROOT/bin"
CHARD_LD="$CHARD_ROOT/usr/lib:$CHARD_ROOT/usr/lib64:$CHARD_ROOT/lib"

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)   GENTOO_ARCH="amd64" ;;
    i*86)     GENTOO_ARCH="x86" ;;
    aarch64)  GENTOO_ARCH="arm64" ;;
    armv7l)   GENTOO_ARCH="arm" ;;
    ppc64le)  GENTOO_ARCH="ppc64le" ;;
    *) echo "${RESET}${RED}Unknown architecture: $ARCH ${RESET}"; exit 1 ;;
esac

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Writing $MAKE_CONF..."
sudo bash -c "cat > '$MAKE_CONF' <<EOF
CHOST='${GENTOO_ARCH}-unknown-linux-gnu'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] make.conf created with ARCH=${GENTOO_ARCH}"

PORTAGE_DIR="$CHARD_ROOT/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="$CHARD_ROOT/var/tmp/portage-latest.tar.xz"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Downloading Portage tree snapshot..."
sudo curl -L -o "$TMP_TAR" "$SNAPSHOT_URL"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Extracting snapshot into $PORTAGE_DIR..."
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1
sudo rm -f "$TMP_TAR"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Bootstrapping Gentoo stage3..."
case "$GENTOO_ARCH" in
    amd64) AUTOBUILD_DIR="current-stage3-amd64-systemd" ;;
    x86)   AUTOBUILD_DIR="current-stage3-x86-systemd" ;;
    arm64) AUTOBUILD_DIR="current-stage3-arm64-systemd" ;;
    *) echo "${RED}Unsupported architecture: $GENTOO_ARCH${RESET}"; exit 1 ;;
esac

BASE="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/$AUTOBUILD_DIR/"
STAGE3_FILE=$(curl -fsSL "$BASE" \
    | tr -d '\r' \
    | grep -o "stage3-$GENTOO_ARCH-systemd-[0-9]\+T[0-9]\+Z\.tar\.xz" \
    | sort \
    | tail -n1)

if [ -z "$STAGE3_FILE" ]; then
    echo "${RED}ERROR: Could not determine stage3 tarball filename${RESET}"
    exit 1
fi

TMP_STAGE3="$CHARD_ROOT/var/tmp/$STAGE3_FILE"
echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Downloading stage3 tarball..."
sudo curl -L -o "$TMP_STAGE3" "$BASE/$STAGE3_FILE"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Extracting stage3 into $CHARD_ROOT..."
sudo tar -xJf "$TMP_STAGE3" -C "$CHARD_ROOT" --strip-components=1
sudo rm -f "$TMP_STAGE3"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Setting default profile symlink..."
PROFILE_BASE="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH"
PROFILE_CANDIDATE=$(find "$PROFILE_BASE" -maxdepth 3 -type d -name "systemd" | sort | tail -n1)

if [ -n "$PROFILE_CANDIDATE" ]; then
    REL_TARGET=$(realpath --relative-to="$CHARD_ROOT/etc/portage" "$PROFILE_CANDIDATE")
    sudo ln -sfn "$REL_TARGET" "$CHARD_ROOT/etc/portage/make.profile"
    echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Profile set to ${PROFILE_CANDIDATE#$PROFILE_BASE/}"
else
    echo "${YELLOW}[!] No systemd profile found under $PROFILE_BASE"
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Bootstrapping musl toolchain..."

TOOLCHAIN_DIR="$CHARD_ROOT/usr/toolchain"
sudo mkdir -p "$TOOLCHAIN_DIR"

case "$ARCH" in
    x86_64)
        MUSL_ARCH="x86_64"
        TOOLCHAIN_URL="https://musl.cc/x86_64-linux-musl-native.tgz"
        ;;
    aarch64)
        MUSL_ARCH="aarch64"
        TOOLCHAIN_URL="https://musl.cc/aarch64-linux-musl-native.tgz"
        ;;
    *)
        echo "${RED}No musl toolchain available for $ARCH${RESET}"
        exit 1
        ;;
esac

TOOLCHAIN_TAR="$CHARD_ROOT/var/tmp/$(basename "$TOOLCHAIN_URL")"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Downloading musl toolchain from $TOOLCHAIN_URL..."
MUSL_DIR="$CHARD_ROOT/usr/musl"
sudo mkdir -p "$MUSL_DIR"
sudo curl -L -o "$TOOLCHAIN_TAR" "$TOOLCHAIN_URL"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Extracting toolchain into $MUSL_DIR..."
sudo tar -xzf "$TOOLCHAIN_TAR" -C "$MUSL_DIR" --strip-components=1
sudo rm -f "$TOOLCHAIN_TAR"

export CC="$MUSL_DIR/bin/musl-gcc"
export CXX="$MUSL_DIR/bin/musl-g++"
export AR="$MUSL_DIR/bin/ar"
export LD="$MUSL_DIR/bin/ld"
export RANLIB="$MUSL_DIR/bin/ranlib"
export STRIP="$MUSL_DIR/bin/strip"
export CFLAGS="-O2 -pipe"
export CXXFLAGS="$CFLAGS"

MUSL_DIR="$CHARD_ROOT/usr/musl"

PY_VERSION="3.13.7"
PY_TAR="Python-$PY_VERSION.tgz"
PY_URL="https://www.python.org/ftp/python/$PY_VERSION/$PY_TAR"
BUILD_DIR="$CHARD_ROOT/var/tmp/build-python"

sudo mkdir -p "$BUILD_DIR"
sudo chown "$USER":"$USER" "$BUILD_DIR"
cd "$BUILD_DIR"

echo "[+] Downloading Python $PY_VERSION..."
curl -L -o "$PY_TAR" "$PY_URL"

echo "[+] Extracting Python..."
sudo tar --no-same-owner --no-same-permissions -xzf "$PY_TAR" --strip-components=1

if [ -f "$CHARD_ROOT/.chard.env" ]; then
    source "$CHARD_ROOT/.chard.env"
else
    echo "ERROR: chard env not found at $CHARD_ROOT/.chard.env"
    exit 1
fi

which pkg-config || true
$CHARD_ROOT/usr/bin/pkg-config --version || true
ldd $CHARD_ROOT/usr/bin/pkg-config 2>/dev/null || true
echo "PATH=$PATH"
echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
$CHARD_ROOT/usr/musl/bin/musl-gcc --version || true
$CHARD_ROOT/usr/bin/pkg-config --modversion libffi || true

echo "[+] Configuring Python with musl-native GCC..."
./configure \
    --prefix="$CHARD_ROOT/usr" \
    --enable-optimizations \
    --with-lto \
    --enable-shared

echo "[+] Building Python..."
make -j"$(nproc)"

echo "[+] Installing Python..."
sudo make install

CHARD_PYTHON="$CHARD_ROOT/usr/bin/python3"
echo "[+] Python installed at $CHARD_PYTHON"

BUILD_DIR="$CHARD_ROOT/var/tmp/build-git"
sudo mkdir -p "$BUILD_DIR"
sudo chown "$USER":"$USER" "$BUILD_DIR"
cd "$BUILD_DIR"

GIT_VERSION="2.51.0"
GIT_TAR="git-$GIT_VERSION.tar.gz"
GIT_URL="https://mirrors.edge.kernel.org/pub/software/scm/git/$GIT_TAR"

curl -L -o "$GIT_TAR" "$GIT_URL"
tar --no-same-owner --no-same-permissions -xzf "$GIT_TAR" --strip-components=1

./configure --prefix="$CHARD_ROOT/usr" PYTHON="$CHARD_PYTHON" \
    am_cv_func_iconv=yes \
    am_cv_lib_iconv=yes \
    git_cv_iconv_omits_bom=yes \
    GIT_ICONV=yes \
    ac_cv_func_malloc_0_nonnull=yes \
    ac_cv_func_realloc_0_nonnull=yes \
    ac_cv_func_memcmp_working=yes \
    ac_cv_func_memcpy_working=yes \
    ac_cv_func_memmove_working=yes \
    ac_cv_func_memset_working=yes

make -j"$(nproc)"
sudo make install

cd "$CHARD_ROOT"
rm -rf "$BUILD_DIR"

echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Git $GIT_VERSION installed into $CHARD_ROOT/usr/bin"
echo "${RESET}${GREEN}[${RESET}${RED}+${RESET}${GREEN}] Chard Root Complete."
echo "${RESET}${GREEN}Open a new shell for chard logic to load${RESET}"
