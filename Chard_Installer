#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BOLD=$(tput bold)
RESET=$(tput sgr0)
set -e

CHARD_ROOT="/usr/local/bin/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"

echo "[+] Creating Chard directories..."
sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp}
sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
echo "[+] Downloading chard configuration files..."
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/chard.logic"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "[+] Chard sourced to ~/.bashrc"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64)GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
sudo mkdir -p "$(dirname "$MAKE_CONF")"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF
echo "[+] make.conf created with ARCH=${GENTOO_ARCH}"

PORTAGE_DIR="$CHARD_ROOT/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="$CHARD_ROOT/var/tmp/portage-latest.tar.xz"
echo "[+] Downloading Portage tree snapshot..."
sudo curl -L -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1
sudo rm -f "$TMP_TAR"

case "$GENTOO_ARCH" in
    amd64) STAGE3_URL="https://gentoo.osuosl.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-20250831T170358Z.tar.xz";;
    arm64) STAGE3_URL="https://gentoo.osuosl.org/releases/arm64/autobuilds/current-stage3-arm64-systemd/stage3-arm64-systemd-20250831T234929Z.tar.xz";;
    *) echo "Unsupported architecture: $GENTOO_ARCH"; exit 1;;
esac
STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="$CHARD_ROOT/var/tmp/$STAGE3_FILE"
sudo curl -L -o "$TMP_STAGE3" "$STAGE3_URL"
sudo tar -xJf "$TMP_STAGE3" -C "$CHARD_ROOT" --strip-components=1
sudo rm -f "$TMP_STAGE3"

PROFILE_BASE="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH"
PROFILE_CANDIDATE=$(find "$PROFILE_BASE" -maxdepth 3 -type d -name "systemd" | sort | tail -n1)
if [ -n "$PROFILE_CANDIDATE" ]; then
    REL_TARGET=$(realpath --relative-to="$CHARD_ROOT/etc/portage" "$PROFILE_CANDIDATE")
    sudo ln -sfn "$REL_TARGET" "$CHARD_ROOT/etc/portage/.profile"
    echo "[+] Profile set to ${PROFILE_CANDIDATE#$PROFILE_BASE/}"
else
    echo "${YELLOW}[!] No systemd profile found under $PROFILE_BASE"
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"

GCC_DIR="$CHARD_ROOT/usr/$CHOST/gcc-bin/14"

export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:$CHARD_ROOT/usr/bin"
export CFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L$CHARD_ROOT/usr/lib"
export AWK=/usr/bin/mawk

CHROOT_DIR="$CHARD_ROOT/chroot"
CHROOT_BUILD_DIR="$CHROOT_DIR/var/tmp/build"

sudo mkdir -p "$BUILD_DIR"
sudo mkdir -p "$CHROOT_BUILD_DIR"

echo "[+] Installing GNU Make"

MAKE_VERSION="4.4"
MAKE_TAR="make-$MAKE_VERSION.tar.gz"
MAKE_URL="https://ftp.gnu.org/gnu/make/$MAKE_TAR"

sudo curl -L -o "$BUILD_DIR/$MAKE_TAR" "$MAKE_URL"
sudo tar -xf "$BUILD_DIR/$MAKE_TAR" -C "$BUILD_DIR"
sudo rsync -a "$BUILD_DIR/make-$MAKE_VERSION" "$CHROOT_BUILD_DIR/"
sudo rsync -a --exclude 'chroot' --exclude 'var/tmp/build' "$CHARD_ROOT/" "$CHROOT_DIR/"

mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

sudo chroot "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build/make-$MAKE_VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'
export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

sudo umount -l "$CHROOT_DIR/dev/shm" 2>/dev/null || true
sudo umount -l "$CHROOT_DIR/dev"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/sys"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/proc"    2>/dev/null || true
sudo rm -rf "$CHROOT_BUILD_DIR"

echo "[+] GNU Make built successfully"

echo
echo "[+] Installing GNU GMP"

GMP_VERSION="6.3.0"
GMP_TAR="gmp-$GMP_VERSION.tar.xz"
GMP_URL="https://gmplib.org/download/gmp/$GMP_TAR"

sudo mkdir -p "$BUILD_DIR"
sudo mkdir -p "$CHROOT_BUILD_DIR"

sudo curl -L -o "$BUILD_DIR/$GMP_TAR" "$GMP_URL"
sudo tar -xf "$BUILD_DIR/$GMP_TAR" -C "$BUILD_DIR"
sudo rsync -a "$BUILD_DIR/gmp-$GMP_VERSION" "$CHROOT_BUILD_DIR/"
sudo rsync -a --exclude 'chroot' --exclude 'var/tmp/build' "$CHARD_ROOT/" "$CHROOT_DIR/"

mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

sudo chroot "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build/gmp-$GMP_VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'

export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

sudo umount -l "$CHROOT_DIR/dev/shm" 2>/dev/null || true
sudo umount -l "$CHROOT_DIR/dev"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/sys"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/proc"    2>/dev/null || true
sudo rm -rf "$CHROOT_BUILD_DIR"

echo "[+] GMP $GMP_VERSION built successfully"

echo
echo "[+] Installing MPFR"

MPFR_VERSION="4.2.2"
MPFR_TAR="mpfr-$MPFR_VERSION.tar.xz"
MPFR_URL="https://www.mpfr.org/mpfr-current/$MPFR_TAR"

sudo mkdir -p "$BUILD_DIR"
sudo mkdir -p "$CHROOT_BUILD_DIR"

sudo curl -L -o "$BUILD_DIR/$MPFR_TAR" "$MPFR_URL"
sudo tar -xf "$BUILD_DIR/$MPFR_TAR" -C "$BUILD_DIR"
sudo rsync -a "$BUILD_DIR/mpfr-$MPFR_VERSION" "$CHROOT_BUILD_DIR/"
sudo rsync -a --exclude 'chroot' --exclude 'var/tmp/build' "$CHARD_ROOT/" "$CHROOT_DIR/"

mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

sudo chroot "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build/mpfr-$MPFR_VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'

export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

sudo umount -l "$CHROOT_DIR/dev/shm" 2>/dev/null || true
sudo umount -l "$CHROOT_DIR/dev"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/sys"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/proc"    2>/dev/null || true
sudo rm -rf "$CHROOT_BUILD_DIR"

echo "[+] MPFR $MPFR_VERSION built successfully"
echo
echo "[+] Installing Binutils"

BINUTILS_VERSION="2.45"
BINUTILS_TAR="binutils-$BINUTILS_VERSION.tar.xz"
BINUTILS_URL="https://ftp.gnu.org/gnu/binutils/$BINUTILS_TAR"

sudo mkdir -p "$BUILD_DIR" "$CHROOT_BUILD_DIR"

sudo curl -L -o "$BUILD_DIR/$BINUTILS_TAR" "$BINUTILS_URL"
sudo tar -xf "$BUILD_DIR/$BINUTILS_TAR" -C "$BUILD_DIR"
sudo rsync -a "$BUILD_DIR/binutils-$BINUTILS_VERSION" "$CHROOT_BUILD_DIR/"
sudo rsync -a --exclude 'chroot' --exclude 'var/tmp/build' "$CHARD_ROOT/" "$CHROOT_DIR/"

mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

sudo chroot "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build/binutils-$BINUTILS_VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'

export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

sudo umount -l "$CHROOT_DIR/dev/shm" 2>/dev/null || true
sudo umount -l "$CHROOT_DIR/dev"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/sys"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/proc"    2>/dev/null || true
sudo rm -rf "$CHROOT_BUILD_DIR"

echo "[+] Binutils $BINUTILS_VERSION built successfully"

echo
echo "[+] Installing Diffutils"

DIFFUTILS_VERSION="3.12"
DIFFUTILS_TAR="diffutils-$DIFFUTILS_VERSION.tar.xz"
DIFFUTILS_URL="https://ftp.gnu.org/gnu/diffutils/$DIFFUTILS_TAR"

sudo mkdir -p "$BUILD_DIR" "$CHROOT_BUILD_DIR"

sudo curl -L -o "$BUILD_DIR/$DIFFUTILS_TAR" "$DIFFUTILS_URL"
sudo tar -xf "$BUILD_DIR/$DIFFUTILS_TAR" -C "$BUILD_DIR"
sudo rsync -a "$BUILD_DIR/diffutils-$DIFFUTILS_VERSION" "$CHROOT_BUILD_DIR/"
sudo rsync -a --exclude 'chroot' --exclude 'var/tmp/build' "$CHARD_ROOT/" "$CHROOT_DIR/"

mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

sudo chroot "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build/diffutils-$DIFFUTILS_VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'

export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

sudo umount -l "$CHROOT_DIR/dev/shm" 2>/dev/null || true
sudo umount -l "$CHROOT_DIR/dev"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/sys"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/proc"    2>/dev/null || true
sudo rm -rf "$CHROOT_BUILD_DIR"

echo "[+] Diffutils $DIFFUTILS_VERSION built successfully"

echo
echo "[+] Installing Git"

GIT_VERSION="2.51.0"
GIT_TAR="git-$GIT_VERSION.tar.gz"
GIT_URL="https://mirrors.edge.kernel.org/pub/software/scm/git/$GIT_TAR"

sudo mkdir -p "$BUILD_DIR" "$CHROOT_BUILD_DIR"

sudo curl -L -o "$BUILD_DIR/$GIT_TAR" "$GIT_URL"
sudo tar -xzf "$BUILD_DIR/$GIT_TAR" -C "$BUILD_DIR"
sudo rsync -a "$BUILD_DIR/git-$GIT_VERSION" "$CHROOT_BUILD_DIR/"
sudo rsync -a --exclude 'chroot' --exclude 'var/tmp/build' "$CHARD_ROOT/" "$CHROOT_DIR/"

mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

sudo chroot "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build/git-$GIT_VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'

export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

sudo umount -l "$CHROOT_DIR/dev/shm" 2>/dev/null || true
sudo umount -l "$CHROOT_DIR/dev"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/sys"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/proc"    2>/dev/null || true
sudo rm -rf "$CHROOT_BUILD_DIR"

echo "[+] Git $GIT_VERSION built successfully"

echo
echo "[+] Installing Python"

PYTHON_VERSION="3.13.7"
PYTHON_TAR="Python-$PYTHON_VERSION.tar.xz"
PYTHON_URL="https://www.python.org/ftp/python/$PYTHON_VERSION/$PYTHON_TAR"

sudo mkdir -p "$BUILD_DIR" "$CHROOT_BUILD_DIR"

sudo curl -L -o "$BUILD_DIR/$PYTHON_TAR" "$PYTHON_URL"
sudo tar -xf "$BUILD_DIR/$PYTHON_TAR" -C "$BUILD_DIR"
sudo rsync -a "$BUILD_DIR/Python-$PYTHON_VERSION" "$CHROOT_BUILD_DIR/"
sudo rsync -a --exclude 'chroot' --exclude 'var/tmp/build' "$CHARD_ROOT/" "$CHROOT_DIR/"

mountpoint -q "$CHROOT_DIR/proc"    || sudo mount -t proc proc "$CHROOT_DIR/proc"
mountpoint -q "$CHROOT_DIR/sys"     || sudo mount -t sysfs sys "$CHROOT_DIR/sys"
mountpoint -q "$CHROOT_DIR/dev"     || sudo mount --bind /dev "$CHROOT_DIR/dev"
mountpoint -q "$CHROOT_DIR/dev/shm" || sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"

sudo chroot "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build/Python-$PYTHON_VERSION

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'

export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin

./configure --prefix=/usr --disable-dependency-tracking
make -j\$(nproc)
make install
"

sudo umount -l "$CHROOT_DIR/dev/shm" 2>/dev/null || true
sudo umount -l "$CHROOT_DIR/dev"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/sys"     2>/dev/null || true
sudo umount -l "$CHROOT_DIR/proc"    2>/dev/null || true
sudo rm -rf "$CHROOT_BUILD_DIR"

echo "[+] Python $PYTHON_VERSION built successfully"

sudo chown -R 1000:1000 \
    "$CHARD_ROOT/bin" \
    "$CHARD_ROOT/lib" \
    "$CHARD_ROOT/include" \
    "$CHARD_ROOT/share" \
    "$CHARD_ROOT/lib/python$PYTHON_VERSION" \
    "$CHARD_ROOT/var/tmp" \
    "$CHARD_ROOT/var/cache"

echo "[+] Chard Root Environment ready to run!"

chard help


