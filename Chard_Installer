#!/bin/bash
START_TIME=$(date +%s)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

MAX_RETRIES=10
RETRY_DELAY=30

format_time() {
    local total_seconds=$1
    local hours=$((total_seconds / 3600))
    local minutes=$(((total_seconds % 3600) / 60))
    local seconds=$((total_seconds % 60))
    
    if [ $hours -gt 0 ]; then
        printf "%dh %dm %ds" $hours $minutes $seconds
    elif [ $minutes -gt 0 ]; then
        printf "%dm %ds" $minutes $seconds
    else
        printf "%ds" $seconds
    fi
}

show_progress() {
    local current_time=$(date +%s)
    local elapsed=$((current_time - START_TIME))
    local formatted_time=$(format_time $elapsed)
    echo "${CYAN}[Runtime: $formatted_time]${RESET} $1"
}

CHARD_ROOT="/usr/local/chard"
CHARD_RC="/usr/local/chard/.chardrc"
BUILD_DIR="/usr/local/chard/var/tmp/build"
LOG_FILE=/usr/local/chard/chardbuild.log
echo "${RESET}${GREEN}"
echo
echo
echo
echo
echo
echo
echo "                                                             AA"
echo "                                                            A${RESET}${RED}::${RESET}${GREEN}A"
echo "        CCCCCCCCCCCCCHHHHHHHHH     HHHHHHHHH               A${RESET}${RED}::::${RESET}${GREEN}A               RRRRRRRRRRRRRRRRR   DDDDDDDDDDDDD" 
echo "     CCC${RESET}${YELLOW}::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H              A${RESET}${RED}::::::${RESET}${GREEN}A              R${RESET}${YELLOW}::::::::::::::::${RESET}${GREEN}R  D${RESET}${YELLOW}::::::::::::${RESET}${GREEN}DDD"  
echo "   CC${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H             A${RESET}${RED}::::::::${RESET}${GREEN}A             R${RESET}${YELLOW}::::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R D${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}DD"  
echo "  C${RESET}${YELLOW}:::::${RESET}${GREEN}CCCCCCCC${RESET}${YELLOW}::::${RESET}${GREEN}CHH${RESET}${YELLOW}::::::${RESET}${GREEN}H     H${RESET}${YELLOW}::::::${RESET}${GREEN}HH            A${RESET}${RED}::::::::::${RESET}${GREEN}A            RR${RESET}${YELLOW}:::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RDDD${RESET}${YELLOW}:::::${RESET}${GREEN}DDDDD${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo " C${RESET}${YELLOW}:::::${RESET}${GREEN}C       CCCCCC  H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H             A${RESET}${RED}::::::::::::${RESET}${GREEN}A             R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H            A${RESET}${RED}::::::::::::::${RESET}${GREEN}A            R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}::::::${RESET}${GREEN}HHHHH${RESET}${YELLOW}::::::${RESET}${GREEN}H           A${RESET}${RED}::            ::${RESET}${GREEN}A           R${RESET}${YELLOW}::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R   D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::::::::::::::${RESET}${GREEN}H          A${RESET}${RED}:::            :::${RESET}${GREEN}A          R${RESET}${YELLOW}:::::::::::::${RESET}${GREEN}RR    D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::::::::::::::${RESET}${GREEN}H         A${RESET}${RED}::::            ::::${RESET}${GREEN}A         R${RESET}${YELLOW}::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R   D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"    
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}::::::${RESET}${GREEN}HHHHH${RESET}${YELLOW}::::::${RESET}${GREEN}H        A${RESET}${RED}:::::            :::::${RESET}${GREEN}A        R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"    
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H       A${RESET}${RED}::::::            ::::::${RESET}${GREEN}A       R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"   
echo " C${RESET}${YELLOW}:::::${RESET}${GREEN}C       CCCCCC  H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H      A${RESET}${RED}:::::                :::::${RESET}${GREEN}A      R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "  C${RESET}${YELLOW}:::::${RESET}${GREEN}CCCCCCCC${RESET}${YELLOW}::::${RESET}${GREEN}CHH${RESET}${YELLOW}::::::${RESET}${GREEN}H     H${RESET}${YELLOW}::::::${RESET}${GREEN}HH   A${RESET}${RED}:::::::::          :::::::::${RESET}${GREEN}A   RR${RESET}${YELLOW}:::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RDDD${RESET}${YELLOW}:::::${RESET}${GREEN}DDDDD${RESET}${YELLOW}:::::${RESET}${GREEN}D" 
echo "   CC${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H  A${RESET}${RED}:::::::::            :::::::::${RESET}${GREEN}A  R${RESET}${YELLOW}::::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RD${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}DD"  
echo "     CCC${RESET}${YELLOW}::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H A${RESET}${RED}::::::::                ::::::::${RESET}${GREEN}A R${RESET}${YELLOW}::::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RD${RESET}${YELLOW}::::::::::::${RESET}${GREEN}DDD"  
echo "        CCCCCCCCCCCCCHHHHHHHHH     HHHHHHHHHA${BOLD}======                      ======${RESET}${GREEN}ARRRRRRRR     RRRRRRRDDDDDDDDDDDDD"   
echo "                                           ${BOLD}A====                            ====A"
echo "                                          A====                              ====A"
echo "${RESET}"

               
echo "${RESET}"
echo "${RED}- Chard Installer can take ${BOLD}5-20 minutes${RESET}${RED} depending on your CPU and storage speed. Requires ~8 GB of space. Supports ${BOLD}x86_64${RESET}${RED} and ${BOLD}ARM64${RESET}${RED}! ${RESET}"
echo "${YELLOW}- Chard will be installed in ${RESET}${YELLOW}${BOLD}${CHARD_ROOT}${RESET}${YELLOW} and will not affect ChromeOS or system commands.${RESET}"
echo "${GREEN}- It is ${BOLD}semi-sandboxed within itself${RESET}${GREEN}, but can rely on Host libraries. Automatically updates itself build and compile with.${RESET}"
echo "${CYAN}- Chard has ${BOLD}not${RESET}${CYAN} been tested with Brunch Toolchain or Chromebrew - this project uses a different implementation. It does ${BOLD}NOT${RESET}${CYAN} require dev_install.${RESET}"
echo "${BLUE}- Does not require altering current state of /usr/local/ during Install and Uninstall.${RESET}"
echo "${MAGENTA}- Chard is current in early development. ${BOLD}Bugs will exist${RESET}${MAGENTA}, so please have a ${BOLD}USB backup${RESET}${MAGENTA} in case of serious mistakes.${RESET}"
echo
echo
   read -rp "${GREEN}${BOLD}Install Chard? (Y/n): ${RESET}" response
response=${response:-Y}

case "$response" in
    y|Y|yes|YES|Yes)
        echo
        echo "${GREEN}[CONTINUE]${RESET}"
        echo
        ;;
    *)
        echo "${RED}[EXIT]${RESET}"
        exit 1
        ;;
esac
    unset LD_PRELOAD
    echo "${RED}Chard Installs to /usr/local/chard${RESET}${YELLOW} - Install will eventually chroot into chard. ${BOLD}This means / will be /usr/local/chard/ in reality.${RESET}"
    echo
    echo "${GREEN}[+] Creating ${RESET}${RED}Chard Root${RESET}"

    echo "${RESET}${MAGENTA}[*] Unmounting active bind mounts in case of reinstall...${RESET}"
            sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
            sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
            sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
    
            echo "${BLUE}[*] Removing $CHARD_ROOT in case of reinstall...${RESET}"
            sudo rm -rf "$CHARD_ROOT"
    
            sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc 2>/dev/null || true

sudo mkdir -p "$CHARD_ROOT"/etc/portage \
                 "$CHARD_ROOT"/etc/sandbox.d \
                 "$CHARD_ROOT"/etc/ssl \
                 "$CHARD_ROOT"/usr/bin \
                 "$CHARD_ROOT"/usr/lib \
                 "$CHARD_ROOT"/usr/lib64 \
                 "$CHARD_ROOT"/usr/include \
                 "$CHARD_ROOT"/usr/share \
                 "$CHARD_ROOT"/usr/local/bin \
                 "$CHARD_ROOT"/usr/local/lib \
                 "$CHARD_ROOT"/usr/local/include \
                 "$CHARD_ROOT"/var/tmp/build \
                 "$CHARD_ROOT"/var/cache/distfiles \
                 "$CHARD_ROOT"/var/cache/packages \
                 "$CHARD_ROOT"/var/log \
                 "$CHARD_ROOT"/var/run \
                 "$CHARD_ROOT"/dev/shm \
                 "$CHARD_ROOT"/dev/pts \
                 "$CHARD_ROOT"/proc \
                 "$CHARD_ROOT"/sys \
                 "$CHARD_ROOT"/tmp \
                 "$CHARD_ROOT"/run \
                 "$CHARD_ROOT"/home/chronos/user/.cargo \
                 "$CHARD_ROOT"/home/chronos/user/.rustup \
                 "$CHARD_ROOT"/home/chronos/user/.local/share \
                 "$CHARD_ROOT"/home/chronos/user/Desktop \
                 "$CHARD_ROOT"/mnt

sudo mkdir -p /usr/local/chard/usr/local/src/gtest-1.16.0
sudo mkdir -p "$(dirname "$LOG_FILE")"
sudo mkdir -p /usr/local/chard/etc/portage/repos.conf"
sudo mkdir -p /usr/local/chard/var/db/repos/gentoo/profiles"
sudo mkdir -p "/usr/local/chard/etc/portage/make.profile"
sudo mkdir -p /usr/local/chard/run/user/0
sudo chmod 700 /usr/local/chard/run/user/0
exec > >(sudo tee -a "$LOG_FILE") 2>&1

sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
echo "${YELLOW}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "/usr/local/chard/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "/usr/local/chard/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "/usr/local/chard/.chard.logic"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.bashrc -o "/usr/local/chard/home/chronos/user/.bashrc"


if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[+] Chard sourced to ~/.bashrc ${RESET}${YELLOW}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi


sudo mkdir -p /usr/local/chard/etc/portage/package.use

sudo tee /usr/local/chard/etc/portage/package.use/systemd-overrides <<EOF
sys-auth/elogind -systemd
media-video/pipewire -elogind
media-video/wireplumber -elogind
sys-auth/polkit -elogind
sys-apps/dbus -elogind
dev-python/pillow -truetype
EOF

sudo tee /usr/local/chard/etc/portage/package.use/flatpak-systemd > /dev/null <<'EOF'
sys-auth/elogind -systemd
media-video/pipewire -elogind
media-video/wireplumber -elogind
sys-auth/polkit -elogind
sys-apps/dbus -elogind
sys-libs/pam -elogind systemd
sys-apps/shadow -elogind systemd
sys-apps/util-linux -elogind systemd
dev-python/pillow -truetype
EOF

echo "dev-build/cmake -gui" | sudo tee -a /usr/local/chard/etc/portage/package.use/cmake-fix
echo "sys-auth/polkit systemd -elogind" | sudo tee -a /usr/local/chard/etc/portage/package.use/polkit


ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH" ;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        GENTOO_ARCH="amd64"
        CHOST="x86_64-pc-linux-gnu"
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    aarch64|arm64)
        GENTOO_ARCH="arm64"
        CHOST="aarch64-unknown-linux-gnu"
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    *)
        echo "${RED}[!] Unsupported architecture: $ARCH${RESET}"
        exit 1
        ;;
esac

sudo mkdir -p "/usr/local/chard/var/tmp"
PORTAGE_DIR="/usr/local/chard/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="/usr/local/chard/var/tmp/portage-latest.tar.xz"
echo "${CYAN}[+] Downloading Portage tree snapshot"
sudo curl -L --progress-bar -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
sudo rm -f "$TMP_TAR"

STAGE3_TXT="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/current-stage3-$GENTOO_ARCH-systemd/latest-stage3-$GENTOO_ARCH-systemd.txt"

STAGE3_FILENAME=$(curl -fsSL "$STAGE3_TXT" | grep -Eo 'stage3-.*\.tar\.xz' | head -n1)
STAGE3_URL=$(dirname "$STAGE3_TXT")"/$STAGE3_FILENAME"

STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="/usr/local/chard/var/tmp/$STAGE3_FILE"

echo "${RESET}${BLUE}[+] Downloading latest Stage3 tarball: $STAGE3_FILENAME"
sudo curl -L --progress-bar -o "$TMP_STAGE3" "$STAGE3_URL"

echo "${RESET}${BLUE}[+] Extracting Stage3 tarball"
sudo tar -xJf "$TMP_STAGE3" -C "/usr/local/chard" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"

sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="/usr/local/chard/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="/usr/local/chard/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "/usr/local/chard/bin/chard"
sudo chmod +x "/usr/local/chard/bin/chard"

export PYTHON="/usr/local/chard/bin/python3"
export CC="/usr/local/chard/usr/bin/gcc"
export CXX="/usr/local/chard/usr/bin/g++"
export AR="/usr/local/chard/usr/bin/gcc-ar"
export RANLIB="/usr/local/chard/usr/bin/gcc-ranlib"
export PATH="$PATH:/usr/local/chard/usr/bin"
export CXXFLAGS="$CFLAGS"
export AWK=/usr/bin/mawk
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/usr/lib64"
export MAKEFLAGS="-j$(nproc)"
export INSTALL_ROOT="/usr/local/chard"
export ACLOCAL_PATH="/usr/local/chard/usr/share/aclocal"
export PYTHONPATH="/usr/local/chard/usr/lib/python3.13/site-packages:$PYTHONPATH"
export PKG_CONFIG_PATH=/usr/local/chard/usr/lib64/pkgconfig:/usr/local/chard/usr/lib/pkgconfig
export CFLAGS="-I/usr/local/chard/usr/include $CFLAGS"
export LDFLAGS="-L/usr/local/chard/usr/lib64 -L/usr/local/chard/usr/lib $LDFLAGS"
export GIT_TEMPLATE_DIR=/usr/local/chard/usr/share/git-core/templates


KERNEL_INDEX=$(curl -fsSL https://cdn.kernel.org/pub/linux/kernel/v6.x/ \
    | grep -o 'href="linux-[0-9]\+\.[0-9]\+\.[0-9]\+\.tar\.xz"' \
    | sed 's/href="linux-\(.*\)\.tar\.xz"/\1/' )

KERNEL_VER=$(echo "$KERNEL_INDEX" | sort -V | tail -n2 | head -n1)

KERNEL_TAR="linux-$KERNEL_VER.tar.xz"
KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v6.x/$KERNEL_TAR"
KERNEL_BUILD="$BUILD_DIR/linux-$KERNEL_VER"

echo "Fetching kernel version: $KERNEL_VER"
echo "URL: $KERNEL_URL"

sudo mkdir -p "$BUILD_DIR"

if [ ! -f "$BUILD_DIR/$KERNEL_TAR" ]; then
    echo "${RESET}${BLUE}[+] Fetching $KERNEL_TAR..."
    sudo curl -L --progress-bar -o "$BUILD_DIR/$KERNEL_TAR" "$KERNEL_URL"
else
    echo "${RESET}${RED}[!] Kernel tarball already exists, skipping download."
fi


sudo rm -rf "$KERNEL_BUILD"
sudo tar -xf "$BUILD_DIR/$KERNEL_TAR" -C "$BUILD_DIR" \
    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"

echo "${RESET}${BLUE}[+] Installing Linux headers into Chard Root..."
sudo chroot "/usr/local/chard" /bin/bash -c "
cd /var/tmp/build/linux-$KERNEL_VER

HOST_ARCH=\$(uname -m)
case \"\$HOST_ARCH\" in
    x86_64) KERNEL_ARCH=x86_64 ;;
    aarch64) KERNEL_ARCH=arm64 ;;
    *) echo \"Unknown architecture: \$HOST_ARCH\"; exit 1 ;;
esac

make mrproper
make defconfig

rm -rf /usr/src/linux
cp -a . /usr/src/linux

make INSTALL_HDR_PATH=/usr headers_install

cp .config /usr/src/linux/.config
"

echo "${RESET}${CYAN}[+] Linux headers and sources installed to /usr/local/chard/usr/src/linux"
sudo rm -rf "$KERNEL_BUILD"

CONFIG_FILE="/usr/local/chard/usr/src/linux/.config"
OPTIONS=(
    "CONFIG_CGROUP_BPF"
    "CONFIG_FANOTIFY"
    "CONFIG_USER_NS"
    "CONFIG_CRYPTO_USER_API_HASH"
    "CONFIG_INPUT_MOUSEDEV"
)

for opt in "${OPTIONS[@]}"; do
    sudo sed -i -E "s/^# $opt is not set/$opt=y/" "$CONFIG_FILE"
done

for opt in "${OPTIONS[@]}"; do
    if ! sudo grep -q "^$opt=" "$CONFIG_FILE"; then
        echo "$opt=y" | sudo tee -a "$CONFIG_FILE" >/dev/null
    fi
done

sudo grep -E "CONFIG_CGROUP_BPF|CONFIG_FANOTIFY|CONFIG_USER_NS|CONFIG_CRYPTO_USER_API_HASH|CONFIG_INPUT_MOUSEDEV" /usr/local/chard/usr/src/linux/.config | wc -l

sudo mkdir -p /usr/local/chard/tmp/docbook-4.3
cd /usr/local/chard/tmp/docbook-4.3
sudo curl -L --progress-bar -o docbook-xml-4.3.zip https://www.oasis-open.org/docbook/xml/4.3/docbook-xml-4.3.zip
sudo mkdir -p "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo mkdir -p "$CHARD_ROOT/etc/xml"
sudo bsdtar -xf docbook-xml-4.3.zip -C "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo chmod -R 755 "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo touch "$CHARD_ROOT/etc/xml/catalog"


cleanup_chroot() {
    echo "${RED}[+] Cleaning up Chard mounts${RESET}"
    sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
    sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
    sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
    sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
    sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
    sudo cp /usr/local/chard/chardbuild.log /home/chronos/user/MyFiles/Downloads/
}

trap cleanup_chroot EXIT INT TERM

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    ARCHIVE="$NAME-$VERSION.$EXT"

    echo "${RESET}${GREEN}[+] Downloading $URL "

    attempt=1
    while true; do
        sudo curl -L --progress-bar -o "$BUILD_DIR/$ARCHIVE" "$URL" && break

        echo "${RED}[!] Download failed for $NAME-$VERSION (attempt $attempt/$MAX_RETRIES), retrying in $RETRY_DELAY seconds..."
        (( attempt++ ))

        if (( attempt > MAX_RETRIES )); then
            echo "${BOLD}${RED}[!] Failed to download $NAME-$VERSION after $MAX_RETRIES attempts. Aborting.${RESET}"
            exit 1
        fi
        sleep $RETRY_DELAY
    done

    echo "${RESET}${YELLOW}[+] Extracting $NAME-$VERSION"
    case "$EXT" in
        tar.gz|tgz)
            sudo tar -xzf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.xz)
            sudo tar -xJf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.bz2)
            sudo tar -xjf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        zip)
            sudo bsdtar -xf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR"
            ;;
        *)
            echo "Unknown archive format: $EXT"
    esac
done

sudo tee /usr/local/chard/bin/emerge > /dev/null <<'EOF'
#!/bin/python
import os
import sys
import errno

EPYTHON = "/bin/python3"

PYEXEC_DIR = "/usr/lib/python-exec/python3.13"

target_name = os.path.basename(sys.argv[0])
target_path = os.path.join(PYEXEC_DIR, target_name)

data = None
while data is None:
    try:
        kwargs = {}
        if sys.version_info >= (3,):
            import tokenize
            with open(target_path, "rb") as f:
                kwargs["encoding"] = tokenize.detect_encoding(f.readline)[0]
        with open(target_path, "r", **kwargs) as f:
            data = f.read()
    except IOError as e:
        if e.errno == errno.EINTR:
            continue
        elif e.errno == errno.ENOENT:
            sys.stderr.write(f"{target_path}: Python implementation not supported: {EPYTHON}\n")
            sys.exit(127)
        else:
            raise

sys.argv[0] = target_path
new_globals = dict(globals())
new_globals["__file__"] = target_path

exec(data, new_globals)
EOF

sudo tee "$CHARD_ROOT/etc/portage/repos.conf/gentoo.conf" > /dev/null <<'EOF'
[gentoo]
location = /var/db/repos/gentoo
sync-type = rsync
sync-uri = rsync://rsync.gentoo.org/gentoo-portage
auto-sync = yes
EOF

sudo tee /usr/local/chard/etc/profile.d/display.sh > /dev/null <<'EOF'
export DISPLAY=:0
EOF
sudo chmod +x /usr/local/chard/etc/profile.d/display.sh


 ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH"; exit 1 ;;
esac

sudo tee /usr/local/chard/etc/portage/make.conf > /dev/null <<EOF
# Chard Portage make.conf
# Manually generated
COMMON_FLAGS="-O2 -pipe"
CFLAGS="-O2 -pipe"
CXXFLAGS="-O2 -pipe"
FCFLAGS="-O2 -pipe"
FFLAGS="-O2 -pipe"
LC_MESSAGES=C.utf8
DISTDIR="/var/cache/distfiles"
PKGDIR="/var/cache/packages"
PORTAGE_TMPDIR="/var/tmp"
PORTDIR="/usr/portage"
SANDBOX="/usr/bin/sandbox"
CHOST="$CHOST"
CC="/usr/bin/gcc"
CXX="/usr/bin/g++"
AR="/usr/bin/gcc-ar"
RANLIB="/usr/bin/gcc-ranlib"
STRIP="/usr/bin/strip"
FEATURES="assume-digests binpkg-docompress binpkg-dostrip binpkg-logs config-protect-if-modified distlocks ebuild-locks fixlafiles ipc-sandbox merge-sync multilib-strict network-sandbox news parallel-fetch pid-sandbox preserve-libs protect-owned strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersync xattr -sandbox -usersandbox"
USE="X a52 aac acl acpi alsa bindist branding bzip2 cairo cdda cdr cet crypt cups dbus dri dts dvd dvdr elogind encode exif flac gdbm gif gpm gtk iconv icu ipv6 jpeg lcms libnotify libtirpc mad mng mp3 mp4 mpeg multilib ncurses nls ogg opengl openmp pam pango pcre pdf png policykit ppds qml qt5 qt6 readline sdl seccomp sound spell ssl startup-notification svg test-rust truetype udev udisks unicode upower usb vorbis vulkan wayland wxwidgets x264 xattr xcb xft xml xv xvid zlib x11"
PYTHON_TARGETS="python3_13"
ACCEPT_KEYWORDS="~amd64 ~x86 ~arm ~arm64"
PKG_CONFIG_PATH="/usr/lib/pkgconfig:/lib/pkgconfig:/usr/share/pkgconfig:/share/pkgconfig:$PKG_CONFIG_PATH"
PKG_CONFIG="/usr/bin/pkg-config"
PORTAGE_PROFILE_DIR="/usr/local/etc/portage/make.profile"
MESON_NATIVE_FILE="/meson-cross.ini"
EOF

#PORTAGE_PROFILE_DIR="/usr/local/chard/etc/portage/make.profile"
#sudo mkdir -p "$PORTAGE_PROFILE_DIR"
#echo "/etc/portage/make.profile" | sudo tee "$PORTAGE_PROFILE_DIR/parent" > /dev/null

sudo mkdir -p /usr/share/sandbox

sudo tee /usr/local/chard/etc/sandbox.conf > /dev/null <<'EOF'
SANDBOX_BASHRC="/usr/share/sandbox/sandbox.bashrc"
SANDBOX_D="/etc/sandbox.d"
ns-mount-off
ns-pid-off
ns-ipc-off
ns-net-off
ns-user-off
EOF

sudo tee "/usr/local/chard/usr/share/sandbox/sandbox.bashrc" > /dev/null <<'EOF'
export HOME="/home/chronos/user/"
export USER="chronos"
export LOGNAME="chronos"
export PATH=/usr/bin:/bin:/usr/local/bin:$HOME/.cargo/bin:$PATH
EOF

ARCH=$(uname -m)

case "$ARCH" in
    x86_64)
        sudo tee "$CHARD_ROOT/mesonrust.ini" > /dev/null <<'EOF'
[binaries]
c = '/usr/bin/gcc'
cpp = '/usr/bin/g++'
ar = '/usr/bin/gcc-ar'
ranlib = '/usr/bin/gcc-ranlib'
strip = '/usr/bin/strip'
pkgconfig = 'pkg-config'
cargo = '/home/chronos/user/.cargo/bin/cargo'
rust = '/home/chronos/user/.cargo/bin/rustc'

[properties]
rust_target = 'x86_64-pc-linux-gnu'

[host_machine]
system = 'linux'
cpu_family = 'x86_64'
cpu = 'x86_64'
endian = 'little'
EOF
        ;;
    aarch64|arm64)
        sudo tee "$CHARD_ROOT/mesonrust.ini" > /dev/null <<'EOF'
[binaries]
c = '/usr/bin/gcc'
cpp = '/usr/bin/g++'
ar = '/usr/bin/gcc-ar'
ranlib = '/usr/bin/gcc-ranlib'
strip = '/usr/bin/strip'
pkgconfig = 'pkg-config'
cargo = '/home/chronos/user/.cargo/bin/cargo'
rust = '/home/chronos/user/.cargo/bin/rustc'

[properties]
rust_target = 'aarch64-unknown-linux-gnu'

[host_machine]
system = 'linux'
cpu_family = 'aarch64'
cpu = 'aarch64'
endian = 'little'
EOF
        ;;
    *)
        echo "Unsupported architecture: $ARCH"
        exit 1
        ;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        CHOST=x86_64-pc-linux-gnu
        PROFILE_DIR="$CHARD_ROOT/var/db/repos/gentoo/profiles/default/linux/amd64/17.1"
        ;;
    aarch64)
        CHOST=aarch64-unknown-linux-gnu
        PROFILE_DIR="$CHARD_ROOT/var/db/repos/gentoo/profiles/default/linux/arm64/17.1"
        ;;
    *)
        echo "Unknown architecture: $ARCH"
        exit 1
        ;;
esac

sudo mkdir -p "$CHARD_ROOT/var/db/repos/gentoo/profiles"
sudo mkdir -p "$PROFILE_DIR"

sudo tee "$CHARD_ROOT/var/db/repos/gentoo/profiles/repo_name" > /dev/null <<'EOF'
gentoo
EOF

#sudo touch "$PROFILE_DIR/parent"

echo "Created $CHARD_ROOT/mesonrust.ini for $ARCH"

echo "${RED}Created $CHARD_ROOT/usr/local/chard/mesonrust.ini${RESET}"

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        CHOST=x86_64-pc-linux-gnu
        CPU_FAMILY=x86_64
        ;;
    aarch64)
        CHOST=aarch64-unknown-linux-gnu
        CPU_FAMILY=arm64
        ;;
    *)
        echo "Unknown architecture: $ARCH"
        exit 1
        ;;
esac

MESON_FILE="/usr/local/chard/meson-cross.ini"

sudo tee "$MESON_FILE" > /dev/null <<EOF

c = '/usr/bin/gcc'
cpp = '/usr/bin/g++'
ar = '/usr/bin/gcc-ar'
ranlib = '/usr/bin/gcc-ranlib'
strip = '/usr/bin/strip'
pkgconfig = '/usr/bin/pkg-config'
pkg-config = '/usr/bin/pkg-config'
llvm-config = 'llvm-config'
fortran = 'false'
objc = 'false'
objcpp = 'false'
objcopy = '/usr/bin/gcc-objcopy'
windres = '/usr/bin/gcc-windres'
python = '/usr/bin/python3'
ninja = '/usr/bin/ninja'

[built-in options]
c_args = ['-O2', '-pipe', '-fPIC', '-I/usr/include']
c_link_args = ['-L/usr/lib64']
cpp_args = ['-O2', '-pipe', '-fPIC', '-I/usr/include']
cpp_link_args = ['-L/usr/lib64']
fortran_args = []
fortran_link_args = []
objc_args = []
objc_link_args = []
objcpp_args = []
objcpp_link_args = []

[properties]
needs_exe_wrapper = false
pkg_config_libdir = '/usr/lib64/pkgconfig'

[build_machine]
system = 'linux'
cpu_family = '$CPU_FAMILY'
cpu = '$CPU_FAMILY'
endian = 'little'
EOF

echo "${RESET}${GREEN}[+] Meson file created at $MESON_FILE for architecture $ARCH ${RESET}"

sudo mkdir -p /usr/local/chard/etc/X11/xorg.conf.d

sudo tee /usr/local/chard/etc/X11/xorg.conf.d/20-glamor.conf > /dev/null <<'EOF'
Section "Device"
    Identifier "Intel Graphics"
    Driver "modesetting"
    Option "AccelMethod" "glamor"
EndSection
EOF

sudo mkdir -p /usr/local/chard/run/dbus
sudo mkdir -p /usr/local/chard/tmp/.X11-unix

echo "${RESET}${GREEN}[+] Mounting Chard Chroot${RESET}"
sudo cp /etc/resolv.conf /usr/local/chard/etc/resolv.conf

sudo cp /usr/local/chard/chardbuild.log /home/chronos/user/MyFiles/Downloads/
echo "${BLUE}${BOLD}chardbuild.log${RESET}${BLUE} copied to Downloads folder for viewing. ${RESET}"
echo "${RESET}${YELLOW}make.conf successfully updated for Chard. ${RESET}"
echo "${RESET}${BLUE}Setting up Emerge! ${RESET}"

sudo chroot /usr/local/chard /bin/bash -c "

    mountpoint -q /proc    || mount -t proc proc /proc
    mountpoint -q /sys     || mount -t sysfs sys /sys
    mountpoint -q /dev     || mount -t devtmpfs devtmpfs /dev
    mountpoint -q /dev/shm || mount -t tmpfs tmpfs /dev/shm
    mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts
    mountpoint -q /etc/ssl || mount --bind /etc/ssl /etc/ssl
    [ -e /dev/null    ] || mknod -m 666 /dev/null c 1 3
    [ -e /dev/tty     ] || mknod -m 666 /dev/tty c 5 0
    [ -e /dev/random  ] || mknod -m 666 /dev/random c 1 8
    [ -e /dev/urandom ] || mknod -m 666 /dev/urandom c 1 9

    ARCH=\$(uname -m)
    case \"\$ARCH\" in
        x86_64)  CHOST=x86_64-pc-linux-gnu ;;
        aarch64) CHOST=aarch64-unknown-linux-gnu ;;
        *) echo \"Unknown architecture: \$ARCH\"; exit 1 ;;
    esac
            export ARCH
            export CHOST
            export HOME=/home/chronos/user
            export MAGIC=\"/usr/share/misc/magic.mgc\"
            export CC=/usr/bin/gcc
            export CXX=/usr/bin/g++
            export AR=/usr/bin/gcc-ar
            export RANLIB=/usr/bin/gcc-ranlib
            export STRIP=/usr/bin/strip
            export PATH=/usr/bin:/bin:/usr/local/bin:\$HOME/.cargo/bin
            export LD_LIBRARY_PATH=\"/lib:/lib64:/usr/lib:/usr/lib64:\$HOME/.rustup/toolchains/stable-$CHOST/lib:/usr/local/lib:/usr/local/lib64\${LD_LIBRARY_PATH:+:\$LD_LIBRARY_PATH}\"
            export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:\${PERL5LIB}
            export PKG_CONFIG=/usr/bin/pkg-config
            export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:\${PKG_CONFIG_PATH}
            export PYTHON=\"/bin/python3\"
            export FORCE_UNSAFE_CONFIGURE=1
            export XDG_DATA_DIRS=\"/usr/share:/usr/local/share\"
            export CFLAGS=\"-O2 -pipe -fPIC -I/usr/include\"
            export CXXFLAGS=\"-O2 -pipe -fPIC -I/usr/include\"
            export LDFLAGS=\"-L/usr/lib -L/usr/lib64\"
            export GI_TYPELIB_PATH=/usr/lib64/girepository-1.0:\${GI_TYPELIB_PATH:-}
            export CARGO_HOME=\$HOME/.cargo
            export RUSTUP_HOME=\$HOME/.rustup
            export GIT_TEMPLATE_DIR=/usr/share/git-core/templates
            export PORTAGE_PROFILE_DIR=\"/usr/local/etc/portage/make.profile\"
            export PORTAGE_LOGDIR=\"/var/log/portage\"
            export PORTAGE_CONFIGROOT=\"/\"
            export PORTAGE_TMPDIR=\"/var/tmp\"
            export MESON_CROSS_FILE=\"/meson-cross.ini\"
            export XDG_RUNTIME_DIR=\"/usr/local/chard/run/user/0\"
            export DISPLAY=:0
            export LD=\"/usr/bin/ld\"

    emerge --sync

    umount /etc/ssl
    umount /dev/pts
    umount /dev/shm
    umount /dev
    umount /sys
    umount /proc
"

sudo mv /usr/local/chard/usr/lib/libcrypt.so /usr/local/chard/usr/lib/libcrypt.so.bak 2>/dev/null

if ! lscpu -e=CPU,MAXMHZ >/dev/null 2>&1; then
    echo "Error: lscpu -e=CPU,MAXMHZ not supported on this system."
    return 0
fi

mapfile -t CORES < <(lscpu -e=CPU,MAXMHZ 2>/dev/null | \
    awk 'NR>1 && $2 ~ /^[0-9.]+$/ {print $1 ":" $2}' | sort -t: -k2,2n)

if (( ${#CORES[@]} == 0 )); then
    echo "No CPU frequency data found."
    return 0
fi

mhz_values=($(printf '%s\n' "${CORES[@]}" | cut -d: -f2 | sort -n))
count=${#mhz_values[@]}
mid=$((count / 2))
if (( count % 2 == 0 )); then
    threshold=$(awk "BEGIN {print (${mhz_values[mid-1]} + ${mhz_values[mid]}) / 2}")
else
    threshold="${mhz_values[mid]}"
fi

WEAK_CORES=$(printf '%s\n' "${CORES[@]}" | \
    awk -v t="$threshold" -F: '{if ($2 <= t) print $1}' | paste -sd, -)

if [[ -z "$WEAK_CORES" ]]; then
    echo "Warning: Could not determine weak cores, defaulting to all cores."
    WEAK_CORES=$(seq 0 $(( $(nproc) - 1 )) | paste -sd, -)
fi

export TASKSET="taskset -c $WEAK_CORES"

MEM_KB=$(awk '/MemTotal/ {print $2}' /proc/meminfo)
MEM_GB=$(( (MEM_KB + 1024*1024 - 1) / 1024 / 1024 ))
THREADS=$((MEM_GB / 2))
((THREADS < 1)) && THREADS=1

TOTAL_CORES=$(nproc)
ECORE_COUNT=$(echo "$WEAK_CORES" | tr ',' '\n' | wc -l)
ECORE_RATIO=$(awk "BEGIN {print $ECORE_COUNT / $TOTAL_CORES}")

if (( $(awk "BEGIN {print ($ECORE_RATIO >= 0.5)}") )); then
    THREADS=$(awk -v t="$THREADS" 'BEGIN {printf("%d", t * 2.0)}')
fi

export MAKEOPTS="-j$THREADS"

parallel_tools=(make emerge ninja scons meson cmake)
for tool in "${parallel_tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        alias "$tool"="$TASKSET $tool $MAKEOPTS"
    fi
done

serial_tools=(cargo go rustc gcc g++ clang clang++ ccache waf python pip install npm yarn node gyp bazel b2 bjam dune dune-build)
for tool in "${serial_tools[@]}"; do
    if command -v "$tool" >/dev/null 2>&1; then
        alias "$tool"="$TASKSET $tool"
    fi
done

sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true

echo "${YELLOW}Chard Root is ready!"
echo "${RESET}${RED}Emerge is ready! Please do not sync more than once a day.${RESET}"
echo "[!] Please open a new shell or run:"
echo "${RESET}${BOLD}${GREEN}source /home/chronos/user/.bashrc${RESET}"
echo
echo "${CYAN}Compiling takes a long time, so please be patient if you have a slow CPU. ${RESET}"
echo "${BLUE}To start compiling apps, open a new shell and run ${BOLD}chard root${RESET}${BLUE}, and then run the following (still working on the list, so expect issues): ${RESET}"
echo "${RESET}${MAGENTA}The following list's goal is to provide a complete user environment. It is overkill. Please pick and choose or do whatever. Emerge is yours. ${RESET}"
echo "${RESET}${RED}Eventually a precompiled version will be made once thorough testing is done. Chard is only supporting chroot environment right not for testing purposes. ${RESET}"
echo
echo "${YELLOW}chard root${RESET}${GREEN}"
echo
echo "emerge make"
echo "emerge cmake"
echo "emerge gcc"
echo "emerge gmp"
echo "emerge mpfr"
echo "emerge binutils"
echo "emerge diffutils"
echo "emerge openssl"
echo "emerge curl"
echo "emerge dev-vcs/git"
echo "emerge coreutils"
echo "emerge perl"
echo "emerge Capture-Tiny"
echo "emerge Try-Tiny"
echo "emerge Config-AutoConf"
echo "emerge Test-Fatal"
echo "emerge findutils"
echo "emerge python"
echo "emerge meson"
echo "emerge dev-libs/glib"
echo "emerge pkg-config"
echo "emerge gtest"
echo "emerge re2c"
echo "emerge dev-build/ninja"
echo "emerge docbook"
echo "emerge gtk-doc"
echo "emerge sys-libs/zlib"
echo "emerge libunistring"
echo "emerge file"
echo "emerge extra-cmake-modules"
#echo "emerge --autounmask-write dev-perl/File-LibMagic"
#echo "emerge --autounmask-write www-client/firefox"
#echo "etc-update --automode -3 -y"
echo "emerge File-LibMagic"
echo "emerge libpsl"
echo "emerge expat"
echo "emerge duktape"
echo "emerge app-arch/brotli"
echo "mv /usr/lib/libcrypt.so /usr/lib/libcrypt.so.bak"
echo "emerge dev-lang/rust"
echo "${RESET}${CYAN}"
echo "emerge sys-auth/polkit"
echo "emerge sys-apps/bubblewrap"
echo "emerge app-portage/gentoolkit"
echo "emerge x11-base/xorg-drivers"
echo "emerge x11-base/xorg-server"
echo "emerge x11-base/xorg-apps"
echo "emerge x11-libs/libX11"
echo "emerge x11-libs/libXft"
echo "emerge x11-libs/libXrender"
echo "emerge x11-libs/libXrandr"
echo "emerge x11-libs/libXcursor"
echo "emerge x11-libs/libXi"
echo "emerge x11-libs/libXinerama"
echo "emerge wayland"
echo "emerge wayland-protocols"
echo "emerge libxkbcommon"
echo "emerge libxkbcommon-x11"
echo "emerge gtk+3"
echo "emerge xfce4util"
echo "emerge xfconf"
echo "emerge xdg-desktop-portal"
echo "emerge xdg-desktop-portal-wlr"
echo "emerge media-libs/mesa"
echo "emerge media-libs/mesa-progs"
echo "emerge media-sound/pulseaudio"
echo "emerge media-sound/alsa-utils"
echo "emerge sys-apps/dbus"
echo "emerge app-accessibility/at-spi2-core"
echo "emerge app-accessibility/at-spi2-atk"
echo "emerge media-fonts/fontconfig"
echo "emerge media-fonts/dejavu"
echo "emerge media-libs/freetype"
echo "emerge x11-themes/gtk-engine-murrine"
echo "emerge x11-themes/gtk-engines"
echo "emerge sys-apps/udisks"
echo "emerge sys-power/upower"
echo "emerge x11-libs/libnotify"
echo "emerge dev-libs/libdbusmenu"
echo "emerge x11-libs/libSM"
echo "emerge x11-libs/libICE"
echo "emerge libwnck"
echo "emerge xfce-base/exo"
echo "emerge app-arch/tar"
echo "emerge app-arch/xz-utils"
echo "emerge net-libs/gnutls"
echo "emerge net-libs/glib-networking"
echo "emerge sys-libs/libseccomp"
echo "emerge dev-vcs/git app-eselect/eselect-repository"
echo "emerge dev-libs/appstream-glib"
echo "emerge app-crypt/gpgme"
echo "emerge dev-libs/json-glib"
echo "emerge dev-libs/ostree"
echo "emerge sys-apps/xdg-dbus-proxy"
echo "emerge x11-libs/gdk-pixbuf"
echo "emerge sys-fs/fuse:3"
echo "emerge dev-python/pygobject"
echo "emerge gnome-base/dconf"
echo "emerge sys-libs/libmalcontent"
echo "emerge x11-misc/xdg-utils"
echo "emerge xinit"
echo "emerge xterm"
echo "emerge twm"
echo "emerge xfce-extra/xfce4-screensaver"
echo "emerge xfce-base/xfce4-meta"
echo "cd /tmp"
echo "git clone https://chromium.googlesource.com/chromiumos/platform2"
echo "cd vm_tools/sommelier"
echo "meson setup build --prefix=/usr"
echo "ninja -C build"
echo "ninja -C build install"
echo "emerge www-client/firefox"
echo "emerge flatpak"
echo "flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo"
echo "${RESET}"
show_progress
