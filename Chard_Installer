#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

MAX_RETRIES=10
RETRY_DELAY=30

CHARD_ROOT="/usr/local/chard"
CHARD_RC="/usr/local/chard/.chardrc"
BUILD_DIR="/usr/local/chard/var/tmp/build"

echo "${GREEN}[+] Creating ${RESET}${RED}Chard Root${RESET}"
sudo mkdir -p "/usr/local/chard"/etc/portage \
              "/usr/local/chard"/usr/portage \
              "/usr/local/chard"/usr/bin \
              "/usr/local/chard"/usr/lib \
              "/usr/local/chard"/var/tmp/build \
              "/usr/local/chard"/var/cache/distfiles \
              "/usr/local/chard"/var/cache/packages \
              "/usr/local/chard"/dev \
              "/usr/local/chard"/dev/shm \
              "/usr/local/chard"/proc \
              "/usr/local/chard"/sys \
              "/usr/local/chard"/tmp


sudo mkdir -p "/usr/local/chard/etc/portage/repos.conf"

echo "${YELLOW}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "/usr/local/chard/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "/usr/local/chard/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "/usr/local/chard/.chard.logic"

sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc


if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[+] Chard sourced to ~/.bashrc ${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64) GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        GENTOO_ARCH="amd64"
        CHOST="x86_64-pc-linux-gnu"

        echo "${BLUE}[+] Installing bootstrap make binary and cmake ${RESET}${MAGENTA}(x86_64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_x86_64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo ln -sf /usr/local/make "/usr/local/chard/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(x86_64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-x86_64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "/usr/local/chard/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    aarch64|arm64)
        GENTOO_ARCH="arm64"
        CHOST="aarch64-unknown-linux-gnu"

        echo "${BLUE}[+] Installing bootstrap make binary ${RESET}${MAGENTA}(ARM64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_ARM64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo mkdir -p "/usr/local/chard/usr/bin"
        sudo ln -sf /usr/local/make "/usr/local/chard/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(ARM64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-aarch64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "/usr/local/chard/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    *)
        echo "${RED}[!] Unsupported architecture: $ARCH${RESET}"
        exit 1
        ;;
esac


echo "${RESET}${GREEN}[+] Bootstrap make ready at /usr/local/make${RESET}"

MAKE_CONF="/usr/local/chard/etc/portage/make.conf"
sudo mkdir -p "$(dirname "$MAKE_CONF")"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF

echo "${YELLOW}[+] make.conf created with ARCH=${GENTOO_ARCH}${RESET}"

PORTAGE_DIR="/usr/local/chard/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="/usr/local/chard/var/tmp/portage-latest.tar.xz"
echo "${CYAN}[+] Downloading Portage tree snapshot"
sudo curl -L --progress-bar -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
sudo rm -f "$TMP_TAR"

STAGE3_TXT="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/current-stage3-$GENTOO_ARCH-systemd/latest-stage3-$GENTOO_ARCH-systemd.txt"

STAGE3_FILENAME=$(curl -fsSL "$STAGE3_TXT" | grep -Eo 'stage3-.*\.tar\.xz' | head -n1)
STAGE3_URL=$(dirname "$STAGE3_TXT")"/$STAGE3_FILENAME"

STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="/usr/local/chard/var/tmp/$STAGE3_FILE"

echo "${RESET}${BLUE}[+] Downloading latest Stage3 tarball: $STAGE3_FILENAME"
sudo curl -L --progress-bar -o "$TMP_STAGE3" "$STAGE3_URL"

echo "${RESET}${BLUE}[+] Extracting Stage3 tarball"
sudo tar -xJf "$TMP_STAGE3" -C "/usr/local/chard" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"

sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="/usr/local/chard/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="/usr/local/chard/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
    exit 1
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "/usr/local/chard/bin/chard"
sudo chmod +x "/usr/local/chard/bin/chard"

GCC_DIR="/usr/local/chard/usr/$CHOST/gcc-bin/14"
export PYTHON="/usr/local/chard/bin/python3"
export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:/usr/local/chard/usr/bin"
export CFLAGS="-I/usr/local/chard/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L/usr/local/chard/usr/lib"
export AWK=/usr/bin/mawk

KERNEL_VER="6.16"
KERNEL_TAR="linux-$KERNEL_VER.tar.xz"
KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v6.x/$KERNEL_TAR"
KERNEL_BUILD="$BUILD_DIR/linux-$KERNEL_VER"

sudo mkdir -p "$BUILD_DIR"

if [ ! -f "$BUILD_DIR/$KERNEL_TAR" ]; then
    echo "[+] Fetching $KERNEL_TAR..."
    sudo curl -L --progress-bar -o "$BUILD_DIR/$KERNEL_TAR" "$KERNEL_URL"
else
    echo "${RESET}${YELLOW}[!] Kernel tarball already exists, skipping download.${RESET}"
fi

sudo rm -rf "$KERNEL_BUILD"
sudo tar -xf "$BUILD_DIR/$KERNEL_TAR" -C "$BUILD_DIR" \
    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"

echo "${CYAN}[+] Installing Linux headers into Chard Root..."
sudo chroot "/usr/local/chard" /bin/bash -c "
cd /var/tmp/build/linux-$KERNEL_VER

HOST_ARCH=\$(uname -m)

case \"\$HOST_ARCH\" in
    x86_64) KERNEL_ARCH=x86_64;;
    aarch64) KERNEL_ARCH=arm64;;
    *) echo 'Unknown architecture: \$HOST_ARCH'; exit 1;;
esac

make mrproper
make HOST_ARCH=$HOST_ARCH defconfig
make HOST_ARCH=$HOST_ARCH INSTALL_HDR_PATH=/usr headers_install
"

echo "${RESET}${MAGENTA}[+] Linux headers installed to /usr/local/chard/usr/include${RESET}"

sudo rm -rf "$KERNEL_BUILD"

PACKAGES=(
    "make|4.4|tar.gz|https://mirrors.kernel.org//gnu/make/make-4.4.tar.gz|make-4.4|gnu"
    "gmp|6.3.0|tar.xz|https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz|gmp-6.3.0|gnu"
    "mpfr|4.2.2|tar.xz|https://www.mpfr.org/mpfr-current/mpfr-4.2.2.tar.xz|mpfr-4.2.2|gnu"
    "binutils|2.45|tar.xz|https://mirrors.kernel.org//gnu/binutils/binutils-2.45.tar.xz|binutils-2.45|gnu"
    "diffutils|3.12|tar.xz|https://mirrors.kernel.org//gnu/diffutils/diffutils-3.12.tar.xz|diffutils-3.12|gnu"
    "openssl|3.5.2|tar.gz|https://github.com/openssl/openssl/releases/download/openssl-3.5.2/openssl-3.5.2.tar.gz|openssl-3.5.2|gnu"
    "git|2.51.0|tar.gz|https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.51.0.tar.gz|git-2.51.0|gnu"
    "coreutils|9.7|tar.xz|https://mirrors.kernel.org//gnu/coreutils/coreutils-9.7.tar.xz|coreutils-9.7|gnu"
    "perl|5.40.0|tar.gz|https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz|perl-5.40.0|perl-core"
    "Config-AutoConf|0.320|tar.gz|https://cpan.metacpan.org/authors/id/A/AM/AMBS/Config-AutoConf-0.320.tar.gz|Config-AutoConf-0.320|perl"
    "Capture-Tiny|0.48|tar.gz|https://cpan.metacpan.org/authors/id/D/DA/DAGOLDEN/Capture-Tiny-0.48.tar.gz|Capture-Tiny-0.48|perl"
    "Test-Fatal|0.017|tar.gz|https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Test-Fatal-0.017.tar.gz|Test-Fatal-0.017|perl"
    "findutils|4.10.0|tar.xz|https://mirrors.kernel.org//gnu/findutils/findutils-4.10.0.tar.xz|findutils-4.10.0|gnu"
    "pkg-config|0.29.2|tar.gz|https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz|pkg-config-0.29.2|gnu"
    "gtest|1.16.0|tar.gz|https://github.com/google/googletest/releases/download/v1.16.0/googletest-1.16.0.tar.gz|googletest-1.16.0|cmake"
    "python|3.13.7|tar.xz|https://www.python.org/ftp/python/3.13.7/Python-3.13.7.tar.xz|Python-3.13.7|gnu"
    "meson|1.9.0|tar.gz|https://github.com/mesonbuild/meson/releases/download/1.9.0/meson-1.9.0.tar.gz|meson-1.9.0|python"
    "ninja|1.13.1|tar.gz|https://github.com/ninja-build/ninja/archive/refs/tags/v1.13.1.tar.gz|ninja-1.13.1|cmake"
    "zlib|1.3.1|tar.gz|https://zlib.net/zlib-1.3.1.tar.gz|zlib-1.3.1|gnu"
    "sqlite|3500400|tar.gz|https://www.sqlite.org/2025/sqlite-autoconf-3500400.tar.gz|sqlite-autoconf-3500400|gnu"
    "util-linux|2.41|tar.xz|https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.41/util-linux-2.41.tar.xz|util-linux-2.41|gnu"
    "libffi|3.5.2|tar.gz|https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz|libffi-3.5.2|gnu"
    "freetype|2.14.1|tar.xz|https://download.savannah.gnu.org/releases/freetype/freetype-2.14.1.tar.xz|freetype-2.14.1|gnu"
    "graphite2|1.3.14|tgz|https://github.com/silnrsi/graphite/releases/download/1.3.14/graphite2-1.3.14.tgz|graphite2-1.3.14|gnu"
    "cairo|1.18.4|tar.xz|https://cairographics.org/releases/cairo-1.18.4.tar.xz|cairo-1.18.4|gnu"
    "glib|2.86.0|tar.xz|https://download.gnome.org/sources/glib/2.86/glib-2.86.0.tar.xz|glib-2.86.0|meson"
    "harfbuzz|11.5.0|tar.xz|https://github.com/harfbuzz/harfbuzz/releases/download/11.5.0/harfbuzz-11.5.0.tar.xz|harfbuzz-11.5.0|meson"
    "libpng|1.6.50|tar.xz|https://sourceforge.net/projects/libpng/files/libpng16/1.6.50/libpng-1.6.50.tar.xz/download|libpng-1.6.50|gnu"
    "texinfo|7.2|tar.xz|https://mirrors.kernel.org/gnu/texinfo/texinfo-7.2.tar.xz|texinfo-7.2|gnu"
    "libseccomp|2.5.5|tar.gz|https://github.com/seccomp/libseccomp/releases/download/v2.5.5/libseccomp-2.5.5.tar.gz|libseccomp-2.5.5|gnu"
    "file|5.45|tar.gz|https://astron.com/pub/file/file-5.45.tar.gz|file-5.45|gnu"
    "File-LibMagic|1.23|tar.gz|https://cpan.metacpan.org/authors/id/D/DR/DROLSKY/File-LibMagic-1.23.tar.gz|File-LibMagic-1.23|perl"
    "pcre2|10.46|tar.gz|https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.46/pcre2-10.46.tar.gz|pcre2-10.46|gnu"
    "sysprof|1.2.0|tar.gz|https://www.sysprof.com/sysprof-1.2.0.tar.gz|sysprof-1.2.0|gnu"
    "portage|3.0.69.1|tar.gz|https://github.com/gentoo/portage/archive/refs/tags/portage-3.0.69.1.tar.gz|portage-portage-3.0.69.1|meson"
)
mkdir -p "$BUILD_DIR"

sudo mkdir -p "/usr/local/chard/var/tmp/build"

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    ARCHIVE="$NAME-$VERSION.$EXT"

    echo "${RESET}${GREEN}[+] Downloading $NAME-$VERSION "

    attempt=1
    while true; do
        sudo curl -L --progress-bar -o "$BUILD_DIR/$ARCHIVE" "$URL" && break

        echo "${RED}[!] Download failed for $NAME-$VERSION (attempt $attempt/$MAX_RETRIES), retrying in $RETRY_DELAY seconds..."
        (( attempt++ ))

        if (( attempt > MAX_RETRIES )); then
            echo "${BOLD}${RED}[!] Failed to download $NAME-$VERSION after $MAX_RETRIES attempts. Aborting.${RESET}"
            exit 1
        fi
        sleep $RETRY_DELAY
    done

    echo "${RESET}${YELLOW}[+] Extracting $NAME-$VERSION"
    case "$EXT" in
        tar.gz|tgz)
            sudo tar -xzf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.xz)
            sudo tar -xJf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.bz2)
            sudo tar -xjf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        zip)
            sudo unzip -q "$BUILD_DIR/$ARCHIVE" -d "$BUILD_DIR"
            ;;
        *)
            echo "Unknown archive format: $EXT"; exit 1 ;;
    esac
done

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    
    echo "${RESET}${GREEN}[+] Mounting Chard Chroot${RESET}"
    mountpoint -q "/usr/local/chard/proc"    || sudo mount -t proc proc "/usr/local/chard/proc"
    mountpoint -q "/usr/local/chard/sys"     || sudo mount -t sysfs sys "/usr/local/chard/sys"
    mountpoint -q "/usr/local/chard/dev"     || sudo mount --bind /dev "/usr/local/chard/dev"
    mountpoint -q "/usr/local/chard/dev/shm" || sudo mount --bind /dev/shm "/usr/local/chard/dev/shm"

    echo "[+] Building $NAME-$VERSION in chroot${RESET}"
    sudo chroot "/usr/local/chard" /bin/bash -c "
    

cd /var/tmp/build/$DIR

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export MAGIC="/usr/share/misc/magic.mgc"
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'
export PATH=/usr/\$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin
export LD_LIBRARY_PATH=\"${LD_LIBRARY_PATH:+\$LD_LIBRARY_PATH:}/usr/lib64\"
export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:$PERL5LIB
PYTHON="/bin/python3"

if [[ "$NAME" == "gtest" ]]; then
    cd /var/tmp/build/${DIR}
else
    cd /var/tmp/build/$DIR
fi

case \"$BUILDSYS\" in
    gnu)
        ./configure --prefix=/usr --disable-dependency-tracking
        make -j\$(nproc)
        make install
        ;;
    perl)
        perl Makefile.PL INSTALL_BASE=/usr/local
        make
        make test || true
        make install
        ;;
    perl-core)
        sh Configure -des -Dprefix=/usr
        make -j$(nproc)
        make install
        ;;
    cmake)
        cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
        cmake --build build -j$(nproc)
        cmake --install build
        ;;
     meson)
        #rm -rf build
        meson setup build --prefix=/usr
        ninja -C build
        ninja -C build install
        ;;
      python)
        cd /var/tmp/build/$DIR
        ./configure --prefix=/usr \
                    --enable-optimizations \
                    --with-ensurepip=install \
                    --with-ssl
        make -j$(nproc)
        make install
        ;;
    *)
        echo \"Unknown build system: $BUILDSYS\"
        exit 1
        ;;
esac
"

echo

echo "${RESET}${MAGENTA}[+] Finished building $NAME-$VERSION${RESET}"
    
    if [ "$NAME" = "make" ] && [ -L "/usr/local/chard/usr/bin/make" ]; then
        sudo rm -f "/usr/local/chard/usr/bin/make"
        sudo cp /usr/local/make "/usr/local/chard/usr/bin/make"
        echo "${GREEN}[+] Replaced symlink with real make binary in Chard Root${RESET}"
    fi

    echo

done

echo "${RED}[+] Cleaning up${RESET}"
sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true

sudo rm -rf "$BUILD_DIR"

sudo chown -R 1000:1000 "/usr/local/chard"

cat > /usr/local/chard/bin/emerge <<'EOF'
#!/usr/local/chard/bin/python3.13
import os
import sys
import errno

EPYTHON = '/usr/local/chard/bin/python3.13'

prev_target = None
target = sys.argv[0]
while True:
    try:
        next_target = os.path.join(os.path.dirname(target), os.readlink(target))
    except OSError as e:
        if e.errno == errno.EINTR:
            continue
        if e.errno == errno.EINVAL:
            if os.path.basename(target) in ('python-exec2', 'python-exec2'):
                if prev_target is None:
                    sys.stderr.write('{}: python-exec2 wrapper cannot run directly\n'.format(target))
                    sys.exit(127)
                target = prev_target
            break
        raise
    else:
        prev_target = target
        target = next_target

target = os.path.join('/usr/local/chard/usr/lib/python-exec', 'python3.13', os.path.basename(target))

data = None
while data is None:
    try:
        kwargs = {}
        if sys.version_info >= (3,):
            import tokenize
            with open(target, 'rb') as f:
                kwargs['encoding'] = tokenize.detect_encoding(f.readline)[0]
        with open(target, 'r', **kwargs) as f:
            data = f.read()
    except IOError as e:
        if e.errno == errno.EINTR:
            continue
        elif e.errno == errno.ENOENT:
            sys.stderr.write('{}: Python implementation not supported: {}\n'.format(target, EPYTHON))
            sys.exit(127)
        else:
            raise

sys.argv[0] = target
if sys.version_info >= (3, 9):
    target = os.path.abspath(target)
new_globals = dict(globals())
new_globals['__file__'] = target

exec(data, new_globals)
EOF

chmod +x /usr/local/chard/bin/emerge

CHARD_ROOT="${CHARD_ROOT:-/usr/local/chard}"
MAKE_CONF="/usr/local/chard/etc/portage/make.conf"

if [ -f "$MAKE_CONF" ]; then
    cp -a "$MAKE_CONF" "${MAKE_CONF}.bak.$(date +%Y%m%d%H%M%S)"
    echo "Backed up original make.conf to ${MAKE_CONF}.bak.*"
fi

cat > "$MAKE_CONF" <<'EOF'
# Chard Portage make.conf
# Manually generated

COMMON_FLAGS="-O2 -pipe"
CFLAGS="-O2 -pipe"
CXXFLAGS="-O2 -pipe"
FCFLAGS="-O2 -pipe"
FFLAGS="-O2 -pipe"

LC_MESSAGES=C.utf8

ROOT="/usr/local/chard"
DISTDIR="/usr/local/chard/var/cache/distfiles"
PKGDIR="/usr/local/chard/var/cache/packages"
PORTAGE_TMPDIR="/usr/local/chard/var/tmp"
PORTDIR="/usr/local/chard/usr/portage"
SANDBOX="/usr/local/chard/usr/bin/sandbox"

CHOST="x86_64-pc-linux-gnu"
CC="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-gcc"
CXX="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-g++"
AR="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-ar"
NM="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-nm"
RANLIB="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-ranlib"
STRIP="/usr/local/chard/usr/x86_64-pc-linux-gnu/binutils-bin/2.44/strip"

FEATURES="assume-digests binpkg-docompress binpkg-dostrip binpkg-logs config-protect-if-modified distlocks ebuild-locks fixlafiles ipc-sandbox merge-sync multilib-strict network-sandbox news parallel-fetch pid-sandbox preserve-libs protect-owned strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersync xattr"

USE="bindist"

PYTHON_TARGETS="python3_13"
EOF

mkdir -p $CHARD_ROOT/etc
mkdir -p $CHARD_ROOT/usr/share/sandbox

cat > "$CHARD_ROOT/etc/sandbox.conf" <<'EOF'
SANDBOX_BASHRC="/usr/local/chard/usr/share/sandbox/sandbox.bashrc"
SANDBOX_D="/usr/local/chard//etc/sandbox.d"
ns-mount-off
ns-pid-off
ns-ipc-off
ns-net-off
ns-user-off

cat <<'EOF' > "$CHARD_ROOT/usr/share/sandbox/sandbox.bashrc"
export HOME="$CHARD_ROOT/root"
export USER="chronos"
export LOGNAME="chronos"
export PATH="$CHARD_ROOT/usr/bin:$CHARD_ROOT/bin:$PATH"
EOF

ln -sf python3.13 /usr/local/chard/usr/bin/python3
ln -sf python3.13 /usr/local/chard/usr/bin/python
sudo ln -sf /usr/local/chard/usr/bin/python3.13 /usr/lib/python-exec/python3.13/python
sudo ln -sf /usr/local/chard/usr/bin/python3.13 /usr/lib/python-exec/python3.13/python3
sudo ln -sf /usr/local/chard/usr/bin/ebuild /usr/lib/python-exec/python3.13/ebuild
sudo ln -sf /usr/local/chard/usr/bin/emerge /usr/lib/python-exec/python3.13/emerge

echo "${YELLOW}make.conf successfully updated for Chard.${RESET}"
echo "${GREEN}[+] Chard Rootready to run!"
echo "[!] To run, please open a new shell or run:"
echo "${RESET}${BOLD}${RED}source /home/chronos/user/.bashrc${RESET}"
