#!/bin/bash
START_TIME=$(date +%s)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

MAX_RETRIES=10
RETRY_DELAY=30

format_time() {
    local total_seconds=$1
    local hours=$((total_seconds / 3600))
    local minutes=$(((total_seconds % 3600) / 60))
    local seconds=$((total_seconds % 60))
    
    if [ $hours -gt 0 ]; then
        printf "%dh %dm %ds" $hours $minutes $seconds
    elif [ $minutes -gt 0 ]; then
        printf "%dm %ds" $minutes $seconds
    else
        printf "%ds" $seconds
    fi
}

show_progress() {
    local current_time=$(date +%s)
    local elapsed=$((current_time - START_TIME))
    local formatted_time=$(format_time $elapsed)
    echo "${CYAN}[Runtime: $formatted_time]${RESET} $1"
}

CHARD_ROOT="/usr/local/chard"
CHARD_RC="/usr/local/chard/.chardrc"
BUILD_DIR="/usr/local/chard/var/tmp/build"
LOG_FILE=/usr/local/chard/chardbuild.log
echo "${RESET}${GREEN}"
echo
echo
echo
echo
echo
echo
echo "                                                             AA"
echo "                                                            A${RESET}${RED}::${RESET}${GREEN}A"
echo "        CCCCCCCCCCCCCHHHHHHHHH     HHHHHHHHH               A${RESET}${RED}::::${RESET}${GREEN}A               RRRRRRRRRRRRRRRRR   DDDDDDDDDDDDD" 
echo "     CCC${RESET}${YELLOW}::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H              A${RESET}${RED}::::::${RESET}${GREEN}A              R${RESET}${YELLOW}::::::::::::::::${RESET}${GREEN}R  D${RESET}${YELLOW}::::::::::::${RESET}${GREEN}DDD"  
echo "   CC${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H             A${RESET}${RED}::::::::${RESET}${GREEN}A             R${RESET}${YELLOW}::::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R D${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}DD"  
echo "  C${RESET}${YELLOW}:::::${RESET}${GREEN}CCCCCCCC${RESET}${YELLOW}::::${RESET}${GREEN}CHH${RESET}${YELLOW}::::::${RESET}${GREEN}H     H${RESET}${YELLOW}::::::${RESET}${GREEN}HH            A${RESET}${RED}::::::::::${RESET}${GREEN}A            RR${RESET}${YELLOW}:::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RDDD${RESET}${YELLOW}:::::${RESET}${GREEN}DDDDD${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo " C${RESET}${YELLOW}:::::${RESET}${GREEN}C       CCCCCC  H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H             A${RESET}${RED}::::::::::::${RESET}${GREEN}A             R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H            A${RESET}${RED}::::::::::::::${RESET}${GREEN}A            R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}::::::${RESET}${GREEN}HHHHH${RESET}${YELLOW}::::::${RESET}${GREEN}H           A${RESET}${RED}::            ::${RESET}${GREEN}A           R${RESET}${YELLOW}::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R   D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::::::::::::::${RESET}${GREEN}H          A${RESET}${RED}:::            :::${RESET}${GREEN}A          R${RESET}${YELLOW}:::::::::::::${RESET}${GREEN}RR    D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::::::::::::::${RESET}${GREEN}H         A${RESET}${RED}::::            ::::${RESET}${GREEN}A         R${RESET}${YELLOW}::::${RESET}${GREEN}RRRRRR${RESET}${YELLOW}:::::${RESET}${GREEN}R   D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"    
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}::::::${RESET}${GREEN}HHHHH${RESET}${YELLOW}::::::${RESET}${GREEN}H        A${RESET}${RED}:::::            :::::${RESET}${GREEN}A        R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"    
echo "C${RESET}${YELLOW}:::::${RESET}${GREEN}C                H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H       A${RESET}${RED}::::::            ::::::${RESET}${GREEN}A       R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"   
echo " C${RESET}${YELLOW}:::::${RESET}${GREEN}C       CCCCCC  H${RESET}${YELLOW}:::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::${RESET}${GREEN}H      A${RESET}${RED}:::::                :::::${RESET}${GREEN}A      R${RESET}${YELLOW}::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}R  D${RESET}${YELLOW}:::::${RESET}${GREEN}D     D${RESET}${YELLOW}:::::${RESET}${GREEN}D"  
echo "  C${RESET}${YELLOW}:::::${RESET}${GREEN}CCCCCCCC${RESET}${YELLOW}::::${RESET}${GREEN}CHH${RESET}${YELLOW}::::::${RESET}${GREEN}H     H${RESET}${YELLOW}::::::${RESET}${GREEN}HH   A${RESET}${RED}:::::::::          :::::::::${RESET}${GREEN}A   RR${RESET}${YELLOW}:::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RDDD${RESET}${YELLOW}:::::${RESET}${GREEN}DDDDD${RESET}${YELLOW}:::::${RESET}${GREEN}D" 
echo "   CC${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H  A${RESET}${RED}:::::::::            :::::::::${RESET}${GREEN}A  R${RESET}${YELLOW}::::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RD${RESET}${YELLOW}:::::::::::::::${RESET}${GREEN}DD"  
echo "     CCC${RESET}${YELLOW}::::::::::::${RESET}${GREEN}CH${RESET}${YELLOW}:::::::${RESET}${GREEN}H     H${RESET}${YELLOW}:::::::${RESET}${GREEN}H A${RESET}${RED}::::::::                ::::::::${RESET}${GREEN}A R${RESET}${YELLOW}::::::${RESET}${GREEN}R     R${RESET}${YELLOW}:::::${RESET}${GREEN}RD${RESET}${YELLOW}::::::::::::${RESET}${GREEN}DDD"  
echo "        CCCCCCCCCCCCCHHHHHHHHH     HHHHHHHHHA${BOLD}======                      ======${RESET}${GREEN}ARRRRRRRR     RRRRRRRDDDDDDDDDDDDD"   
echo "                                           ${BOLD}A====                            ====A"
echo "                                          A====                              ====A"
echo "${RESET}"

               
echo "${RESET}"
echo "${RED}- Chard Installer can take ${BOLD}30-240 minutes${RESET}${RED} depending on your CPU and storage speed. Requires ~8 GB of space. Supports ${BOLD}x86_64${RESET}${RED} and ${BOLD}ARM64${RESET}${RED}! ${RESET}"
echo "${YELLOW}- Chard will be installed in ${RESET}${YELLOW}${BOLD}${CHARD_ROOT}${RESET}${YELLOW} and will not affect ChromeOS or system commands.${RESET}"
echo "${GREEN}- It is ${BOLD}semi-sandboxed within itself${RESET}${GREEN}, but can rely on Host libraries. Includes a 2025 toolchain to build and compile with.${RESET}"
echo "${CYAN}- Chard has ${BOLD}not${RESET}${CYAN} been tested with Brunch Toolchain or Chromebrew - this project uses a different implementation. It does ${BOLD}NOT${RESET}${CYAN} require dev_install.${RESET}"
echo "${BLUE}- Does not require altering current state of /usr/local/ during Install and Uninstall.${RESET}"
echo "${MAGENTA}- Chard is current in early development and Flatpak + Emerge are not working. ${BOLD}Bugs will exist${RESET}${MAGENTA}, so please have a ${BOLD}USB backup${RESET}${MAGENTA} in case of serious mistakes.${RESET}"
echo
echo
   read -rp "${GREEN}${BOLD}Install Chard? (Y/n): ${RESET}" response
response=${response:-Y}

case "$response" in
    y|Y|yes|YES|Yes)
        echo
        echo "${GREEN}[CONTINUE]${RESET}"
        echo
        ;;
    *)
        echo "${RED}[EXIT]${RESET}"
        exit 1
        ;;
esac

    echo "${RED}Chard Installs to /usr/local/chard${RESET}${YELLOW} - Install will eventually chroot into chard. ${BOLD}This means / will be /usr/local/chard/ in reality.${RESET}"
    echo
    echo "${GREEN}[+] Creating ${RESET}${RED}Chard Root${RESET}"

    echo "${RESET}${MAGENTA}[*] Unmounting active bind mounts in case of reinstall...${RESET}"
            sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
            sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
            sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
    
            echo "${BLUE}[*] Removing $CHARD_ROOT in case of reinstall...${RESET}"
            sudo rm -rf "$CHARD_ROOT"
    
            sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc 2>/dev/null || true

sudo mkdir -p "$CHARD_ROOT"/etc/portage \
                 "$CHARD_ROOT"/etc/sandbox.d \
                 "$CHARD_ROOT"/etc/ssl \
                 "$CHARD_ROOT"/usr/bin \
                 "$CHARD_ROOT"/usr/lib \
                 "$CHARD_ROOT"/usr/lib64 \
                 "$CHARD_ROOT"/usr/include \
                 "$CHARD_ROOT"/usr/share \
                 "$CHARD_ROOT"/usr/local/bin \
                 "$CHARD_ROOT"/usr/local/lib \
                 "$CHARD_ROOT"/usr/local/include \
                 "$CHARD_ROOT"/var/tmp/build \
                 "$CHARD_ROOT"/var/cache/distfiles \
                 "$CHARD_ROOT"/var/cache/packages \
                 "$CHARD_ROOT"/var/log \
                 "$CHARD_ROOT"/var/run \
                 "$CHARD_ROOT"/dev/shm \
                 "$CHARD_ROOT"/dev/pts \
                 "$CHARD_ROOT"/proc \
                 "$CHARD_ROOT"/sys \
                 "$CHARD_ROOT"/tmp \
                 "$CHARD_ROOT"/run \
                 "$CHARD_ROOT"/home/chronos/user/.cargo \
                 "$CHARD_ROOT"/home/chronos/user/.rustup \
                 "$CHARD_ROOT"/home/chronos/user/.local/share \
                 "$CHARD_ROOT"/home/chronos/user/Desktop \
                 "$CHARD_ROOT"/mnt

sudo mkdir -p /usr/local/chard/usr/local/src/gtest-1.16.0
sudo mkdir -p "$(dirname "$LOG_FILE")"
sudo mkdir -p /usr/local/chard/etc/portage/repos.conf"
sudo mkdir -p /usr/local/chard/var/db/repos/gentoo/profiles"
exec > >(sudo tee -a "$LOG_FILE") 2>&1

sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
echo "${YELLOW}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "/usr/local/chard/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "/usr/local/chard/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "/usr/local/chard/.chard.logic"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[+] Chard sourced to ~/.bashrc ${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH" ;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        GENTOO_ARCH="amd64"
        CHOST="x86_64-pc-linux-gnu"
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        echo "${BLUE}[+] Installing bootstrap make binary and cmake ${RESET}${MAGENTA}(x86_64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_x86_64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo ln -sf /usr/local/make "/usr/local/chard/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(x86_64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-x86_64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "/usr/local/chard/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    aarch64|arm64)
        GENTOO_ARCH="arm64"
        CHOST="aarch64-unknown-linux-gnu"
        sudo mkdir -p "$CHARD_ROOT/usr/bin"
        echo "${BLUE}[+] Installing bootstrap make binary ${RESET}${MAGENTA}(ARM64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_ARM64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo mkdir -p "/usr/local/chard/usr/bin"
        sudo ln -sf /usr/local/make "/usr/local/chard/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(ARM64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-aarch64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "/usr/local/chard/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    *)
        echo "${RED}[!] Unsupported architecture: $ARCH${RESET}"
        exit 1
        ;;
esac


echo "${RESET}${GREEN}[+] Bootstrap make ready at /usr/local/make"

sudo mkdir -p /usr/local/chard/etc/portage/package.use

sudo tee /usr/local/chard/etc/portage/package.use/systemd-overrides <<EOF
sys-auth/elogind -systemd
media-video/pipewire -elogind
media-video/wireplumber -elogind
sys-auth/polkit -elogind
sys-apps/dbus -elogind
EOF

sudo tee /usr/local/chard/etc/portage/package.use/flatpak-systemd > /dev/null <<'EOF'
sys-auth/elogind -systemd
media-video/pipewire -elogind
media-video/wireplumber -elogind
sys-auth/polkit -elogind
sys-apps/dbus -elogind
sys-libs/pam -elogind systemd
sys-apps/shadow -elogind systemd
sys-apps/util-linux -elogind systemd
EOF

echo "dev-build/cmake -gui" | sudo tee -a /usr/local/chard/etc/portage/package.use/cmake-fix

sudo mkdir -p "/usr/local/chard/var/tmp"
PORTAGE_DIR="/usr/local/chard/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="/usr/local/chard/var/tmp/portage-latest.tar.xz"
echo "${CYAN}[+] Downloading Portage tree snapshot"
sudo curl -L --progress-bar -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
sudo rm -f "$TMP_TAR"

STAGE3_TXT="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/current-stage3-$GENTOO_ARCH-systemd/latest-stage3-$GENTOO_ARCH-systemd.txt"

STAGE3_FILENAME=$(curl -fsSL "$STAGE3_TXT" | grep -Eo 'stage3-.*\.tar\.xz' | head -n1)
STAGE3_URL=$(dirname "$STAGE3_TXT")"/$STAGE3_FILENAME"

STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="/usr/local/chard/var/tmp/$STAGE3_FILE"

echo "${RESET}${BLUE}[+] Downloading latest Stage3 tarball: $STAGE3_FILENAME"
sudo curl -L --progress-bar -o "$TMP_STAGE3" "$STAGE3_URL"

echo "${RESET}${BLUE}[+] Extracting Stage3 tarball"
sudo tar -xJf "$TMP_STAGE3" -C "/usr/local/chard" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"

sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="/usr/local/chard/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="/usr/local/chard/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
    exit 1
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "/usr/local/chard/bin/chard"
sudo chmod +x "/usr/local/chard/bin/chard"

GCC_DIR="/usr/local/chard/usr/$CHOST/gcc-bin/14"
export PYTHON="/usr/local/chard/bin/python3"
export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:/usr/local/chard/usr/bin"
export CXXFLAGS="$CFLAGS"
export AWK=/usr/bin/mawk
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/usr/lib64"
export MAKEFLAGS="-j$(nproc)"
export INSTALL_ROOT="/usr/local/chard"
export ACLOCAL_PATH="/usr/local/chard/usr/share/aclocal"
export PYTHONPATH="/usr/local/chard/usr/lib/python3.*/site-packages:$PYTHONPATH"
export PKG_CONFIG_PATH=/usr/local/chard/usr/lib64/pkgconfig:/usr/local/chard/usr/lib/pkgconfig
export CFLAGS="-I/usr/local/chard/usr/include $CFLAGS"
export LDFLAGS="-L/usr/local/chard/usr/lib64 -L/usr/local/chard/usr/lib $LDFLAGS"
export GIT_TEMPLATE_DIR=/usr/local/chard/usr/share/git-core/templates


KERNEL_VER="6.16"
KERNEL_TAR="linux-$KERNEL_VER.tar.xz"
KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v6.x/$KERNEL_TAR"
KERNEL_BUILD="$BUILD_DIR/linux-$KERNEL_VER"

sudo mkdir -p "$BUILD_DIR"

if [ ! -f "$BUILD_DIR/$KERNEL_TAR" ]; then
    echo "${RESET}${BLUE}[+] Fetching $KERNEL_TAR..."
    sudo curl -L --progress-bar -o "$BUILD_DIR/$KERNEL_TAR" "$KERNEL_URL"
else
    echo "${RESET}${RED}[!] Kernel tarball already exists, skipping download."
fi

sudo rm -rf "$KERNEL_BUILD"
sudo tar -xf "$BUILD_DIR/$KERNEL_TAR" -C "$BUILD_DIR" \
    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"

echo "${RESET}${BLUE}[+] Installing Linux headers into Chard Root..."
sudo chroot "/usr/local/chard" /bin/bash -c "
cd /var/tmp/build/linux-$KERNEL_VER

HOST_ARCH=\$(uname -m)
case \"\$HOST_ARCH\" in
    x86_64) KERNEL_ARCH=x86_64 ;;
    aarch64) KERNEL_ARCH=arm64 ;;
    *) echo \"Unknown architecture: \$HOST_ARCH\"; exit 1 ;;
esac

make mrproper
make defconfig

make INSTALL_HDR_PATH=/usr headers_install

rm -rf /usr/src/linux
cp -a . /usr/src/linux

cp .config /usr/src/linux/.config
"

echo "${RESET}${CYAN}[+] Linux headers and sources installed to /usr/local/chard/usr/src/linux"


sudo rm -rf "$KERNEL_BUILD"

sudo mkdir -p /usr/local/chard/tmp/docbook-4.3
cd /usr/local/chard/tmp/docbook-4.3
sudo curl -L --progress-bar -o docbook-xml-4.3.zip https://www.oasis-open.org/docbook/xml/4.3/docbook-xml-4.3.zip
sudo mkdir -p "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo mkdir -p "$CHARD_ROOT/etc/xml"
sudo bsdtar -xf docbook-xml-4.3.zip -C "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo chmod -R 755 "$CHARD_ROOT/usr/share/xml/docbook/4.3"
sudo touch "$CHARD_ROOT/etc/xml/catalog"

PACKAGES=(
    "make|4.4|tar.gz|https://mirrors.kernel.org//gnu/make/make-4.4.tar.gz|make-4.4|gnu"
    "gmp|6.3.0|tar.xz|https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz|gmp-6.3.0|gnu"
    "mpfr|4.2.2|tar.xz|https://www.mpfr.org/mpfr-current/mpfr-4.2.2.tar.xz|mpfr-4.2.2|gnu"
    "binutils|2.45|tar.xz|https://mirrors.kernel.org//gnu/binutils/binutils-2.45.tar.xz|binutils-2.45|gnu"
    "diffutils|3.12|tar.xz|https://mirrors.kernel.org//gnu/diffutils/diffutils-3.12.tar.xz|diffutils-3.12|gnu"
    "openssl|3.5.2|tar.gz|https://github.com/openssl/openssl/releases/download/openssl-3.5.2/openssl-3.5.2.tar.gz|openssl-3.5.2|gnusslcore"
    "curl|8.16.0|tar.gz|https://github.com/curl/curl/releases/download/curl-8_16_0/curl-8.16.0.tar.gz|curl-8.16.0|gnussl"
    "git|2.51.0|tar.gz|https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.51.0.tar.gz|git-2.51.0|git"
    "coreutils|9.7|tar.xz|https://mirrors.kernel.org//gnu/coreutils/coreutils-9.7.tar.xz|coreutils-9.7|gnu"
    "perl|5.40.0|tar.gz|https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz|perl-5.40.0|perl-core"
    "Capture-Tiny|0.48|tar.gz|https://cpan.metacpan.org/authors/id/D/DA/DAGOLDEN/Capture-Tiny-0.48.tar.gz|Capture-Tiny-0.48|perl"
    "Try-Tiny|0.32|tar.gz|https://cpan.metacpan.org/authors/id/E/ET/ETHER/Try-Tiny-0.32.tar.gz|Try-Tiny-0.32|perl"
    "Config-AutoConf|0.320|tar.gz|https://cpan.metacpan.org/authors/id/A/AM/AMBS/Config-AutoConf-0.320.tar.gz|Config-AutoConf-0.320|perl"
    "Test-Fatal|0.017|tar.gz|https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Test-Fatal-0.017.tar.gz|Test-Fatal-0.017|perl"
    "findutils|4.10.0|tar.xz|https://mirrors.kernel.org//gnu/findutils/findutils-4.10.0.tar.xz|findutils-4.10.0|gnu"
    "python|3.13.7|tar.xz|https://www.python.org/ftp/python/3.13.7/Python-3.13.7.tar.xz|Python-3.13.7|pythongnuOOS"
    "meson|1.9.0|tar.gz|https://github.com/mesonbuild/meson/releases/download/1.9.0/meson-1.9.0.tar.gz|meson-1.9.0|python"
    "glib|2.86.0|tar.xz|https://download.gnome.org/sources/glib/2.86/glib-2.86.0.tar.xz|glib-2.86.0|meson"
    "pkg-config|0.29.2|tar.gz|https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz|pkg-config-0.29.2|gnu"
    "gtest|1.16.0|tar.gz|https://github.com/google/googletest/releases/download/v1.16.0/googletest-1.16.0.tar.gz|googletest-1.16.0|cmakegtest"
    "re2c|4.3|tar.xz|https://github.com/skvadrik/re2c/releases/download/4.3/re2c-4.3.tar.xz|re2c-4.3|gnu"
    "ninja|1.13.1|tar.gz|https://github.com/ninja-build/ninja/archive/refs/tags/v1.13.1.tar.gz|ninja-1.13.1|cmake"
    "docbook|5.0.9|zip|https://github.com/docbook/xslt10-stylesheets/releases/download/snapshot%2F2020-06-03/docbook-xsl-snapshot.zip|docbook-xsl-snapshot|docbook"
    "gtk-doc|1.34.0|tar.xz|https://download.gnome.org/sources/gtk-doc/1.34/gtk-doc-1.34.0.tar.xz|gtk-doc-1.34.0|gtk-doc"
    "zlib|1.3.1|tar.gz|https://zlib.net/zlib-1.3.1.tar.gz|zlib-1.3.1|gnu"
    "libunistring|1.3|tar.xz|https://mirrors.kernel.org//gnu/libunistring/libunistring-1.3.tar.xz|libunistring-1.3|gnu"
    "file|5.45|tar.gz|https://astron.com/pub/file/file-5.45.tar.gz|file-5.45|gnu"
    "extra-cmake-modules|6.18.0|tar.xz|https://download.kde.org/stable/frameworks/6.18/extra-cmake-modules-6.18.0.tar.xz|extra-cmake-modules-6.18.0|cmakeG"
    "File-LibMagic|1.23|tar.gz|https://cpan.metacpan.org/authors/id/D/DR/DROLSKY/File-LibMagic-1.23.tar.gz|File-LibMagic-1.23|perl"
    "libpsl|0.21.5|tar.gz|https://github.com/rockdaboot/libpsl/releases/download/0.21.5/libpsl-0.21.5.tar.gz|libpsl-0.21.5|gnussl"
    "expat|2.5.0|tar.gz|https://github.com/libexpat/libexpat/releases/download/R_2_5_0/expat-2.5.0.tar.gz|expat-2.5.0|gnu"
    "duktape|2.7.0|tar.xz|https://github.com/svaarala/duktape/releases/download/v2.7.0/duktape-2.7.0.tar.xz|duktape-2.7.0|duktape"
    "brotli|1.1.0|tar.gz|https://github.com/google/brotli/archive/refs/tags/v1.1.0.tar.gz|brotli-1.1.0|cmakeG"
)

mkdir -p "$BUILD_DIR"

sudo mkdir -p "/usr/local/chard/var/tmp/build"

cleanup_chroot() {
    echo "${RED}[+] Cleaning up Chard mounts${RESET}"
    sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
    sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
    sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
    sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
    sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
    sudo cp /usr/local/chard/chardbuild.log /home/chronos/user/MyFiles/Downloads/
}

trap cleanup_chroot EXIT INT TERM

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    ARCHIVE="$NAME-$VERSION.$EXT"

    echo "${RESET}${GREEN}[+] Downloading $URL "

    attempt=1
    while true; do
        sudo curl -L --progress-bar -o "$BUILD_DIR/$ARCHIVE" "$URL" && break

        echo "${RED}[!] Download failed for $NAME-$VERSION (attempt $attempt/$MAX_RETRIES), retrying in $RETRY_DELAY seconds..."
        (( attempt++ ))

        if (( attempt > MAX_RETRIES )); then
            echo "${BOLD}${RED}[!] Failed to download $NAME-$VERSION after $MAX_RETRIES attempts. Aborting.${RESET}"
            exit 1
        fi
        sleep $RETRY_DELAY
    done

    echo "${RESET}${YELLOW}[+] Extracting $NAME-$VERSION"
    case "$EXT" in
        tar.gz|tgz)
            sudo tar -xzf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.xz)
            sudo tar -xJf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.bz2)
            sudo tar -xjf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        zip)
            sudo bsdtar -xf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR"
            ;;
        *)
            echo "Unknown archive format: $EXT"
    esac
done

sudo tee /usr/local/chard/bin/emerge > /dev/null <<'EOF'
#!/bin/python
import os
import sys
import errno

EPYTHON = "/bin/python3"

PYEXEC_DIR = "/usr/lib/python-exec/python3.13"

target_name = os.path.basename(sys.argv[0])
target_path = os.path.join(PYEXEC_DIR, target_name)

data = None
while data is None:
    try:
        kwargs = {}
        if sys.version_info >= (3,):
            import tokenize
            with open(target_path, "rb") as f:
                kwargs["encoding"] = tokenize.detect_encoding(f.readline)[0]
        with open(target_path, "r", **kwargs) as f:
            data = f.read()
    except IOError as e:
        if e.errno == errno.EINTR:
            continue
        elif e.errno == errno.ENOENT:
            sys.stderr.write(f"{target_path}: Python implementation not supported: {EPYTHON}\n")
            sys.exit(127)
        else:
            raise

sys.argv[0] = target_path
new_globals = dict(globals())
new_globals["__file__"] = target_path

exec(data, new_globals)
EOF

sudo tee "$CHARD_ROOT/etc/portage/repos.conf/gentoo.conf" > /dev/null <<'EOF'
[gentoo]
location = /var/db/repos/gentoo
sync-type = rsync
sync-uri = rsync://rsync.gentoo.org/gentoo-portage
auto-sync = yes
EOF


 ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH"; exit 1 ;;
esac

GCC_DIR=/usr/$CHOST/gcc-bin/14

sudo tee /usr/local/chard/etc/portage/make.conf > /dev/null <<EOF
# Chard Portage make.conf
# Manually generated
COMMON_FLAGS="-O2 -pipe"
CFLAGS="-O2 -pipe"
CXXFLAGS="-O2 -pipe"
FCFLAGS="-O2 -pipe"
FFLAGS="-O2 -pipe"
LC_MESSAGES=C.utf8
DISTDIR="/var/cache/distfiles"
PKGDIR="/var/cache/packages"
PORTAGE_TMPDIR="/var/tmp"
PORTDIR="/usr/portage"
SANDBOX="/usr/bin/sandbox"
CHOST="$CHOST"
CC="$GCC_DIR/$CHOST-gcc"
CXX="$GCC_DIR/$CHOST-g++"
AR="$GCC_DIR/gcc-ar"
NM="$GCC_DIR/gcc-nm"
RANLIB="$GCC_DIR/gcc-ranlib"
STRIP="/usr/$CHOST/binutils-bin/2.44/strip"
FEATURES="assume-digests binpkg-docompress binpkg-dostrip binpkg-logs config-protect-if-modified distlocks ebuild-locks fixlafiles ipc-sandbox merge-sync multilib-strict network-sandbox news parallel-fetch pid-sandbox preserve-libs protect-owned strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersync xattr"
USE="X a52 aac acl acpi alsa amd64 bindist bluetooth branding bzip2 cairo cdda cdr cet crypt cups dbus dri dts dvd dvdr encode exif flac gdbm gif gpm gtk gui iconv icu ipv6 jpeg lcms libnotify libtirpc mad mng mp3 mp4 mpeg multilib ncurses nls ogg opengl openmp pam pango pcre pdf png policykit ppds qml qt5 qt6 readline sdl seccomp sound spell ssl startup-notification svg test-rust tiff truetype udev udisks unicode upower usb vorbis vulkan wayland wxwidgets x264 xattr xcb xft xml xv xvid zlib python_targets_python3_13 systemd -elogind"
PYTHON_TARGETS="python3_13"
PKG_CONFIG_PATH="/usr/lib/pkgconfig:/lib/pkgconfig:/usr/share/pkgconfig:/share/pkgconfig:$PKG_CONFIG_PATH"
PKG_CONFIG="/usr/bin/pkg-config"
PORTAGE_PROFILE_DIR="/usr/local/etc/portage/make.profile"
FEATURES="-sandbox -usersandbox"
EOF

PORTAGE_PROFILE_DIR=\"/usr/local/chard/usr/local/etc/portage/make.profile\"
sudo mkdir -p \"\$PORTAGE_PROFILE_DIR\"

sudo tee \"\$PORTAGE_PROFILE_DIR/parent\" > /dev/null <<'EOF'
/etc/portage/make.profile
EOF

PORTAGE_PROFILE_DIR=\"/usr/local/chard/usr/local/etc/portage/make.profile\"
sudo mkdir -p \"\$PORTAGE_PROFILE_DIR\"
sudo touch \"\$PORTAGE_PROFILE_DIR/package.provided\"

mkdir -p /usr/share/sandbox

sudo tee /usr/local/chard/etc/sandbox.conf > /dev/null <<'EOF'
SANDBOX_BASHRC="/usr/share/sandbox/sandbox.bashrc"
SANDBOX_D="/etc/sandbox.d"
ns-mount-off
ns-pid-off
ns-ipc-off
ns-net-off
ns-user-off
EOF

sudo tee "/usr/local/chard/usr/share/sandbox/sandbox.bashrc" > /dev/null <<'EOF'
export HOME="/home/chronos/user/"
export USER="chronos"
export LOGNAME="chronos"
export PATH=$GCC_DIR:/usr/bin:/bin:/usr/local/bin:$HOME/.cargo/bin:$PATH
EOF

sudo tee /usr/local/chard/usr/lib/pkgconfig/pango.pc > /dev/null <<'EOF'
prefix=/usr
includedir=${prefix}/include
libdir=${prefix}/lib

Name: Pango
Description: Internationalized text handling
Version: 1.57.0
Requires: gobject-2.0 >= 2.82, harfbuzz >= 8.4.0
Requires.private: glib-2.0 >= 2.82, gio-2.0 >= 2.82, fribidi >= 1.0.6, libthai >= 0.1.9, fontconfig >= 2.16.0, freetype2, xrender, xft >= 2.0.0, cairo >= 1.18.0, sysprof-capture-4
Libs: -L${libdir} -lpango-1.0
Libs.private: -lm
Cflags: -I${includedir}/pango-1.0
EOF

sudo tee /usr/local/chard/usr/lib/pkgconfig/pangoft2.pc > /dev/null <<'EOF'
prefix=/usr
includedir=${prefix}/include
libdir=${prefix}/lib

Name: Pango FT2 and Pango Fc
Description: FreeType 2.0 and fontconfig font support for Pango
Version: 1.57.0
Requires: pango, freetype2, fontconfig >= 2.16.0
Requires.private: glib-2.0 >= 2.82, gobject-2.0 >= 2.82, gio-2.0 >= 2.82, fribidi >= 1.0.6, libthai >= 0.1.9, harfbuzz >= 8.4.0, xrender, xft >= 2.0.0, cairo >= 1.18.0, sysprof-capture-4, harfbuzz-gobject >= 8.4.0
Libs: -L${libdir} -lpangoft2-1.0
Libs.private: -lm
Cflags: -I${includedir}/pango-1.0
EOF

sudo tee /usr/local/chard/usr/lib/pkgconfig/pangocairo.pc > /dev/null <<'EOF'
prefix=/usr
includedir=${prefix}/include
libdir=${prefix}/lib

Name: Pango Cairo
Description: Cairo rendering support for Pango
Version: 1.57.0
Requires: pango, cairo >= 1.18.0
Requires.private: pangoft2, glib-2.0 >= 2.82, gobject-2.0 >= 2.82, gio-2.0 >= 2.82, fribidi >= 1.0.6, libthai >= 0.1.9, harfbuzz >= 8.4.0, fontconfig >= 2.16.0, freetype2, xrender, xft >= 2.0.0, sysprof-capture-4, harfbuzz-gobject >= 8.4.0
Libs: -L${libdir} -lpangocairo-1.0
Libs.private: -lm
Cflags: -I${includedir}/pango-1.0
EOF

sudo tee /usr/local/chard/usr/lib/pkgconfig/gtk+-3.0.pc > /dev/null <<'EOF'
prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir=${prefix}/include/gtk-3.0

Name: GTK+
Description: GTK+ Graphical UI Library
Version: 3.24.50

Requires: gdk-3.0 >= 3.24.0, atk >= 2.35.1, cairo >= 1.14.0, cairo-gobject >= 1.14.0, gdk-pixbuf-2.0 >= 2.30.0, gio-2.0 >= 2.57.2, pango >= 1.50.0

Requires.private: atk-bridge-2.0, wayland-client >= 1.14.91, xkbcommon >= 0.2.0, wayland-cursor >= 1.14.91, wayland-egl, epoxy >= 1.4, fribidi >= 0.19.7, pangoft2, gio-unix-2.0 >= 2.57.2

Libs: -L${libdir} -lgtk-3
Cflags: -I${includedir}
EOF

sudo tee /usr/local/chard/usr/lib/pkgconfig/gdk-pixbuf-2.0.pc > /dev/null <<'EOF'
prefix=/usr
bindir=${prefix}/bin
includedir=${prefix}/include
libdir=${prefix}/lib

gdk_pixbuf_binary_version=2.10.0
gdk_pixbuf_binarydir=${libdir}/gdk-pixbuf-2.0/2.10.0
gdk_pixbuf_moduledir=${gdk_pixbuf_binarydir}/loaders
gdk_pixbuf_cache_file=${gdk_pixbuf_binarydir}/loaders.cache
gdk_pixbuf_csource=${bindir}/gdk-pixbuf-csource
gdk_pixbuf_pixdata=${bindir}/gdk-pixbuf-pixdata
gdk_pixbuf_query_loaders=${bindir}/gdk-pixbuf-query-loaders

Name: GdkPixbuf
Description: Image loading and scaling
Version: 2.44.2
Requires: gobject-2.0 >=  2.56.0
Libs: -L${libdir} -lgdk_pixbuf-2.0
Libs.private: -lm
Cflags: -I${includedir}/gdk-pixbuf-2.0
EOF

sudo mkdir -p "$CHARD_ROOT/usr/lib/pkgconfig"

sudo tee "$CHARD_ROOT/usr/lib/pkgconfig/duktape.pc" > /dev/null <<'EOF'
prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib64
includedir=${prefix}/include

Name: duktape
Description: Embeddable Javascript engine
Version: 2.7.0
Libs: -L${libdir} -lduktape
Cflags: -I${includedir}/duktape
EOF

sudo tee "$CHARD_ROOT/usr/lib/pkgconfig/malcontent-0.pc" > /dev/null <<'EOF'
prefix=/usr
exec_prefix=${prefix}
libdir=${prefix}/lib
includedir=${prefix}/include

Name: malcontent-0
Description: Dummy malcontent-0 for Meson build
Version: 0.13.1
Requires: 
Libs: -L${libdir} -lmalcontent-ui-1
Cflags: -I${includedir}/malcontent-ui-1
EOF

ARCH=$(uname -m)

case "$ARCH" in
    x86_64)
        sudo tee "$CHARD_ROOT/mesonrust.ini" > /dev/null <<'EOF'
[binaries]
c = 'gcc'
cpp = 'g++'
ar = 'ar'
strip = 'strip'
pkgconfig = 'pkg-config'
cargo = '/home/chronos/user/.cargo/bin/cargo'
rust = '/home/chronos/user/.cargo/bin/rustc'

[properties]
rust_target = 'x86_64-pc-linux-gnu'

[host_machine]
system = 'linux'
cpu_family = 'x86_64'
cpu = 'x86_64'
endian = 'little'
EOF
        ;;
    aarch64|arm64)
        sudo tee "$CHARD_ROOT/mesonrust.ini" > /dev/null <<'EOF'
[binaries]
c = 'gcc'
cpp = 'g++'
ar = 'ar'
strip = 'strip'
pkgconfig = 'pkg-config'
cargo = '/home/chronos/user/.cargo/bin/cargo'
rust = '/home/chronos/user/.cargo/bin/rustc'

[properties]
rust_target = 'aarch64-unknown-linux-gnu'

[host_machine]
system = 'linux'
cpu_family = 'aarch64'
cpu = 'aarch64'
endian = 'little'
EOF
        ;;
    *)
        echo "Unsupported architecture: $ARCH"
        exit 1
        ;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        CHOST=x86_64-pc-linux-gnu
        PROFILE_DIR="$CHARD_ROOT/var/db/repos/gentoo/profiles/default/linux/amd64/17.1"
        ;;
    aarch64)
        CHOST=aarch64-unknown-linux-gnu
        PROFILE_DIR="$CHARD_ROOT/var/db/repos/gentoo/profiles/default/linux/arm64/17.1"
        ;;
    *)
        echo "Unknown architecture: $ARCH"
        exit 1
        ;;
esac

sudo mkdir -p "$CHARD_ROOT/var/db/repos/gentoo/profiles"
sudo mkdir -p "$PROFILE_DIR"

sudo tee "$CHARD_ROOT/var/db/repos/gentoo/profiles/repo_name" > /dev/null <<'EOF'
gentoo
EOF

# Optional: create empty parent file to avoid profile warnings
sudo touch "$PROFILE_DIR/parent"


echo "Created $CHARD_ROOT/mesonrust.ini for $ARCH"

echo "${RED}Created $CHARD_ROOT/usr/local/chard/mesonrust.ini${RESET}"

echo "${RESET}${GREEN}[+] Mounting Chard Chroot${RESET}"
sudo cp /etc/resolv.conf /usr/local/chard/etc/resolv.conf
mountpoint -q "/usr/local/chard/proc"    || sudo mount -t proc proc "/usr/local/chard/proc"
mountpoint -q "/usr/local/chard/sys"     || sudo mount -t sysfs sys "/usr/local/chard/sys"
mountpoint -q "/usr/local/chard/dev"     || sudo mount --bind /dev "/usr/local/chard/dev"
mountpoint -q "/usr/local/chard/dev/shm" || sudo mount --bind /dev/shm "/usr/local/chard/dev/shm"
mountpoint -q "/usr/local/chard/etc/ssl" || sudo mount --bind /etc/ssl /usr/local/chard/etc/ssl

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"    
    echo "${GREEN}[+] Building $NAME-$VERSION in chroot"

    sudo chroot "/usr/local/chard" /bin/bash -c '
    DIR="'"$DIR"'"
    BUILDSYS="'"$BUILDSYS"'"
    
    cd /var/tmp/build/"$DIR"
    
    ARCH=$(uname -m)
    case "$ARCH" in
        x86_64) CHOST=x86_64-pc-linux-gnu ;;
        aarch64) CHOST=aarch64-unknown-linux-gnu ;;
        *) echo "Unknown architecture: $ARCH" ;;
    esac
    
    GCC_DIR=/usr/$CHOST/gcc-bin/14
    export HOME=/home/chronos/user
    export MAGIC="/usr/share/misc/magic.mgc"
    export CC=$GCC_DIR/$CHOST-gcc
    export CXX=$GCC_DIR/$CHOST-g++
    export AR=$GCC_DIR/gcc-ar
    export RANLIB=$GCC_DIR/$CHOST-gcc-ranlib
    export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin:$HOME/.cargo/bin:$PATH
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/lib:/lib64:/usr/lib:/usr/lib64:$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib:/usr/local/lib:/usr/local/lib64:/usr/lib/gcc/$CHOST/14"
    export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:$PERL5LIB
    export PKG_CONFIG=/usr/bin/pkg-config
    export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:$PKG_CONFIG_PATH
    export PYTHON="/bin/python3"
    export FORCE_UNSAFE_CONFIGURE=1
    export XDG_DATA_DIRS="/usr/share:/usr/local/share"
    export CFLAGS="-O2 -pipe -fPIC -I/usr/include"
    export CXXFLAGS="-O2 -pipe -fPIC -I/usr/include"
    export LDFLAGS="-L/usr/lib"
    export GI_TYPELIB_PATH=/usr/lib64/girepository-1.0:${GI_TYPELIB_PATH:-}
    export CARGO_HOME="$HOME/.cargo"
    export RUSTUP_HOME="$HOME/.rustup"
    export GIT_TEMPLATE_DIR=/usr/share/git-core/templates
    #export PYEXEC="/usr/lib/python-exec"
    #export PYVER="python3.13"
    #export PYEXEC_DIR="$PYEXEC/$PYVER"
    #export PORTAGE_PROFILE_DIR="$CHARD_ROOT/etc/portage/make.profile"
    
     case "$BUILDSYS" in
        gnu)
            ./configure --prefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        git)
            ./configure --prefix=/usr --with-curl
            make -j"$(nproc)"
            make install
            ;;
        gnuqt)
            ./configure -prefix /usr \
                        -release \
                        -opensource -confirm-license \
                        -nomake examples -nomake tests \
                        -system-zlib \
                        -system-libjpeg -system-libpng \
                        -system-freetype \
                        -system-harfbuzz \
                        -system-pcre2
            make -j"$(nproc)"
            make install
            ;;
        glibcgnuOOS)
            cd /var/tmp/build
            mkdir -p build-glibc-2.42
            cd build-glibc-2.42
            ../glibc-2.42/configure --prefix=/usr \
                                    --disable-werror \
                                    --enable-kernel=5.4
            make -j"$(nproc)"
            make install
            ;;
        pythongnuOOS)
            cd /var/tmp/build
            mkdir -p build-Python-3.13.7
            cd build-Python-3.13.7
            ../Python-3.13.7/configure --prefix=/usr \
                                       --enable-optimizations \
                                       --with-lto \
                                       --with-openssl=/usr
            make -j"$(nproc)"
            make install
            rm /usr/bin/emerge
            ln -s /usr/lib/python-exec/python3.13/emerge /usr/bin/emerge

            ;;
        perl)
            perl Makefile.PL INSTALL_BASE=/usr/local
            make
            make test || true
            make install
            ;;
        perl-core)
            sh Configure -des -Dprefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        cmake)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakeGLS)
            cmake -S glslang -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakeG)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakejxl)
            cd /var/tmp/build/libjxl-0.11.1
            sh deps.sh
        
            mkdir -p build
            cd build
        
            cmake .. \
                -DCMAKE_INSTALL_PREFIX=/usr \
                -DJPEGXL_ENABLE_BENCHMARKS=OFF \
                -DJPEGXL_ENABLE_TOOLS=ON \
                -DJPEGXL_ENABLE_JPEG=OFF \
                -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        
            make -j"$(nproc)"
            make install
            ;;
        cmakeOpenGL)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DFEATURE_opengl=desktop
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakegtest)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakeGhighway)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        meson)
            meson setup build --prefix=/usr
            ninja -C build
            ninja -C build install
            ;;
        mesonmesa)
            meson setup build \
              --prefix=/usr \
              -Dplatforms=x11,wayland \
              -Degl=true \
              -Dopengl=true \
              -Dgallium-drivers=swrast
            ninja -C build
            ninja -C build install
            ;;
         mesonpix)
            meson setup build --prefix=/usr -Dglycin=disabled
            ninja -C build
            ninja -C build install
            ;;
        mesonrust)
            meson setup build --prefix=/usr --buildtype=release \
                --native-file=/mesonrust.ini \
                -Ddefault_library=shared
            ninja -C build
            ninja -C build install
            ;;
        mesongvdb)
            cd /var/tmp/build/gvdb-main/gvdb-main
            meson setup build --prefix=/usr
            ninja -C build
            ninja -C build install
            ;;
        gtk-doc)
            cd /var/tmp/build/"$DIR"
            chmod +x autogen.sh
            ./autogen.sh --prefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        python)
            cd /var/tmp/build/"$DIR"
            /usr/bin/python setup.py build
            /usr/bin/python setup.py install --prefix=/usr
            ;;
        pythonbuild)
            cd /var/tmp/build/"$DIR"
            /usr/bin/python3.13 -m pip install . --prefix=/usr
            ;;
        cmakepython)
            cd /var/tmp/build/"$DIR"
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr/local/chard/usr -DCMAKE_BUILD_TYPE=Release
            cmake --build build -j"$(nproc)"
            cmake --install build
            /usr/bin/python setup.py build
            /usr/bin/python setup.py install --prefix=/usr
            ;;
        libcap)
            make -j"$(nproc)" prefix=/usr
            make test || true
            make install prefix=/usr
            ;;
        icu)
            cd /var/tmp/build/icu/source/
            chmod +x runConfigureICU configure install-sh
            ./runConfigureICU Linux --prefix=/usr --disable-dependency-tracking
            make -j"$(nproc)"
            make install
            ;;
        gnussl)
            ./configure --prefix=/usr --with-ssl=/usr
            make -j"$(nproc)"
            make install
            ;;
        gnusslcore)
            ./Configure --prefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        duktape)
            cd /var/tmp/build/"$DIR"
            make -f Makefile.sharedlibrary -j"$(nproc)"
            make -f Makefile.static -j"$(nproc)"
            mkdir -p /usr/include/duktape /usr/lib /usr/lib64
            cp src/duktape.h /usr/include/duktape/
            cp src/duk_config.h /usr/include/duktape/
            cp src/duktape.c /usr/include/duktape/
            cp src/duk_source_meta.json /usr/include/duktape/
            cp libduktape.so* /usr/lib/
            cp libduktape.so* /usr/lib64/
            cp libduktape.a /usr/lib/
            cp libduktape.a /usr/lib64/
            cp /usr/lib/pkgconfig/duktape.pc /usr/lib64/pkgconfig/
            cd /usr/lib
            ln -sf libduktape.so.* libduktape.so 2>/dev/null || true
            cd /usr/lib64
            ln -sf libduktape.so.* libduktape.so 2>/dev/null || true
            ldconfig
            mkdir -p /tmp
            curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rustup-init.sh
            sh /tmp/rustup-init.sh -y --no-modify-path --default-toolchain stable
            ;;
        asyncns86)
            [ -d /usr/lib/x86_64-linux-gnu ] && cp libasyncns.so.0.3.1 libasyncns.so.0 /usr/lib/x86_64-linux-gnu/
            ;;
        asyncnsARM64)
            [ -d /usr/lib/aarch64-linux-gnu ] && cp libasyncns.so.0.3.1 libasyncns.so.0 /usr/lib/aarch64-linux-gnu/
            ;;
        docbook)
            mkdir -p /usr/local/share/xml/docbook-xsl
            cp -r /var/tmp/build/"$DIR" /usr/local/share/xml/docbook-xsl/"$DIR"
            cd /usr/local/share/xml/docbook-xsl/"$DIR"
            chmod +x install.sh
            printf "Y\n" | ./install.sh --batch
            xmlcatalog --noout --add "public" "-//OASIS//DTD DocBook V5.0//EN" /usr/share/xml/docbook/5.0/catalog.xml 2>/dev/null
            ;;
        *)
            echo "Unknown build system: $BUILDSYS"
            exit 1
            ;;
    esac
    '

    echo
    echo "${RESET}${MAGENTA}[+] Finished building $NAME-$VERSION${RESET}"
        
    if [ "$NAME" = "make" ] && [ -L "/usr/local/chard/usr/bin/make" ]; then
        sudo rm -f "/usr/local/chard/usr/bin/make"
        sudo cp /usr/local/make "/usr/local/chard/usr/bin/make"
        echo "${GREEN}[+] Replaced symlink with real make binary in Chard Root${RESET}"
    fi

done

sudo rm -rf "$BUILD_DIR"
sleep 2

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH" ;;
esac

GCC_DIR="/usr/local/chard/usr/$CHOST/gcc-bin/14"
export PYTHON="/usr/local/chard/bin/python3"
export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:/usr/local/chard/usr/bin"
export CXXFLAGS="$CFLAGS"
export AWK=/usr/bin/mawk
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/usr/lib64"
export MAKEFLAGS="-j$(nproc)"
export INSTALL_ROOT="/usr/local/chard"
export ACLOCAL_PATH="/usr/local/chard/usr/share/aclocal"
export PYTHONPATH="/usr/local/chard/usr/lib/python3.*/site-packages:$PYTHONPATH"
export PKG_CONFIG_PATH=/usr/local/chard/usr/lib64/pkgconfig:/usr/local/chard/usr/lib/pkgconfig
export CFLAGS="-I/usr/local/chard/usr/include $CFLAGS"
export LDFLAGS="-L/usr/local/chard/usr/lib64 -L/usr/local/chard/usr/lib $LDFLAGS"
export GIT_TEMPLATE_DIR=/usr/local/chard/usr/share/git-core/templates

PACKAGES=(
    "openssl|3.5.2|tar.gz|https://github.com/openssl/openssl/releases/download/openssl-3.5.2/openssl-3.5.2.tar.gz|openssl-3.5.2|gnusslcore"
    "curl|8.16.0|tar.gz|https://github.com/curl/curl/releases/download/curl-8_16_0/curl-8.16.0.tar.gz|curl-8.16.0|gnussl"
    "git|2.51.0|tar.gz|https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.51.0.tar.gz|git-2.51.0|git"
    "duktape|2.7.0|tar.xz|https://github.com/svaarala/duktape/releases/download/v2.7.0/duktape-2.7.0.tar.xz|duktape-2.7.0|duktape"
)

mkdir -p "$BUILD_DIR"

sudo mkdir -p "/usr/local/chard/var/tmp/build"

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    ARCHIVE="$NAME-$VERSION.$EXT"

    echo "${RESET}${GREEN}[+] Downloading $URL "

    attempt=1
    while true; do
        sudo curl -L --progress-bar -o "$BUILD_DIR/$ARCHIVE" "$URL" && break

        echo "${RED}[!] Download failed for $NAME-$VERSION (attempt $attempt/$MAX_RETRIES), retrying in $RETRY_DELAY seconds..."
        (( attempt++ ))

        if (( attempt > MAX_RETRIES )); then
            echo "${BOLD}${RED}[!] Failed to download $NAME-$VERSION after $MAX_RETRIES attempts. Aborting.${RESET}"
            exit 1
        fi
        sleep $RETRY_DELAY
    done

    echo "${RESET}${YELLOW}[+] Extracting $NAME-$VERSION"
    case "$EXT" in
        tar.gz|tgz)
            sudo tar -xzf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.xz)
            sudo tar -xJf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.bz2)
            sudo tar -xjf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        zip)
            sudo bsdtar -xf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR"
            ;;
        *)
            echo "Unknown archive format: $EXT"
    esac
done

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"    
    echo "${GREEN}[+] Building $NAME-$VERSION in chroot"

    sudo chroot "/usr/local/chard" /bin/bash -c '
    DIR="'"$DIR"'"
    BUILDSYS="'"$BUILDSYS"'"
    
    cd /var/tmp/build/"$DIR"
    
    ARCH=$(uname -m)
    case "$ARCH" in
        x86_64) CHOST=x86_64-pc-linux-gnu ;;
        aarch64) CHOST=aarch64-unknown-linux-gnu ;;
        *) echo "Unknown architecture: $ARCH" ;;
    esac
    
    GCC_DIR=/usr/$CHOST/gcc-bin/14
    export HOME=/home/chronos/user
    export MAGIC="/usr/share/misc/magic.mgc"
    export CC=$GCC_DIR/$CHOST-gcc
    export CXX=$GCC_DIR/$CHOST-g++
    export AR=$GCC_DIR/gcc-ar
    export RANLIB=$GCC_DIR/$CHOST-gcc-ranlib
    export PATH=/usr/$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin:$HOME/.cargo/bin:$PATH
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/lib:/lib64:/usr/lib:/usr/lib64:$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib:/usr/local/lib:/usr/local/lib64:/usr/lib/gcc/$CHOST/14"
    export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:$PERL5LIB
    export PKG_CONFIG=/usr/bin/pkg-config
    export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:$PKG_CONFIG_PATH
    export PYTHON="/bin/python3"
    export FORCE_UNSAFE_CONFIGURE=1
    export XDG_DATA_DIRS="/usr/share:/usr/local/share"
    export CFLAGS="-O2 -pipe -fPIC -I/usr/include"
    export CXXFLAGS="-O2 -pipe -fPIC -I/usr/include"
    export LDFLAGS="-L/usr/lib"
    export GI_TYPELIB_PATH=/usr/lib64/girepository-1.0:${GI_TYPELIB_PATH:-}
    export CARGO_HOME="$HOME/.cargo"
    export RUSTUP_HOME="$HOME/.rustup"
    export GIT_TEMPLATE_DIR=/usr/share/git-core/templates
    export PORTAGE_PROFILE_DIR="/usr/local/etc/portage/make.profile"
    
     case "$BUILDSYS" in
        gnu)
            ./configure --prefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        git)
            ./configure --prefix=/usr --with-curl
            make -j"$(nproc)"
            make install
            ;;
        gnuqt)
            ./configure -prefix /usr \
                        -release \
                        -opensource -confirm-license \
                        -nomake examples -nomake tests \
                        -system-zlib \
                        -system-libjpeg -system-libpng \
                        -system-freetype \
                        -system-harfbuzz \
                        -system-pcre2
            make -j"$(nproc)"
            make install
            ;;
        glibcgnuOOS)
            cd /var/tmp/build
            mkdir -p build-glibc-2.42
            cd build-glibc-2.42
            ../glibc-2.42/configure --prefix=/usr \
                                    --disable-werror \
                                    --enable-kernel=5.4
            make -j"$(nproc)"
            make install
            ;;
        pythongnuOOS)
            cd /var/tmp/build
            mkdir -p build-Python-3.13.7
            cd build-Python-3.13.7
            ../Python-3.13.7/configure --prefix=/usr \
                                       --enable-optimizations \
                                       --with-lto \
                                       --with-openssl=/usr
            make -j"$(nproc)"
            make install
            ;;
        perl)
            perl Makefile.PL INSTALL_BASE=/usr/local
            make
            make test || true
            make install
            ;;
        perl-core)
            sh Configure -des -Dprefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        cmake)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakeGLS)
            cmake -S glslang -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakeG)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakejxl)
            cd /var/tmp/build/libjxl-0.11.1
            sh deps.sh
        
            mkdir -p build
            cd build
        
            cmake .. \
                -DCMAKE_INSTALL_PREFIX=/usr \
                -DJPEGXL_ENABLE_BENCHMARKS=OFF \
                -DJPEGXL_ENABLE_TOOLS=ON \
                -DJPEGXL_ENABLE_JPEG=OFF \
                -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        
            make -j"$(nproc)"
            make install
            ;;
        cmakeOpenGL)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DFEATURE_opengl=desktop
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakegtest)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        cmakeGhighway)
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DBUILD_GMOCK=OFF
            cmake --build build -j"$(nproc)"
            cmake --install build
            ;;
        meson)
            meson setup build --prefix=/usr
            ninja -C build
            ninja -C build install
            ;;
        mesonmesa)
            meson setup build \
              --prefix=/usr \
              -Dplatforms=x11,wayland \
              -Degl=true \
              -Dopengl=true \
              -Dgallium-drivers=swrast
            ninja -C build
            ninja -C build install
            ;;
         mesonpix)
            meson setup build --prefix=/usr -Dglycin=disabled
            ninja -C build
            ninja -C build install
            ;;
        mesonrust)
            meson setup build --prefix=/usr --buildtype=release \
                --native-file=/mesonrust.ini \
                -Ddefault_library=shared
            ninja -C build
            ninja -C build install
            ;;
        mesongvdb)
            cd /var/tmp/build/gvdb-main/gvdb-main
            meson setup build --prefix=/usr
            ninja -C build
            ninja -C build install
            ;;
        gtk-doc)
            cd /var/tmp/build/"$DIR"
            chmod +x autogen.sh
            ./autogen.sh --prefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        python)
            cd /var/tmp/build/"$DIR"
            /usr/bin/python setup.py build
            /usr/bin/python setup.py install --prefix=/usr
            ;;
        pythonbuild)
            cd /var/tmp/build/"$DIR"
            /usr/bin/python3.13 -m pip install . --prefix=/usr
            ;;
        cmakepython)
            cd /var/tmp/build/"$DIR"
            cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr/local/chard/usr -DCMAKE_BUILD_TYPE=Release
            cmake --build build -j"$(nproc)"
            cmake --install build
            /usr/bin/python setup.py build
            /usr/bin/python setup.py install --prefix=/usr
            ;;
        libcap)
            make -j"$(nproc)" prefix=/usr
            make test || true
            make install prefix=/usr
            ;;
        icu)
            cd /var/tmp/build/icu/source/
            chmod +x runConfigureICU configure install-sh
            ./runConfigureICU Linux --prefix=/usr --disable-dependency-tracking
            make -j"$(nproc)"
            make install
            ;;
        gnussl)
            ./configure --prefix=/usr --with-ssl=/usr
            make -j"$(nproc)"
            make install
            ;;
        gnusslcore)
            ./Configure --prefix=/usr
            make -j"$(nproc)"
            make install
            ;;
        duktape)
            curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs -o /tmp/rustup-init.sh
            sh /tmp/rustup-init.sh -y --no-modify-path --default-toolchain stable
            curl -sS https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3 get-pip.py --prefix=/usr
            ;;
        asyncns86)
            [ -d /usr/lib/x86_64-linux-gnu ] && cp libasyncns.so.0.3.1 libasyncns.so.0 /usr/lib/x86_64-linux-gnu/
            ;;
        asyncnsARM64)
            [ -d /usr/lib/aarch64-linux-gnu ] && cp libasyncns.so.0.3.1 libasyncns.so.0 /usr/lib/aarch64-linux-gnu/
            ;;
        docbook)
            mkdir -p /usr/local/share/xml/docbook-xsl
            cp -r /var/tmp/build/"$DIR" /usr/local/share/xml/docbook-xsl/"$DIR"
            cd /usr/local/share/xml/docbook-xsl/"$DIR"
            chmod +x install.sh
            printf "Y\n" | ./install.sh --batch
            xmlcatalog --noout --add "public" "-//OASIS//DTD DocBook V5.0//EN" /usr/share/xml/docbook/5.0/catalog.xml 2>/dev/null
            ;;
        *)
            echo "Unknown build system: $BUILDSYS"
            exit 1
            ;;
    esac
    '

    echo
    echo "${RESET}${MAGENTA}[+] Finished building $NAME-$VERSION${RESET}"
        
done

echo "${RED}[+] Cleaning up${RESET}"
sudo umount -l "/usr/local/chard/dev/shm"       2>/dev/null || true
sudo umount -l "/usr/local/chard/dev"           2>/dev/null || true
sudo umount -l "/usr/local/chard/sys"           2>/dev/null || true
sudo umount -l "/usr/local/chard/proc"          2>/dev/null || true
sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true

sudo rm -rf "$BUILD_DIR"

sudo chmod +x "$CHARD_ROOT/bin/emerge"
sudo chown -R 1000:1000 "/usr/local/chard"
sudo cp /usr/local/chard/chardbuild.log /home/chronos/user/MyFiles/Downloads/
echo "${BLUE}${BOLD}chardbuild.log${RESET}${BLUE} copied to Downloads folder for viewing."
curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.preload -o "/usr/local/chard/.chard.preload"
echo "${RESET}${YELLOW}make.conf successfully updated for Chard.${RESET}"
echo "${BLUE}Setting up Emerge!${RESET}"

sudo chroot /usr/local/chard /bin/bash -c '

            mountpoint -q /proc    || mount -t proc proc /proc
            mountpoint -q /sys     || mount -t sysfs sys /sys
            mountpoint -q /dev || mount -t devtmpfs devtmpfs /dev
            mountpoint -q /dev/shm || mount -t tmpfs tmpfs /dev/shm
            mountpoint -q /dev/pts || mount -t devpts devpts /dev/pts
            mountpoint -q /etc/ssl || mount --bind /etc/ssl /etc/ssl
            [ -e /dev/null ] || mknod -m 666 /dev/null c 1 3
            [ -e /dev/tty  ] || mknod -m 666 /dev/tty  c 5 0
            [ -e /dev/random ] || mknod -m 666 /dev/random c 1 8
            [ -e /dev/urandom ] || mknod -m 666 /dev/urandom c 1 9

    [ -e /dev/null    ] || mknod -m 666 /dev/null c 1 3
    [ -e /dev/tty     ] || mknod -m 666 /dev/tty c 5 0
    [ -e /dev/random  ] || mknod -m 666 /dev/random c 1 8
    [ -e /dev/urandom ] || mknod -m 666 /dev/urandom c 1 9

    ARCH=$(uname -m)
    case "$ARCH" in
        x86_64)  CHOST=x86_64-pc-linux-gnu ;;
        aarch64) CHOST=aarch64-unknown-linux-gnu ;;
        *) echo "Unknown architecture: $ARCH"; exit 1 ;;
    esac

    GCC_DIR=/usr/$CHOST/gcc-bin/14

    export HOME=/home/chronos/user
    export MAGIC="/usr/share/misc/magic.mgc"
    export CC=$GCC_DIR/$CHOST-gcc
    export CXX=$GCC_DIR/$CHOST-g++
    export AR=$GCC_DIR/gcc-ar
    export RANLIB=$GCC_DIR/$CHOST-gcc-ranlib
    export PATH=$GCC_DIR:/usr/bin:/bin:/usr/local/bin:$HOME/.cargo/bin
    export LD_LIBRARY_PATH="/lib:/lib64:/usr/lib:/usr/lib64:$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib:/usr/local/lib:/usr/local/lib64:/usr/lib/gcc/$CHOST/14${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
    export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:$PERL5LIB
    export PKG_CONFIG=/usr/bin/pkg-config
    export PKG_CONFIG_PATH=/usr/lib/pkgconfig:/usr/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:$PKG_CONFIG_PATH
    export PYTHON="/bin/python3"
    export FORCE_UNSAFE_CONFIGURE=1
    export XDG_DATA_DIRS="/usr/share:/usr/local/share"
    export CFLAGS="-O2 -pipe -fPIC -I/usr/include"
    export CXXFLAGS="-O2 -pipe -fPIC -I/usr/include"
    export LDFLAGS="-L/usr/lib"
    export GI_TYPELIB_PATH=/usr/lib64/girepository-1.0:${GI_TYPELIB_PATH:-}
    export CARGO_HOME="$HOME/.cargo"
    export RUSTUP_HOME="$HOME/.rustup"
    export GIT_TEMPLATE_DIR=/usr/share/git-core/templates
    export PORTAGE_PROFILE_DIR="/usr/local/etc/portage/make.profile"
    export PORTAGE_LOGDIR="/var/log/portage"
    export PORTAGE_CONFIGROOT="/"
    export PORTAGE_TMPDIR="/var/tmp"

    emerge --sync && \
    emerge --verbose --update --deep --newuse @world --ask=n && \
    emerge -1 dev-lang/perl --ask=n && \
    emerge -1 sys-apps/systemd --ask=n && \
    emerge --verbose --with-bdeps=y flatpak --ask=n

    umount /etc/ssl
    umount /dev/pts
    umount /dev/shm
    umount /dev
    umount /sys
    umount /proc
'

echo "${GREEN}[+] Chard Root ready to run!"
echo "[!] To run, please open a new shell or run:"
echo "${RESET}${BOLD}${RED}source /home/chronos/user/.bashrc${RESET}"
show_progress
