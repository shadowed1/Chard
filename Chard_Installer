#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
sed -i '/# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' ~/.bashrc
set -e
CHARD_ROOT="/usr/local/bin/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"

echo "[+] Creating Chard group and directories..."

sudo mkdir -p "$CHARD_ROOT"/{etc/portage,usr/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp}
echo "[+] Downloading chard configuration files..."
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/chard.logic"
mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "[+] Chard sourced to ~/.bashrc"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        GENTOO_ARCH="amd64"
        CHOST="x86_64-pc-linux-gnu"
        ;;
    i*86)
        GENTOO_ARCH="x86"
        CHOST="i686-pc-linux-gnu"
        ;;
    aarch64)
        GENTOO_ARCH="arm64"
        CHOST="aarch64-unknown-linux-gnu"
        ;;
    armv7l)
        GENTOO_ARCH="arm"
        CHOST="armv7a-unknown-linux-gnueabihf"
        ;;
    ppc64le)
        GENTOO_ARCH="ppc64le"
        CHOST="powerpc64le-unknown-linux-gnu"
        ;;
    *)
        echo "Unknown architecture: $ARCH"
        exit 1
        ;;
esac

CHARD_ROOT="/usr/local/bin/chard"
MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"

echo "[+] Writing $MAKE_CONF..."
sudo mkdir -p "$(dirname "$MAKE_CONF")"

sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST='${CHOST}'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF



echo "[+] make.conf created with ARCH=${GENTOO_ARCH}"

PORTAGE_DIR="$CHARD_ROOT/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="$CHARD_ROOT/var/tmp/portage-latest.tar.xz"

echo "[+] Downloading Portage tree snapshot..."
sudo curl -L -o "$TMP_TAR" "$SNAPSHOT_URL"

echo "[+] Extracting snapshot into $PORTAGE_DIR..."
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1
sudo rm -f "$TMP_TAR"

case "$GENTOO_ARCH" in
    amd64)
        STAGE3_URL="https://gentoo.osuosl.org/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-20250831T170358Z.tar.xz"
        ;;
    arm64)
        STAGE3_URL="https://gentoo.osuosl.org/releases/arm64/autobuilds/current-stage3-arm64-systemd/stage3-arm64-systemd-20250831T234929Z.tar.xz"
        ;;
    *)
        echo "Unsupported architecture: $GENTOO_ARCH"
        exit 1
        ;;
esac

STAGE3_FILE=$(basename "$STAGE3_URL")
sudo mkdir -p "$BUILD_DIR"

TMP_STAGE3="$CHARD_ROOT/var/tmp/$STAGE3_FILE"
sudo echo "[+] Downloading stage3 tarball..."
sudo curl -L -o "$TMP_STAGE3" "$STAGE3_URL"

echo "[+] Extracting stage3 into $CHARD_ROOT..."
sudo tar -xJf "$TMP_STAGE3" -C "$CHARD_ROOT" --strip-components=1
sudo rm -f "$TMP_STAGE3"

PROFILE_BASE="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH"
PROFILE_CANDIDATE=$(find "$PROFILE_BASE" -maxdepth 3 -type d -name "systemd" | sort | tail -n1)
if [ -n "$PROFILE_CANDIDATE" ]; then
    REL_TARGET=$(realpath --relative-to="$CHARD_ROOT/etc/portage" "$PROFILE_CANDIDATE")
   sudo ln -sfn "$REL_TARGET" "$CHARD_ROOT/etc/portage/.profile"
    echo "[+] Profile set to ${PROFILE_CANDIDATE#$PROFILE_BASE/}"
else
    echo "${YELLOW}[!] No systemd profile found under $PROFILE_BASE"
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo chmod +x "$CHARD_ROOT/bin/chard"

export CC="$CHARD_ROOT/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-gcc"
export CXX="$CHARD_ROOT/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-g++"
export AR="$CHARD_ROOT/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-ar"
export NM="$CHARD_ROOT/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-nm"
export RANLIB="$CHARD_ROOT/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-gcc-ranlib"
export PATH="$PATH:$CHARD_ROOT/usr/x86_64-pc-linux-gnu/gcc-bin/14:$CHARD_ROOT/usr/bin"
export CFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
export LDFLAGS="-L$CHARD_ROOT/usr/lib"
MPFR_CFLAGS="-I$CHARD_ROOT/usr/include"
MPFR_LIBS="$CHARD_ROOT/usr/lib/libmpfr.a $CHARD_ROOT/usr/lib/libgmp.a -lm"
export AWK=/usr/bin/mawk

echo "[+] Exporting compiler paths"

echo "[+] Installing GNU Make inside temporary chroot"

CHROOT_DIR="$CHARD_ROOT/chroot"
BUILD_DIR="$CHARD_ROOT/var/tmp/build"
MAKE_VERSION="4.4"
MAKE_TAR="make-$MAKE_VERSION.tar.gz"
MAKE_URL="https://ftp.gnu.org/gnu/make/$MAKE_TAR"

sudo mkdir -p "$CHROOT_DIR"
sudo rsync -a --exclude 'chroot' "$CHARD_ROOT/" "$CHROOT_DIR/"
sudo mkdir -p "$CHROOT_DIR/var/tmp/build"

sudo mount -t proc none "$CHROOT_DIR/proc"
sudo mount -t sysfs none "$CHROOT_DIR/sys"
sudo mount --bind /dev "$CHROOT_DIR/dev"
sudo mount --bind /dev/shm "$CHROOT_DIR/dev/shm"
sudo mount --bind "$CHROOT_DIR/usr/include" "$CHROOT_DIR/usr/include"
sudo mount --bind "$CHROOT_DIR/usr/lib" "$CHROOT_DIR/usr/lib"

sudo chroot --userspec=1000:1000 "$CHROOT_DIR" /bin/bash -c "
set -e
cd /var/tmp/build
echo '[+] Downloading GNU Make $MAKE_VERSION...'
sudo curl -fsSL $MAKE_URL -o $MAKE_TAR
sudo tar -xf $MAKE_TAR

cd make-$MAKE_VERSION

export PATH=/usr/bin:/bin:/usr/local/bin
export CC=/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-gcc
export CXX=/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-g++
export AR=/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-ar
export RANLIB=/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'

echo '[+] Configuring Make...'
./configure --prefix=/usr --disable-dependency-tracking

echo '[+] Building Make...'
make -j\$(nproc)

echo '[+] Installing Make...'
make install
"

# Cleanup mounts
sudo umount "$CHROOT_DIR/usr/include"
sudo umount "$CHROOT_DIR/dev/shm"
sudo umount "$CHROOT_DIR/dev"
sudo umount "$CHROOT_DIR/sys"
sudo umount "$CHROOT_DIR/proc"

echo "[+] GNU Make installed successfully inside chroot"

echo
echo "Installing GNU GMP"
echo

GMP_VERSION="6.3.0"
GMP_TAR="gmp-$GMP_VERSION.tar.xz"
GMP_URL="https://gmplib.org/download/gmp/$GMP_TAR"

cd "$BUILD_DIR"
curl -L -o "$GMP_TAR" "$GMP_URL"
tar -xf "$GMP_TAR"
cd "gmp-$GMP_VERSION"

 env PATH="$PATH" AWK="$AWK" CC="$CC" CXX="$CXX" AR="$AR" RANLIB="$RANLIB" \
    ./configure \
    --prefix="$CHARD_ROOT/usr" \
    --with-pic

make -j"$(nproc)"
make install
echo "[+] GMP $GMP_VERSION installed"

echo
echo "Installing MPFR"
echo

MPFR_VERSION="4.2.2"
MPFR_TAR="mpfr-$MPFR_VERSION.tar.xz"
MPFR_URL="https://www.mpfr.org/mpfr-current/$MPFR_TAR"

cd "$BUILD_DIR"
curl -L -o "$MPFR_TAR" "$MPFR_URL"
tar -xf "$MPFR_TAR"
cd "mpfr-$MPFR_VERSION"

env PATH="$PATH" ./configure \
    --prefix="$CHARD_ROOT/usr" \
    --with-gmp="$CHARD_ROOT/usr" \
    --with-pic
make -j"$(nproc)"
make install
echo "[+] MPFR $MPFR_VERSION installed"

echo
echo "Installing GAWK"
echo

GAWK_VERSION="5.3.2"
GAWK_TAR="gawk-$GAWK_VERSION.tar.xz"
GAWK_URL="https://ftp.gnu.org/gnu/gawk/$GAWK_TAR"

cd "$BUILD_DIR"
curl -L -o "$GAWK_TAR" "$GAWK_URL"
tar -xf "$GAWK_TAR"
cd "gawk-$GAWK_VERSION"

MPFR_LIBS="$CHARD_ROOT/usr/lib/libmpfr.a $CHARD_ROOT/usr/lib/libgmp.a -lm"
MPFR_CFLAGS="-I$CHARD_ROOT/usr/include"

env PATH="$PATH" ./configure \
    --prefix="$CHARD_ROOT/usr" \
    --disable-shared \
    --without-readline \
    --disable-dependency-tracking \
    MPFR_CFLAGS="$MPFR_CFLAGS" \
    MPFR_LIBS="$MPFR_LIBS" \
    CC="$CC" \
    CXX="$CXX" \
    CFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe" \
    CXXFLAGS="-I$CHARD_ROOT/usr/include -O2 -pipe" \
    LDFLAGS="-L$CHARD_ROOT/usr/lib"

make -j"$(nproc)"
make install
echo "[+] Gawk $GAWK_VERSION installed (fully static)"

echo
echo "Installing BINUTILS"
echo

BINUTILS_VERSION="2.45"
BINUTILS_TAR="binutils-$BINUTILS_VERSION.tar.xz"
BINUTILS_URL="https://ftp.gnu.org/gnu/binutils/$BINUTILS_TAR"

cd "$BUILD_DIR"
curl -L -o "$BINUTILS_TAR" "$BINUTILS_URL"
tar -xf "$BINUTILS_TAR"
cd "binutils-$BINUTILS_VERSION"

env PATH="$PATH" ./configure \
    --prefix="$CHARD_ROOT/usr" \
    --disable-nls \
    --disable-werror \
    --enable-static \
    --disable-shared \
    MPFR_CFLAGS="$MPFR_CFLAGS" \
    MPFR_LIBS="$MPFR_LIBS"

make -j"$(nproc)"
make install
echo "[+] Binutils $BINUTILS_VERSION installed"

echo
echo "Installing Diffutils"
echo

DIFFUTILS_VERSION="3.12"
DIFFUTILS_TAR="diffutils-$DIFFUTILS_VERSION.tar.xz"
DIFFUTILS_URL="https://ftp.gnu.org/gnu/diffutils/$DIFFUTILS_TAR"

cd "$BUILD_DIR"
curl -L -o "$DIFFUTILS_TAR" "$DIFFUTILS_URL"
tar -xf "$DIFFUTILS_TAR"
cd "diffutils-$DIFFUTILS_VERSION"

env PATH="$PATH" ./configure \
    --prefix="$CHARD_ROOT/usr" \
    --disable-dependency-tracking

make -j"$(nproc)"
make install
echo "[+] Diffutils $DIFFUTILS_VERSION installed"

rm -rf "$BUILD_DIR"
echo "[+] All packages built and installed into $CHARD_ROOT/usr/bin"


CHROME_PYTHON=/usr/bin/python3
echo "[+] Bootstrapping Git using ChromeOS Python ($CHROME_PYTHON)..."

echo
echo "Installing Git"
echo

GIT_VERSION="2.51.0"
GIT_TAR="git-$GIT_VERSION.tar.gz"
GIT_URL="https://mirrors.edge.kernel.org/pub/software/scm/git/$GIT_TAR"

cd "$BUILD_DIR"
curl -L -o "$GIT_TAR" "$GIT_URL"
tar -xzf "$GIT_TAR"
cd "git-$GIT_VERSION"

./configure CC="$CC" CXX="$CXX" --prefix="$CHARD_ROOT/usr"
make -j"$(nproc)"
make install

cd "$CHARD_ROOT"
rm -rf "$BUILD_DIR"

echo "[+] Git $GIT_VERSION installed into $CHARD_ROOT/usr/bin"
echo
echo "[+] Chard root setup complete."
