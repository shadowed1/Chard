#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

MAX_RETRIES=10
RETRY_DELAY=30

CHARD_ROOT="/usr/local/chard"
CHARD_RC="/usr/local/chard/.chardrc"
BUILD_DIR="/usr/local/chard/var/tmp/build"
echo
echo
echo "${RED}Chard Installed can take 15-45 minutes depending on your CPU and storage. Requires 2.6 GB of space. Supports ${BOLD}x86_64${RESET}${RED} and ${BOLD}ARM64${RESET}${RED}! ${RESET}"
echo
echo "${YELLOW}Chard will be installed in ${RESET}${YELLOW}${BOLD}${CHARD_ROOT}${RESET}${YELLOW} and will not affect ChromeOS or system commands.${RESET}"
echo
echo "${GREEN}It is ${BOLD}semi-sandboxed within itself${RESET}${GREEN}, but can rely on Host libraries. Includes a 2025 toolchain to build and compile with.${RESET}"
echo
echo "${CYAN}Chard has ${BOLD}not${RESET}${CYAN} been tested with Brunch Toolchain or Chromebrew - this project uses a different implementation.${RESET}"
echo
echo "${BLUE}Does not require altering current state of /usr/local/ during Install and Uninstall.${RESET}"
echo
echo "${MAGENTA}Chard is current in early development and Emerge is not working. ${BOLD}Bugs will exist${RESET}${MAGENTA}, so please have a USB backup in case of serious mistakes.${RESET}"
echo
detect_cpu_type() {
    CPU_VENDOR=$(grep -m1 'vendor_id' /proc/cpuinfo | awk '{print $3}' || echo "unknown")
    IS_INTEL=0
    IS_AMD=0
    IS_ARM=0
    PERF_PATH=""
    PERF_PATHS=()
    TURBO_PATH=""

    case "$CPU_VENDOR" in
        GenuineIntel)
            IS_INTEL=1
            if [ -f "/sys/devices/system/cpu/intel_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/intel_pstate/max_perf_pct"
                TURBO_PATH="/sys/devices/system/cpu/intel_pstate/no_turbo"
            fi
            ;;
        AuthenticAMD)
            IS_AMD=1
            if [ -f "/sys/devices/system/cpu/amd_pstate/max_perf_pct" ]; then
                PERF_PATH="/sys/devices/system/cpu/amd_pstate/max_perf_pct"
            else
                mapfile -t PERF_PATHS < <(find /sys/devices/system/cpu/cpufreq/ -type f -name 'scaling_max_freq' 2>/dev/null)
            fi
            ;;
        *)
            IS_ARM=1
            mapfile -t PERF_PATHS < <(find /sys/devices/system/cpu/cpufreq/ -type f -name 'scaling_max_freq' 2>/dev/null)
            ;;
    esac
}

detect_cpu_type

if (( IS_INTEL == 1 )) && [[ -f "$TURBO_PATH" ]]; then
    echo
    read -rp "${CYAN}${BOLD}Intel CPU Detected! Do you want to disable Intel Turbo Boost before continuing? (Y/n): ${RESET}" disable_turbo
    disable_turbo=${disable_turbo:-Y}

    if [[ "$disable_turbo" =~ ^[Yy]$ ]]; then
        echo 1 | sudo tee "$TURBO_PATH" >/dev/null
        echo "${GREEN}[+] Intel Turbo Boost disabled. To re-enable it run:${RESET}"
        echo "${BLUE}${BOLD}echo 0 | sudo tee $TURBO_PATH${RESET}"
    else
        echo "${RED}Intel Turbo Boost will remain enabled! Please ensure you can keep your chromebook cool! ${RESET}"
    fi
fi

    echo
    read -rp "${GREEN}${BOLD}Install Chard? (Y/n): ${RESET}" continue
    continue=${continue:-Y}

    echo "${RED}Chard Installs to /usr/local/chard${RESET}${YELLOW} Install will eventually chroot into chard. This means / will be /usr/local/chard/ in reality.${RESET}"
    echo
    echo "${GREEN}[+] Creating ${RESET}${RED}Chard Root${RESET}"
    sudo mkdir -p "$CHARD_ROOT"/{ \
    etc/portage, \
    etc/sandbox.d, \
    etc/ssl, \
    usr/{bin,lib,lib64,include,share,local/{bin,lib,include}}, \
    var/{tmp/build,cache/distfiles,cache/packages,log,run}, \
    dev/{shm,pts}, \
    proc, \
    sys, \
    tmp, \
    run, \
    home/{user}, \
    mnt \
}

sudo mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"
sudo cp /etc/resolv.conf /usr/local/chard/etc/resolv.conf 2>/dev/null
sudo cp -r /etc/ssl /usr/local/chard/etc/ 2>/dev/null
echo "${YELLOW}[+] Downloading Chard configuration files...${RESET}"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "/usr/local/chard/.chardrc"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "/usr/local/chard/.chard.env"
sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "/usr/local/chard/.chard.logic"

sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "${GREEN}[+] Chard sourced to ~/.bashrc ${RESET}"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) GENTOO_ARCH="amd64"; CHOST="x86_64-pc-linux-gnu";;
    aarch64) GENTOO_ARCH="arm64"; CHOST="aarch64-unknown-linux-gnu";;
    *) echo "Unknown architecture: $ARCH"; exit 1;;
esac

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)
        GENTOO_ARCH="amd64"
        CHOST="x86_64-pc-linux-gnu"

        echo "${BLUE}[+] Installing bootstrap make binary and cmake ${RESET}${MAGENTA}(x86_64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_x86_64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo ln -sf /usr/local/make "/usr/local/chard/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(x86_64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-x86_64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "/usr/local/chard/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    aarch64|arm64)
        GENTOO_ARCH="arm64"
        CHOST="aarch64-unknown-linux-gnu"

        echo "${BLUE}[+] Installing bootstrap make binary ${RESET}${MAGENTA}(ARM64)${RESET}"
        sudo curl -fsSL https://github.com/shadowed1/Chard/raw/main/make_ARM64 -o /usr/local/make
        sudo chmod +x /usr/local/make
        sudo mkdir -p "/usr/local/chard/usr/bin"
        sudo ln -sf /usr/local/make "/usr/local/chard/usr/bin/make"

        echo "${CYAN}[+] Installing prebuilt CMake ${MAGENTA}(ARM64)"
        sudo curl -L --progress-bar -o /tmp/cmake.tar.gz \
            https://github.com/Kitware/CMake/releases/download/v4.1.1/cmake-4.1.1-linux-aarch64.tar.gz
        sudo tar -xzf /tmp/cmake.tar.gz -C "/usr/local/chard/usr/" --strip-components=1 \
            --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
        sudo rm -f /tmp/cmake.tar.gz
        sudo chmod -R +x "/usr/local/chard/usr/bin"
        ;;
    *)
        echo "${RED}[!] Unsupported architecture: $ARCH${RESET}"
        exit 1
        ;;
esac


echo "${RESET}${GREEN}[+] Bootstrap make ready at /usr/local/make${RESET}"


MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
sudo mkdir -p "$(dirname "$MAKE_CONF")"
sudo tee "$MAKE_CONF" > /dev/null <<EOF
CHOST="${CHOST}"
ARCH="${GENTOO_ARCH}"
ACCEPT_KEYWORDS="~${GENTOO_ARCH}"
ROOT="${CHARD_ROOT}"
CFLAGS="-O2 -pipe"
CXXFLAGS="\${CFLAGS}"
PORTAGE_TMPDIR="${CHARD_ROOT}/var/tmp"
DISTDIR="${CHARD_ROOT}/var/cache/distfiles"
PKGDIR="${CHARD_ROOT}/var/cache/packages"
EOF

echo "${YELLOW}[+] make.conf created with ARCH=${GENTOO_ARCH}${RESET}"

sudo mkdir -p "/usr/local/chard/var/tmp"
PORTAGE_DIR="/usr/local/chard/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="/usr/local/chard/var/tmp/portage-latest.tar.xz"
echo "${CYAN}[+] Downloading Portage tree snapshot"
sudo curl -L --progress-bar -o "$TMP_TAR" "$SNAPSHOT_URL"
sudo mkdir -p "$PORTAGE_DIR"
sudo tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"
sudo rm -f "$TMP_TAR"

STAGE3_TXT="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/current-stage3-$GENTOO_ARCH-systemd/latest-stage3-$GENTOO_ARCH-systemd.txt"

STAGE3_FILENAME=$(curl -fsSL "$STAGE3_TXT" | grep -Eo 'stage3-.*\.tar\.xz' | head -n1)
STAGE3_URL=$(dirname "$STAGE3_TXT")"/$STAGE3_FILENAME"

STAGE3_FILE=$(basename "$STAGE3_URL")
TMP_STAGE3="/usr/local/chard/var/tmp/$STAGE3_FILE"

echo "${RESET}${BLUE}[+] Downloading latest Stage3 tarball: $STAGE3_FILENAME"
sudo curl -L --progress-bar -o "$TMP_STAGE3" "$STAGE3_URL"

echo "${RESET}${BLUE}[+] Extracting Stage3 tarball"
sudo tar -xJf "$TMP_STAGE3" -C "/usr/local/chard" --strip-components=1 \
    --checkpoint=.100 --checkpoint-action=echo="   extracted %u files"

sudo rm -f "$TMP_STAGE3"

PROFILE_DIR="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH/23.0/desktop"
MAKE_PROFILE="/usr/local/chard/etc/portage/make.profile"
sudo mkdir -p "$(dirname "$MAKE_PROFILE")"
if [ -d "$PROFILE_DIR" ]; then
    REL_TARGET=$(realpath --relative-to="/usr/local/chard/etc/portage" "$PROFILE_DIR")
    sudo ln -sfn "$REL_TARGET" "$MAKE_PROFILE"
    echo "[+] Portage profile set to $REL_TARGET"
else
    echo "${YELLOW}[!] Desktop profile not found for $GENTOO_ARCH at $PROFILE_DIR"
    exit 1
fi

sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "/usr/local/chard/bin/chard"
sudo chmod +x "/usr/local/chard/bin/chard"

GCC_DIR="/usr/local/chard/usr/$CHOST/gcc-bin/14"
export PYTHON="/usr/local/chard/bin/python3"
export CC="$GCC_DIR/$CHOST-gcc"
export CXX="$GCC_DIR/$CHOST-g++"
export AR="$GCC_DIR/gcc-ar"
export RANLIB="$GCC_DIR/$CHOST-gcc-ranlib"
export PATH="$PATH:$GCC_DIR:/usr/local/chard/usr/bin"
#export CFLAGS="-I/usr/local/chard/usr/include -O2 -pipe"
export CXXFLAGS="$CFLAGS"
#export LDFLAGS="-L/usr/local/chard/usr/lib"
export AWK=/usr/bin/mawk
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/usr/lib64"
export MAKEFLAGS="-j$(nproc)"
export INSTALL_ROOT="/usr/local/chard"
export ACLOCAL_PATH="/usr/local/chard/usr/share/aclocal"
export PYTHONPATH="/usr/local/chard/usr/lib/python3.*/site-packages:$PYTHONPATH"
export PKG_CONFIG_PATH=/usr/local/chard/usr/lib64/pkgconfig:/usr/local/chard/usr/lib/pkgconfig
export CFLAGS="-I/usr/local/chard/usr/include $CFLAGS"
export LDFLAGS="-L/usr/local/chard/usr/lib64 -L/usr/local/chard/usr/lib $LDFLAGS"



KERNEL_VER="6.16"
KERNEL_TAR="linux-$KERNEL_VER.tar.xz"
KERNEL_URL="https://cdn.kernel.org/pub/linux/kernel/v6.x/$KERNEL_TAR"
KERNEL_BUILD="$BUILD_DIR/linux-$KERNEL_VER"

sudo mkdir -p "$BUILD_DIR"

if [ ! -f "$BUILD_DIR/$KERNEL_TAR" ]; then
    echo "[+] Fetching $KERNEL_TAR..."
    sudo curl -L --progress-bar -o "$BUILD_DIR/$KERNEL_TAR" "$KERNEL_URL"
else
    echo "${RESET}${YELLOW}[!] Kernel tarball already exists, skipping download.${RESET}"
fi

sudo rm -rf "$KERNEL_BUILD"
sudo tar -xf "$BUILD_DIR/$KERNEL_TAR" -C "$BUILD_DIR" \
    --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"

echo "${CYAN}[+] Installing Linux headers into Chard Root..."
sudo chroot "/usr/local/chard" /bin/bash -c "
cd /var/tmp/build/linux-$KERNEL_VER

HOST_ARCH=\$(uname -m)

case \"\$HOST_ARCH\" in
    x86_64) KERNEL_ARCH=x86_64;;
    aarch64) KERNEL_ARCH=arm64;;
    *) echo 'Unknown architecture: \$HOST_ARCH'; exit 1;;
esac

make mrproper
make HOST_ARCH=$HOST_ARCH defconfig
make HOST_ARCH=$HOST_ARCH INSTALL_HDR_PATH=/usr headers_install
"

echo "${RESET}${MAGENTA}[+] Linux headers installed to /usr/local/chard/usr/include${RESET}"

sudo rm -rf "$KERNEL_BUILD"

PACKAGES=(
    "make|4.4|tar.gz|https://mirrors.kernel.org//gnu/make/make-4.4.tar.gz|make-4.4|gnu"
    "gmp|6.3.0|tar.xz|https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz|gmp-6.3.0|gnu"
    "mpfr|4.2.2|tar.xz|https://www.mpfr.org/mpfr-current/mpfr-4.2.2.tar.xz|mpfr-4.2.2|gnu"
    "binutils|2.45|tar.xz|https://mirrors.kernel.org//gnu/binutils/binutils-2.45.tar.xz|binutils-2.45|gnu"
    "diffutils|3.12|tar.xz|https://mirrors.kernel.org//gnu/diffutils/diffutils-3.12.tar.xz|diffutils-3.12|gnu"
    "openssl|3.5.2|tar.gz|https://github.com/openssl/openssl/releases/download/openssl-3.5.2/openssl-3.5.2.tar.gz|openssl-3.5.2|gnusslcore"
    "git|2.51.0|tar.gz|https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.51.0.tar.gz|git-2.51.0|gnu"
    "coreutils|9.7|tar.xz|https://mirrors.kernel.org//gnu/coreutils/coreutils-9.7.tar.xz|coreutils-9.7|gnu"
    "perl|5.40.0|tar.gz|https://www.cpan.org/src/5.0/perl-5.40.0.tar.gz|perl-5.40.0|perl-core"
    "Config-AutoConf|0.320|tar.gz|https://cpan.metacpan.org/authors/id/A/AM/AMBS/Config-AutoConf-0.320.tar.gz|Config-AutoConf-0.320|perl"
    "Capture-Tiny|0.48|tar.gz|https://cpan.metacpan.org/authors/id/D/DA/DAGOLDEN/Capture-Tiny-0.48.tar.gz|Capture-Tiny-0.48|perl"
    "Test-Fatal|0.017|tar.gz|https://cpan.metacpan.org/authors/id/R/RJ/RJBS/Test-Fatal-0.017.tar.gz|Test-Fatal-0.017|perl"
    "findutils|4.10.0|tar.xz|https://mirrors.kernel.org//gnu/findutils/findutils-4.10.0.tar.xz|findutils-4.10.0|gnu"
    "pkg-config|0.29.2|tar.gz|https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz|pkg-config-0.29.2|gnu"
    "gtest|1.16.0|tar.gz|https://github.com/google/googletest/releases/download/v1.16.0/googletest-1.16.0.tar.gz|googletest-1.16.0|cmake"
    "python|3.13.7|tar.xz|https://www.python.org/ftp/python/3.13.7/Python-3.13.7.tar.xz|Python-3.13.7|gnu"
    "meson|1.9.0|tar.gz|https://github.com/mesonbuild/meson/releases/download/1.9.0/meson-1.9.0.tar.gz|meson-1.9.0|python"
    "ninja|1.13.1|tar.gz|https://github.com/ninja-build/ninja/archive/refs/tags/v1.13.1.tar.gz|ninja-1.13.1|cmake"
    "zlib|1.3.1|tar.gz|https://zlib.net/zlib-1.3.1.tar.gz|zlib-1.3.1|gnu"
    "sqlite|3500400|tar.gz|https://www.sqlite.org/2025/sqlite-autoconf-3500400.tar.gz|sqlite-autoconf-3500400|gnu"
    "util-linux|2.41|tar.xz|https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v2.41/util-linux-2.41.tar.xz|util-linux-2.41|gnu"
    "libffi|3.5.2|tar.gz|https://github.com/libffi/libffi/releases/download/v3.5.2/libffi-3.5.2.tar.gz|libffi-3.5.2|gnu"
    "freetype|2.14.1|tar.xz|https://download.savannah.gnu.org/releases/freetype/freetype-2.14.1.tar.xz|freetype-2.14.1|gnu"
    "graphite2|1.3.14|tgz|https://github.com/silnrsi/graphite/releases/download/1.3.14/graphite2-1.3.14.tgz|graphite2-1.3.14|python"
    "Locale-gettext|1.07|tar.gz|https://cpan.metacpan.org/authors/id/P/PV/PVANDRY/Locale-gettext-1.07.tar.gz|Locale-gettext-1.07|perl"
    "sysprof|1.2.0|tar.gz|https://www.sysprof.com/sysprof-1.2.0.tar.gz|sysprof-1.2.0|gnu"
    "pcre2|10.46|tar.gz|https://github.com/PCRE2Project/pcre2/releases/download/pcre2-10.46/pcre2-10.46.tar.gz|pcre2-10.46|gnu"
    "glib|2.86.0|tar.xz|https://download.gnome.org/sources/glib/2.86/glib-2.86.0.tar.xz|glib-2.86.0|meson"
    "libpng|1.6.50|tar.xz|https://sourceforge.net/projects/libpng/files/libpng16/1.6.50/libpng-1.6.50.tar.xz/download|libpng-1.6.50|gnu"
    "fontconfig|2.16.0|tar.xz|https://www.freedesktop.org/software/fontconfig/release/fontconfig-2.16.0.tar.xz|fontconfig-2.16.0|meson"
    "pixman|0.46.4|tar.xz|https://cairographics.org/releases/pixman-0.46.4.tar.xz|pixman-0.46.4|meson"
    "icu|76.1|tar.gz|https://github.com/unicode-org/icu/releases/download/release-76-1/icu4c-76_1-src.tgz|icu-76.1|icu"
    "chafa|1.14.5|tar.xz|https://github.com/hpjansson/chafa/releases/download/1.14.5/chafa-1.14.5.tar.xz|chafa-1.14.5|gnu"
    "cairo|1.18.4|tar.xz|https://cairographics.org/releases/cairo-1.18.4.tar.xz|cairo-1.18.4|meson"
    "harfbuzz|11.5.0|tar.xz|https://github.com/harfbuzz/harfbuzz/releases/download/11.5.0/harfbuzz-11.5.0.tar.xz|harfbuzz-11.5.0|meson"
    "texinfo|7.2|tar.xz|https://mirrors.kernel.org/gnu/texinfo/texinfo-7.2.tar.xz|texinfo-7.2|gnu"
    "libseccomp|2.5.5|tar.gz|https://github.com/seccomp/libseccomp/releases/download/v2.5.5/libseccomp-2.5.5.tar.gz|libseccomp-2.5.5|gnu"
    "file|5.45|tar.gz|https://astron.com/pub/file/file-5.45.tar.gz|file-5.45|gnu"
    "File-LibMagic|1.23|tar.gz|https://cpan.metacpan.org/authors/id/D/DR/DROLSKY/File-LibMagic-1.23.tar.gz|File-LibMagic-1.23|perl"
    "portage|3.0.69.1|tar.gz|https://github.com/gentoo/portage/archive/refs/tags/portage-3.0.69.1.tar.gz|portage-portage-3.0.69.1|meson"
    "libXcursor|1.2.2|tar.xz|https://xorg.freedesktop.org/archive/individual/lib/libXcursor-1.2.2.tar.xz|libXcursor-1.2.2|gnu"
    "libXrandr|1.5.4|tar.xz|https://xorg.freedesktop.org/archive/individual/lib/libXrandr-1.5.4.tar.xz|libXrandr-1.5.4|gnu"
    "libXinerama|1.1.5|tar.xz|https://xorg.freedesktop.org/archive/individual/lib/libXinerama-1.1.5.tar.xz|libXinerama-1.1.5|gnu"
    "libXi|1.8.2|tar.xz|https://xorg.freedesktop.org/archive/individual/lib/libXi-1.8.2.tar.xz|libXi-1.8.2|gnu"
    "libsndfile|1.2.2|tar.xz|https://github.com/libsndfile/libsndfile/releases/download/1.2.2/libsndfile-1.2.2.tar.xz|libsndfile-1.2.2|gnu"
    "pulseaudio|17.0|tar.xz|https://freedesktop.org/software/pulseaudio/releases/pulseaudio-17.0.tar.xz|pulseaudio-17.0|meson"
    "json-glib|1.8.0|tar.xz|https://download.gnome.org/sources/json-glib/1.8/json-glib-1.8.0.tar.xz|json-glib-1.8.0|meson"
    "bubblewrap|0.10.0|tar.xz|https://github.com/containers/bubblewrap/releases/download/v0.10.0/bubblewrap-0.10.0.tar.xz|bubblewrap-0.10.0|meson"
    "libcap|1.2.76|tar.gz|https://git.kernel.org/pub/scm/libs/libcap/libcap.git/snapshot/libcap-1.2.76.tar.gz|libcap-1.2.76|libcap"
    "libarchive|3.7.3|tar.xz|https://www.libarchive.org/downloads/libarchive-3.7.3.tar.xz|libarchive-3.7.3|gnu"
    "gpgme|2.0.0|tar.bz2|https://gnupg.org/ftp/gcrypt/gpgme/gpgme-2.0.0.tar.bz2|gpgme-2.0.0|gnu"
    "fuse|3.17.4|tar.gz|https://github.com/libfuse/libfuse/releases/download/fuse-3.17.4/fuse-3.17.4.tar.gz|fuse-3.17.4|meson"
    "libostree|2025.2|tar.xz|https://github.com/ostreedev/ostree/releases/download/v2025.2/libostree-2025.2.tar.xz|libostree-2025.2|gnu"
    "libpsl|0.21.5|tar.gz|https://github.com/rockdaboot/libpsl/releases/download/0.21.5/libpsl-0.21.5.tar.gz|libpsl-0.21.5|gnussl"
    "curl|8.16.0|tar.gz|https://github.com/curl/curl/releases/download/curl-8_16_0/curl-8.16.0.tar.gz|curl-8.16.0|gnussl"
    "expat|2.5.0|tar.gz|https://github.com/libexpat/libexpat/releases/download/R_2_7_2/expat-2.7.2.tar.gz|expat-2.5.0|gnu"
    "duktape|2.9.0|tar.xz|https://github.com/svaarala/duktape/releases/download/v2.7.0/duktape-2.7.0.tar.xz|duktape-2.9.0|duktape"
    "p11-kit|0.25.8|tar.xz|https://github.com/p11-glue/p11-kit/releases/download/0.25.8/p11-kit-0.25.8.tar.xz|p11-kit-0.25.8|gnu"
    "dconf|0.49.0|tar.xz|https://download.gnome.org/sources/dconf/0.49/dconf-0.49.0.tar.xz|dconf-0.49.0|meson"
    "gsettings-desktop-schemas|49.0|tar.xz|https://download.gnome.org/sources/gsettings-desktop-schemas/49/gsettings-desktop-schemas-49.0.tar.xz|gsettings-desktop-schemas-49.0|meson"
    "malcontent|0.13.1|tar.gz|https://gitlab.freedesktop.org/pwithnall/malcontent/-/archive/0.13.1/malcontent-0.13.1.tar.gz|malcontent-0.13.1|meson"
    "polkit|124|tar.gz|https://gitlab.freedesktop.org/polkit/polkit/-/archive/125/polkit-124.tar.gz|polkit-124|meson"
    "flatpak|1.15.8|tar.xz|https://github.com/flatpak/flatpak/releases/download/1.15.8/flatpak-1.15.8.tar.xz|flatpak-1.15.8|meson"
)

mkdir -p "$BUILD_DIR"

sudo mkdir -p "/usr/local/chard/var/tmp/build"

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    ARCHIVE="$NAME-$VERSION.$EXT"

    echo "${RESET}${GREEN}[+] Downloading $NAME-$VERSION "

    attempt=1
    while true; do
        sudo curl -L --progress-bar -o "$BUILD_DIR/$ARCHIVE" "$URL" && break

        echo "${RED}[!] Download failed for $NAME-$VERSION (attempt $attempt/$MAX_RETRIES), retrying in $RETRY_DELAY seconds..."
        (( attempt++ ))

        if (( attempt > MAX_RETRIES )); then
            echo "${BOLD}${RED}[!] Failed to download $NAME-$VERSION after $MAX_RETRIES attempts. Aborting.${RESET}"
            exit 1
        fi
        sleep $RETRY_DELAY
    done

    echo "${RESET}${YELLOW}[+] Extracting $NAME-$VERSION"
    case "$EXT" in
        tar.gz|tgz)
            sudo tar -xzf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.xz)
            sudo tar -xJf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        tar.bz2)
            sudo tar -xjf "$BUILD_DIR/$ARCHIVE" -C "$BUILD_DIR" \
                --checkpoint=.500 --checkpoint-action=echo="   extracted %u files"
            ;;
        zip)
            sudo unzip -q "$BUILD_DIR/$ARCHIVE" -d "$BUILD_DIR"
            ;;
        *)
            echo "Unknown archive format: $EXT"; exit 1 ;;
    esac
done

for pkg in "${PACKAGES[@]}"; do
    IFS="|" read -r NAME VERSION EXT URL DIR BUILDSYS <<< "$pkg"
    
    echo "${RESET}${GREEN}[+] Mounting Chard Chroot${RESET}"
    mountpoint -q "/usr/local/chard/proc"    || sudo mount -t proc proc "/usr/local/chard/proc"
    mountpoint -q "/usr/local/chard/sys"     || sudo mount -t sysfs sys "/usr/local/chard/sys"
    mountpoint -q "/usr/local/chard/dev"     || sudo mount --bind /dev "/usr/local/chard/dev"
    mountpoint -q "/usr/local/chard/dev/shm" || sudo mount --bind /dev/shm "/usr/local/chard/dev/shm"
    mountpoint -q "/usr/local/chard/etc/"    || sudo mount --bind /etc/resolv.conf "/usr/local/chard/etc/resolv.conf"



    echo "[+] Building $NAME-$VERSION in chroot${RESET}"
    sudo chroot "/usr/local/chard" /bin/bash -c "
    

cd /var/tmp/build/$DIR

ARCH=\$(uname -m)
case \"\$ARCH\" in
    x86_64) CHOST=x86_64-pc-linux-gnu;;
    aarch64) CHOST=aarch64-unknown-linux-gnu;;
    *) echo 'Unknown architecture: \$ARCH'; exit 1;;
esac

GCC_DIR=/usr/\$CHOST/gcc-bin/14
export MAGIC="/usr/share/misc/magic.mgc"
export CC=\$GCC_DIR/\$CHOST-gcc
export CXX=\$GCC_DIR/\$CHOST-g++
export AR=\$GCC_DIR/gcc-ar
export RANLIB=\$GCC_DIR/\$CHOST-gcc-ranlib
export CFLAGS='-O2 -pipe -I/usr/include'
export CXXFLAGS='-O2 -pipe -I/usr/include'
export LDFLAGS='-L/usr/lib'
export PATH=/usr/\$CHOST/gcc-bin/14:/usr/bin:/bin:/usr/local/bin
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}/lib:/lib64:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64"
export PERL5LIB=/usr/local/lib/perl5/site_perl/5.40.0:/usr/local/lib/perl5:$PERL5LIB
export PKG_CONFIG="/usr/bin/pkg-config"
export PKG_CONFIG_PATH=/usr/lib64/pkgconfig:/usr/lib/pkgconfig
export PYTHON="/bin/python3"

if [[ "$NAME" == "gtest" ]]; then
    cd /var/tmp/build/${DIR}
else
    cd /var/tmp/build/$DIR
fi

case \"$BUILDSYS\" in
    gnu)
        ./configure --prefix=/usr
        make -j\$(nproc)
        make install
        ;;
    perl)
        perl Makefile.PL INSTALL_BASE=/usr/local
        make
        make test || true
        make install
        ;;
    perl-core)
        sh Configure -des -Dprefix=/usr
        make -j$(nproc)
        make install
        ;;
    cmake)
        cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF
        cmake --build build -j$(nproc)
        cmake --install build
        ;;
    cmakeG)
        cmake -S . -B build \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DCMAKE_BUILD_TYPE=Release \
              -DBUILD_GMOCK=OFF
        cmake --build build -j$(nproc)
        cmake --install build
        ;;
     meson)
        meson setup build --prefix=/usr
        ninja -C build
        ninja -C build install
        ;;
      python)
        cd /var/tmp/build/$DIR
        "/usr/bin/python3.13" setup.py build
        "/usr/bin/python3.13" setup.py install --prefix=/usr
        ;;
    libcap)
        make -j$(nproc) prefix=/usr
        make test || true
        make install prefix=/usr
        ;;
    icu)
        cd /var/tmp/build/$DIR/source/
        chmod +x runConfigureICU configure install-sh
        ./runConfigureICU Linux --prefix=/usr --disable-dependency-tracking
        make -j$(nproc)
        make install
        ;;
    gnussl)
        ./configure --prefix=/usr --with-ssl=/usr
        make -j$(nproc)
        make install
        ;;
    gnusslcore)
        ./Configure --prefix=/usr
        make -j\$(nproc)
        make install
        ;;
    duktape)
        cd /var/tmp/build/$DIR
        make -f Makefile.sharedlibrary -j$(nproc)
        mkdir -p /usr/include/duktape /usr/lib
        cp src/duktape.h /usr/include/duktape/
        cp libduktape.so* /usr/lib/
        ;;
    *)
        echo \"Unknown build system: $BUILDSYS\"
        exit 1
        ;;
esac
"

echo

echo "${RESET}${MAGENTA}[+] Finished building $NAME-$VERSION${RESET}"
    
    if [ "$NAME" = "make" ] && [ -L "/usr/local/chard/usr/bin/make" ]; then
        sudo rm -f "/usr/local/chard/usr/bin/make"
        sudo cp /usr/local/make "/usr/local/chard/usr/bin/make"
        echo "${GREEN}[+] Replaced symlink with real make binary in Chard Root${RESET}"
    fi

    echo

done

echo "${RED}[+] Cleaning up${RESET}"
sudo umount -l "/usr/local/chard/dev/shm"       2>/dev/null || true
sudo umount -l "/usr/local/chard/dev"           2>/dev/null || true
sudo umount -l "/usr/local/chard/sys"           2>/dev/null || true
sudo umount -l "/usr/local/chard/proc"          2>/dev/null || true
sudo umount -l "/usr/local/chard/etc/"          2>/dev/null || true



sudo rm -rf "$BUILD_DIR"

sudo chown -R 1000:1000 "/usr/local/chard"

cat > /usr/local/chard/bin/emerge <<'EOF'
#!/usr/local/chard/bin/python3.13
import os
import sys
import errno

EPYTHON = '/usr/local/chard/bin/python3.13'

CHARD_PYEXEC_DIR = '/usr/local/chard/usr/lib/python-exec/python3.13'

target_name = os.path.basename(sys.argv[0])
target_path = os.path.join(CHARD_PYEXEC_DIR, target_name)

data = None
while data is None:
    try:
        kwargs = {}
        if sys.version_info >= (3,):
            import tokenize
            with open(target_path, 'rb') as f:
                kwargs['encoding'] = tokenize.detect_encoding(f.readline)[0]
        with open(target_path, 'r', **kwargs) as f:
            data = f.read()
    except IOError as e:
        if e.errno == errno.EINTR:
            continue
        elif e.errno == errno.ENOENT:
            sys.stderr.write(f'{target_path}: Python implementation not supported: {EPYTHON}\n')
            sys.exit(127)
        else:
            raise

sys.argv[0] = target_path
new_globals = dict(globals())
new_globals['__file__'] = target_path

exec(data, new_globals)
EOF

chmod +x /usr/local/chard/bin/emerge

CHARD_ROOT="${CHARD_ROOT:-/usr/local/chard}"

if [ -f "$MAKE_CONF" ]; then
    cp -a "$MAKE_CONF" "${MAKE_CONF}.bak.$(date +%Y%m%d%H%M%S)"
    echo "Backed up original make.conf to ${MAKE_CONF}.bak.*"
fi

sudo tee "$MAKE_CONF" > /dev/null <<EOF
# Chard Portage make.conf
# Manually generated
COMMON_FLAGS="-O2 -pipe"
CFLAGS="-O2 -pipe"
CXXFLAGS="-O2 -pipe"
FCFLAGS="-O2 -pipe"
FFLAGS="-O2 -pipe"
LC_MESSAGES=C.utf8
ROOT="/usr/local/chard"
DISTDIR="/usr/local/chard/var/cache/distfiles"
PKGDIR="/usr/local/chard/var/cache/packages"
PORTAGE_TMPDIR="/usr/local/chard/var/tmp"
PORTDIR="/usr/local/chard/usr/portage"
SANDBOX="/usr/local/chard/usr/bin/sandbox"
CHOST="x86_64-pc-linux-gnu"
CC="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-gcc"
CXX="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/x86_64-pc-linux-gnu-g++"
AR="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-ar"
NM="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-nm"
RANLIB="/usr/local/chard/usr/x86_64-pc-linux-gnu/gcc-bin/14/gcc-ranlib"
STRIP="/usr/local/chard/usr/x86_64-pc-linux-gnu/binutils-bin/2.44/strip"
FEATURES="assume-digests binpkg-docompress binpkg-dostrip binpkg-logs config-protect-if-modified distlocks ebuild-locks fixlafiles ipc-sandbox merge-sync multilib-strict network-sandbox news parallel-fetch pid-sandbox preserve-libs protect-owned strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersync xattr"
USE="X a52 aac acl acpi alsa amd64 bindist bluetooth branding bzip2 cairo cdda cdr cet crypt cups dbus dri dts dvd dvdr elogind encode exif flac gdbm gif gpm gtk gui iconv icu ipv6 jpeg lcms libnotify libtirpc mad mng mp3 mp4 mpeg multilib ncurses nls ogg opengl openmp pam pango pcre pdf png policykit ppds qml qt5 qt6 readline sdl seccomp sound spell ssl startup-notification svg test-rust tiff truetype udev udisks unicode upower usb vorbis vulkan wayland wxwidgets x264 xattr xcb xft xml xv xvid zlib python_targets_python3_13"
PYTHON_TARGETS="python3_13"
MAKE_CONF="/usr/local/chard/etc/portage/make.conf"
PKG_CONFIG_PATH="$CHARD_ROOT/usr/lib/pkgconfig:$CHARD_ROOT/lib/pkgconfig:$CHARD_ROOT/usr/share/pkgconfig:$CHARD_ROOT/share/pkgconfig:$PKG_CONFIG_PATH"
PKG_CONFIG="$CHARD_ROOT/usr/bin/pkg-config"
EOF

mkdir -p $CHARD_ROOT/etc
mkdir -p $CHARD_ROOT/usr/share/sandbox

cat > "$CHARD_ROOT/etc/sandbox.conf" <<'EOF'
SANDBOX_BASHRC="/usr/local/chard/usr/share/sandbox/sandbox.bashrc"
SANDBOX_D="/usr/local/chard/etc/sandbox.d"
ns-mount-off
ns-pid-off
ns-ipc-off
ns-net-off
ns-user-off
EOF

cat <<EOF > "$CHARD_ROOT/usr/share/sandbox/sandbox.bashrc"
export HOME="$CHARD_ROOT/root"
export USER="chronos"
export LOGNAME="chronos"
export PATH="$CHARD_ROOT/usr/bin:$CHARD_ROOT/bin:$PATH"
EOF


echo "${YELLOW}make.conf successfully updated for Chard.${RESET}"
echo "${GREEN}[+] Chard Rootready to run!"
echo "[!] To run, please open a new shell or run:"
echo "${RESET}${BOLD}${RED}source /home/chronos/user/.bashrc${RESET}"
