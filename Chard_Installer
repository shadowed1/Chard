#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

set -e

CHARD_ROOT="/usr/local/bin/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"
MUSL_GCC="$CHARD_ROOT/usr/bin/gcc -static"
MUSL_GXX="$CHARD_ROOT/usr/bin/g++ -static"

echo "[+] Creating Chard group and directories..."

sudo -E groupadd -f chard
sudo -E mkdir -p "$CHARD_ROOT"/{etc/portage,usr/portage,usr/bin,usr/lib,var/tmp,var/cache/distfiles,var/cache/packages,dev,tmp}
sudo -E chown -R root:chard "$CHARD_ROOT"
sudo -E chmod -R 2775 "$CHARD_ROOT"
sudo -E usermod -aG chard "$USER"

echo "[+] Downloading chard configuration files..."
sudo -E curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc   -o "$CHARD_ROOT/.chardrc"
sudo -E curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env   -o "$CHARD_ROOT/chard.env"
sudo -E curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/chard.logic"
sudo -E mkdir -p "$CHARD_ROOT/etc/portage/repos.conf"

sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc

if ! grep -Fxq "<<< CHARD ENV MARKER <<<" "/home/chronos/user/.bashrc"; then
    cat >> "/home/chronos/user/.bashrc" <<EOF

# <<< CHARD ENV MARKER <<<
source "$CHARD_RC"
# <<< END CHARD ENV MARKER <<<
EOF
    echo "[+] Chard sourced to ~/.bashrc"
else
    echo "${YELLOW}[!] Chard already sourced in ~/.bashrc"
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64)   GENTOO_ARCH="amd64" ;;
    i*86)     GENTOO_ARCH="x86" ;;
    aarch64)  GENTOO_ARCH="arm64" ;;
    armv7l)   GENTOO_ARCH="arm" ;;
    ppc64le)  GENTOO_ARCH="ppc64le" ;;
    *) echo "Unknown architecture: $ARCH"; exit 1 ;;
esac

MAKE_CONF="$CHARD_ROOT/etc/portage/make.conf"
echo "[+] Writing $MAKE_CONF..."
sudo -E bash -c "cat > '$MAKE_CONF' <<EOF
CHOST='${GENTOO_ARCH}-unknown-linux-gnu'
ARCH='${GENTOO_ARCH}'
ACCEPT_KEYWORDS='~${GENTOO_ARCH}'
ROOT='${CHARD_ROOT}'
CFLAGS='-O2 -pipe'
CXXFLAGS='\${CFLAGS}'
PORTAGE_TMPDIR='\${ROOT}/var/tmp'
DISTDIR='\${ROOT}/var/cache/distfiles'
PKGDIR='\${ROOT}/var/cache/packages'
EOF"

echo "[+] make.conf created with ARCH=${GENTOO_ARCH}"

PORTAGE_DIR="$CHARD_ROOT/usr/portage"
SNAPSHOT_URL="https://gentoo.osuosl.org/snapshots/portage-latest.tar.xz"
TMP_TAR="$CHARD_ROOT/var/tmp/portage-latest.tar.xz"

echo "[+] Downloading Portage tree snapshot..."
sudo -E curl -L -o "$TMP_TAR" "$SNAPSHOT_URL"

echo "[+] Extracting snapshot into $PORTAGE_DIR..."
sudo -E mkdir -p "$PORTAGE_DIR"
sudo -E tar -xJf "$TMP_TAR" -C "$PORTAGE_DIR" --strip-components=1
sudo -E rm -f "$TMP_TAR"

case "$GENTOO_ARCH" in
    amd64) AUTOBUILD_DIR="current-stage3-amd64-systemd" ;;
    x86)   AUTOBUILD_DIR="current-stage3-x86-systemd" ;;
    arm64) AUTOBUILD_DIR="current-stage3-arm64-systemd" ;;
    *) echo "Unsupported architecture: $GENTOO_ARCH"; exit 1 ;;
esac

BASE="https://gentoo.osuosl.org/releases/$GENTOO_ARCH/autobuilds/$AUTOBUILD_DIR/"
STAGE3_FILE=$(curl -fsSL "$BASE" | tr -d '\r' \
    | grep -o "stage3-$GENTOO_ARCH-systemd-[0-9]\+T[0-9]\+Z\.tar\.xz" \
    | sort | tail -n1)

if [ -z "$STAGE3_FILE" ]; then
    echo "ERROR: Could not determine stage3 tarball filename"
    exit 1
fi

TMP_STAGE3="$CHARD_ROOT/var/tmp/$STAGE3_FILE"
echo "[+] Downloading stage3 tarball..."
sudo -E curl -L -o "$TMP_STAGE3" "$BASE/$STAGE3_FILE"

echo "[+] Extracting stage3 into $CHARD_ROOT..."
sudo -E tar -xJf "$TMP_STAGE3" -C "$CHARD_ROOT" --strip-components=1
sudo -E rm -f "$TMP_STAGE3"

PROFILE_BASE="$PORTAGE_DIR/profiles/default/linux/$GENTOO_ARCH"
PROFILE_CANDIDATE=$(find "$PROFILE_BASE" -maxdepth 3 -type d -name "systemd" | sort | tail -n1)
if [ -n "$PROFILE_CANDIDATE" ]; then
    REL_TARGET=$(realpath --relative-to="$CHARD_ROOT/etc/portage" "$PROFILE_CANDIDATE")
    sudo -E ln -sfn "$REL_TARGET" "$CHARD_ROOT/etc/portage/.profile"
    echo "[+] Profile set to ${PROFILE_CANDIDATE#$PROFILE_BASE/}"
else
    echo "${YELLOW}[!] No systemd profile found under $PROFILE_BASE"
fi

sudo -E curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
sudo -E chmod +x "$CHARD_ROOT/bin/chard"

echo "[+] Bootstrapping musl toolchain..."
TOOLCHAIN_DIR="$CHARD_ROOT/usr/toolchain"
sudo -E mkdir -p "$TOOLCHAIN_DIR"

case "$ARCH" in
    x86_64) MUSL_ARCH="x86_64"; TOOLCHAIN_URL="https://musl.cc/x86_64-linux-musl-native.tgz" ;;
    aarch64) MUSL_ARCH="aarch64"; TOOLCHAIN_URL="https://musl.cc/aarch64-linux-musl-native.tgz" ;;
    *) echo "No musl toolchain available for $ARCH"; exit 1 ;;
esac

TOOLCHAIN_TAR="$CHARD_ROOT/var/tmp/$(basename "$TOOLCHAIN_URL")"
sudo -E curl -L -o "$TOOLCHAIN_TAR" "$TOOLCHAIN_URL"
sudo -E tar -xzf "$TOOLCHAIN_TAR" -C "$TOOLCHAIN_DIR" --strip-components=1
sudo -E rm -f "$TOOLCHAIN_TAR"

for bin in gcc g++ ar ld ranlib strip; do
    if [ -f "$TOOLCHAIN_DIR/bin/$MUSL_ARCH-linux-musl-$bin" ]; then
        sudo -E ln -sf "$TOOLCHAIN_DIR/bin/$MUSL_ARCH-linux-musl-$bin" "$CHARD_ROOT/usr/bin/$bin"
    fi
done

echo "[+] Musl toolchain installed and symlinked into $CHARD_ROOT/usr/bin"

sudo -E ln -sf /usr/local/bin/chard/usr/toolchain/bin/x86_64-linux-musl-gcc     /usr/local/bin/chard/usr/toolchain/bin/musl-gcc
sudo -E ln -sf /usr/local/bin/chard/usr/toolchain/bin/x86_64-linux-musl-g++     /usr/local/bin/chard/usr/toolchain/bin/musl-g++
sudo -E ln -sf /usr/local/bin/chard/usr/toolchain/bin/x86_64-linux-musl-cc      /usr/local/bin/chard/usr/toolchain/bin/cc
sudo -E ln -sf /usr/local/bin/chard/usr/toolchain/bin/x86_64-linux-musl-c++    /usr/local/bin/chard/usr/toolchain/bin/c++
sudo ln -sf $CHARD_ROOT/usr/toolchain/bin/ar     $CHARD_ROOT/usr/bin/ar
sudo ln -sf $CHARD_ROOT/usr/toolchain/bin/ranlib $CHARD_ROOT/usr/bin/ranlib
sudo ln -sf libmpfr.so.X.Y.Z /usr/local/bin/chard/lib/libmpfr.so.6

sudo -E mkdir -p /usr/local/bin/chard/var/tmp
echo 'int main(){return 0;}' | sudo -E tee "$CHARD_ROOT/var/tmp/test.c"
sudo -E $MUSL_GCC -o "$CHARD_ROOT/var/tmp/test" "$CHARD_ROOT/var/tmp/test.c"
sudo -E "$CHARD_ROOT/var/tmp/test" && echo "Musl gcc works!"

BINUTILS_VERSION="2.45"
BINUTILS_TAR="binutils-$BINUTILS_VERSION.tar.xz"
BINUTILS_URL="https://ftp.gnu.org/gnu/binutils/$BINUTILS_TAR"

BUILD_DIR="$CHARD_ROOT/var/tmp/build"
sudo -E mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

echo "[+] Downloading binutils $BINUTILS_VERSION..."
sudo -E curl -L -o "$BINUTILS_TAR" "$BINUTILS_URL"

echo "[+] Extracting binutils $BINUTILS_VERSION..."
sudo -E tar -xf "$BINUTILS_TAR"

cd "$BUILD_DIR/binutils-$BINUTILS_VERSION"

export PATH="$CHARD_ROOT/usr/bin:$PATH"
export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH"

CC="$CHARD_ROOT/usr/bin/gcc"
CXX="$CHARD_ROOT/usr/bin/g++"
AR="$CHARD_ROOT/usr/bin/ar"
RANLIB="$CHARD_ROOT/usr/bin/ranlib"
CFLAGS="-O2 -pipe -static"
CXXFLAGS="-O2 -pipe -static"
LDFLAGS="-static"

sudo -E env \
    PATH="$PATH" \
    CC="$CC" CXX="$CXX" AR="$AR" RANLIB="$RANLIB" \
    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" \
    ./configure --prefix="$CHARD_ROOT/usr" \
        --disable-nls \
        --disable-werror \
        --enable-static \
        --disable-shared

sudo -E make -j"$(nproc)"
sudo -E make install

BINUTILS_VERSION="2.45"
BINUTILS_TAR="binutils-$BINUTILS_VERSION.tar.xz"
BINUTILS_URL="https://ftp.gnu.org/gnu/binutils/$BINUTILS_TAR"

BUILD_DIR="$CHARD_ROOT/var/tmp/build"
sudo -E mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

echo "[+] Downloading binutils $BINUTILS_VERSION..."
sudo -E curl -L -o "$BINUTILS_TAR" "$BINUTILS_URL"
sudo -E tar -xf "$BINUTILS_TAR"
cd "$BUILD_DIR/binutils-$BINUTILS_VERSION"
export PATH="$CHARD_ROOT/usr/bin:$PATH"
export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH"

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    ./configure --prefix="$CHARD_ROOT/usr" \
        --disable-nls \
        --disable-werror \
        --enable-static \
        --disable-shared

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    make -j"$(nproc)"
sudo -E make install

GMP_VERSION="6.3.0"
GMP_TAR="gmp-$GMP_VERSION.tar.xz"
GMP_URL="https://gmplib.org/download/gmp/$GMP_TAR"

cd "$BUILD_DIR"
sudo -E curl -L -o "$GMP_TAR" "$GMP_URL"
sudo -E tar -xf "$GMP_TAR"
cd "$BUILD_DIR/gmp-$GMP_VERSION"

export PATH="$CHARD_ROOT/usr/bin:$PATH"
export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH"

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    ./configure --prefix="$CHARD_ROOT/usr" \
        --enable-static --disable-shared

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    make -j"$(nproc)"
sudo -E make install

MPFR_VERSION="4.2.2"
MPFR_TAR="mpfr-$MPFR_VERSION.tar.xz"
MPFR_URL="https://www.mpfr.org/mpfr-current/$MPFR_TAR"

cd "$BUILD_DIR"
sudo -E curl -L -o "$MPFR_TAR" "$MPFR_URL"
sudo -E tar -xf "$MPFR_TAR"
cd "$BUILD_DIR/mpfr-$MPFR_VERSION"

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    ./configure --prefix="$CHARD_ROOT/usr" \
        --with-gmp="$CHARD_ROOT/usr" \
        --enable-static --disable-shared

export PATH="$CHARD_ROOT/usr/bin:$PATH"
export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH"

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    make -j"$(nproc)"
sudo -E make install

GAWK_VERSION="5.3.2"
GAWK_TAR="gawk-$GAWK_VERSION.tar.xz"
GAWK_URL="https://ftp.gnu.org/gnu/gawk/$GAWK_TAR"

cd "$BUILD_DIR"
sudo -E curl -L -o "$GAWK_TAR" "$GAWK_URL"
sudo -E tar -xf "$GAWK_TAR"
cd "$BUILD_DIR/gawk-$GAWK_VERSION"

export PATH="$CHARD_ROOT/usr/bin:$PATH"
export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH"

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    ./configure --prefix="$CHARD_ROOT/usr" \
        --with-gmp="$CHARD_ROOT/usr" \
        --with-mpfr="$CHARD_ROOT/usr" \
        --disable-dependency-tracking

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    make -j"$(nproc)"
sudo -E make install

echo "[+] Bootstrapping diffutils (provides cmp, diff)..."

DIFFUTILS_VERSION="3.12"
DIFFUTILS_TAR="diffutils-$DIFFUTILS_VERSION.tar.xz"
DIFFUTILS_URL="https://ftp.gnu.org/gnu/diffutils/$DIFFUTILS_TAR"

BUILD_DIR="$CHARD_ROOT/var/tmp/build"
sudo -E mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"
sudo -E curl -L -o "$DIFFUTILS_TAR" "$DIFFUTILS_URL"
sudo -E tar -xf "$DIFFUTILS_TAR"

cd "$BUILD_DIR/diffutils-$DIFFUTILS_VERSION"
export PATH="$CHARD_ROOT/usr/bin:$PATH"
export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH"

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" \
    CC="$MUSL_GCC" CXX="$MUSL_GXX" SED="$CHARD_ROOT/usr/bin/gsed" \
    ./configure --prefix="$CHARD_ROOT/usr" --disable-dependency-tracking

sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    make -j"$(nproc)"
sudo -E env PATH="$CHARD_ROOT/usr/bin:$PATH" MAKE="$CHARD_ROOT/usr/bin/make" \
    make install

sudo -E rm -rf "$BUILD_DIR"
echo "[+] diffutils $DIFFUTILS_VERSION installed into $CHARD_ROOT/usr/bin"

CHROME_PYTHON=/usr/bin/python3
echo "[+] Bootstrapping Git using ChromeOS Python ($CHROME_PYTHON)..."

GIT_VERSION="2.51.0"
GIT_TAR="git-$GIT_VERSION.tar.gz"
GIT_URL="https://mirrors.edge.kernel.org/pub/software/scm/git/$GIT_TAR"

BUILD_DIR="$CHARD_ROOT/var/tmp/build"
sudo -E mkdir -p "$BUILD_DIR"
sudo -E chown root:chard "$BUILD_DIR"
sudo -E chmod 2775 "$BUILD_DIR"

cd "$BUILD_DIR"
sudo -E curl -L -o "$GIT_TAR" "$GIT_URL"
sudo -E tar -xzf "$GIT_TAR"
cd "git-$GIT_VERSION"

export PATH="$CHARD_ROOT/usr/bin:$PATH"
export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH"
