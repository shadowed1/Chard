#!/bin/bash
IFS=$'\n\t'

CHARD_ROOT="${CHARD_ROOT:-/usr/local/chard}"
CHARD_RC="$CHARD_ROOT/.chardrc"
TMPDIR="/tmp/chard.$$"
mkdir -p "$TMPDIR"

cleanup() { rm -rf "$TMPDIR"; }
trap cleanup EXIT

log() { printf '%b\n' "$*"; }
err() { printf '%b\n' "$*" >&2; }

if [[ -f "$CHARD_RC" ]]; then
    source "$CHARD_RC"
else
    err "[!] Warning: $CHARD_RC not found. Continuing but the chard env may not be set."
fi

detect_arch() {
    local u
    u="$(uname -m)"
    case "$u" in
        x86_64) echo "x86_64" ;;
        aarch64|arm64) echo "aarch64" ;;
        *) echo "$u" ;;
    esac
}

ARCH="$(detect_arch)"

download() {
    local url="$1"
    local out="$2"
    if command -v curl >/dev/null 2>&1; then
        curl -L --fail --silent --show-error -o "$out" "$url"
        return $?
    elif command -v wget >/dev/null 2>&1; then
        wget -q -O "$out" "$url"
        return $?
    else
        err "curl or wget required to download."
        return 2
    fi
}

extract_to_chard() {
    local file="$1"
    local target="$CHARD_ROOT"
    mkdir -p "$target"

    case "$file" in
        *.pkg.tar.zst|*.tar.zst|*.zst)
            if command -v unzstd >/dev/null 2>&1; then
                sudo tar --use-compress-program=unzstd -xvf "$file" -C "$target"
            elif command -v zstd >/dev/null 2>&1; then
                zstd -d -c "$file" | sudo tar -xvf - -C "$target"
            else
                err "zstd/unzstd required to extract $file"
                return 1
            fi
            ;;
        *.tar.xz|*.pkg.tar.xz|*.txz)
            sudo tar -xJvf "$file" -C "$target"
            ;;
        *.tar.gz|*.tgz|*.pkg.tar.gz)
            sudo tar -xvzf "$file" -C "$target"
            ;;
        *.tar.bz2|*.tbz2)
            sudo tar -xvjf "$file" -C "$target"
            ;;
        *.zip)
            if command -v unzip >/dev/null 2>&1; then
                sudo unzip -o "$file" -d "$target"
            else
                err "unzip required to extract $file"
                return 1
            fi
            ;;
        *.tar)
            sudo tar -xvf "$file" -C "$target"
            ;;
        *)
            err "Unknown archive type: $file"
            return 1
            ;;
    esac

    sudo find "$target/usr/bin" -type f -exec chmod 755 {} + 2>/dev/null || true
    sudo find "$target/bin" -type f -exec chmod 755 {} + 2>/dev/null || true
    sudo find "$target/usr/lib" -type f -exec chmod 644 {} + 2>/dev/null || true
    sudo find "$target/usr/lib64" -type f -exec chmod 644 {} + 2>/dev/null || true

    return 0
}

resolve_arch_download_url() {
    local pkg="$1"
    local arch="$2"
    local repos
    if [[ "$arch" == "x86_64" ]]; then
        repos=(core extra community multilib)
        for r in "${repos[@]}"; do
            url="https://archlinux.org/packages/${r}/${arch}/${pkg}/download"
            if command -v curl >/dev/null 2>&1; then
                local eff
                eff="$(curl -sSL -w '%{url_effective}' -o /dev/null "$url" 2>/dev/null || true)"
                if [[ -n "$eff" && "$eff" != "$url" ]]; then
                    echo "$eff"
                    return 0
                fi
            else
                # if no curl, return the constructed url (best-effort)
                echo "$url"
                return 0
            fi
        done
        return 1
    elif [[ "$arch" == "aarch64" ]]; then    
        local ARM_MIRROR="http://mirror.archlinuxarm.org/aarch64"
        for repo in core extra; do
            local pkgpage="$ARM_MIRROR/$repo/$pkg"
            if command -v curl >/dev/null 2>&1; then
                local eff
                eff="$(curl -sSL -w '%{url_effective}' -o /dev/null "$pkgpage" 2>/dev/null || true)"
                if [[ -n "$eff" ]]; then
                    echo "$pkgpage"
                    return 0
                fi
            else
                echo "$pkgpage"
                return 0
            fi
        done
        return 1
    else
        return 1
    fi
}

install_from_url_or_file() {
    local input="$1"
    local tmp="$TMPDIR/down"
    mkdir -p "$TMPDIR"

    if [[ "$input" =~ ^https?:// ]]; then
        log "[*] Downloading: $input"
        download "$input" "$tmp" || {
            err "Download failed: $input"
            return 1
        }
        file="$tmp"
    elif [[ -f "$input" ]]; then
        file="$input"
    else
        err "File or URL not found: $input"
        return 1
    fi

    if head -c 256 "$file" | grep -qiE '<html|<!doctype|<head'; then
        err "Downloaded file appears to be HTML (likely an error page): $input"
        return 1
    fi

    log "[*] Extracting $(basename "$file") into $CHARD_ROOT"
    extract_to_chard "$file"
    log "[+] Done installing $(basename "$file") into $CHARD_ROOT"
    return 0
}

install_by_pkgname() {
    local pkg="$1"
    local arch="$ARCH"
    local resolved
    log "[*] Attempting to resolve package '$pkg' for arch $arch ..."

    resolved="$(resolve_arch_download_url "$pkg" "$arch" || true)"
    if [[ -z "$resolved" ]]; then
        err "Could not automatically locate package '$pkg' for arch $arch. Try passing a full package URL or local file."
        return 1
    fi

    if [[ "$resolved" =~ archlinux.org/packages/ ]]; then
        if command -v curl >/dev/null 2>&1; then
            final="$(curl -sSL -w '%{url_effective}' -o /dev/null "$resolved" 2>/dev/null || true)"
            if [[ -z "$final" || "$final" == "$resolved" ]]; then
                err "Could not resolve final download URL for $pkg (redirect failed)."
                return 1
            fi
            install_from_url_or_file "$final"
            return $?
        else
            err "curl required to resolve archlinux.org redirects; please supply a full URL."
            return 1
        fi
    else
        if install_from_url_or_file "$resolved"; then
            return 0
        fi

        err "Automatic install failed for $pkg (tried: $resolved)."
        return 1
    fi
}

remove_pkg() {
    local target="$1"
    if [[ -d "$CHARD_ROOT/$target" ]]; then
        log "[*] Removing directory: $CHARD_ROOT/$target"
        sudo rm -rf "$CHARD_ROOT/$target"
        log "[+] Removed $CHARD_ROOT/$target"
        return 0
    elif [[ -e "$target" && "$target" == "$CHARD_ROOT"* ]]; then
        log "[*] Removing path: $target"
        sudo rm -rf "$target"
        log "[+] Removed $target"
        return 0
    else
        local found
        found="$(sudo find "$CHARD_ROOT" -maxdepth 3 -type d -name "$target" -print -quit 2>/dev/null || true)"
        if [[ -n "$found" ]]; then
            log "[*] Removing found: $found"
            sudo rm -rf "$found"
            log "[+] Removed $found"
            return 0
        fi
        err "No matching package or path found for: $target"
        return 1
    fi
}

if [[ $# -lt 1 ]]; then
    cat <<EOF
Usage: chard <command> [args...]

Commands:
  -S <pkg>         Download & install Arch/ArchARM package (best-effort)
  -U <url|file>    Install from local file or direct archive URL
  -R <pkg|path>    Remove package directory or path from CHARD_ROOT
  root             Start interactive shell sourcing chard env
  reinstall        Quick reinstall chard scripts (pull from github)
  uninstall        Remove entire CHARD_ROOT and un-source .bashrc marker

If <command> is not one of the above, it will be executed inside
the chard environment with adjusted PATH and LD_LIBRARY_PATH.
EOF
    exit 1
fi

cmd="$1"; shift

case "$cmd" in
    -S)
        if [[ $# -lt 1 ]]; then err "-S requires a package name"; exit 2; fi
        install_by_pkgname "$1"
        ;;
    -U)
        if [[ $# -lt 1 ]]; then err "-U requires a URL or file path"; exit 2; fi
        install_from_url_or_file "$1"
        ;;
    -R)
        if [[ $# -lt 1 ]]; then err "-R requires a package name or path"; exit 2; fi
        remove_pkg "$1"
        ;;
    root)
        echo "[*] Entering interactive chard shell"
        env \
          PATH="$CHARD_ROOT/usr/bin:$CHARD_ROOT/bin:$PATH" \
          LD_LIBRARY_PATH="$CHARD_ROOT/lib64:$CHARD_ROOT/usr/lib64:$CHARD_ROOT/lib:$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH" \
          bash --noprofile --norc -i
        ;;
    reinstall)
        log "[*] Performing quick reinstall of chard scripts..."
        sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc -o "$CHARD_ROOT/.chardrc" || true
        sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env -o "$CHARD_ROOT/.chard.env" || true
        sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/.chard.logic" || true
        sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard" || true
        sudo chmod +x "$CHARD_ROOT/bin/chard" || true
        log "[+] Reinstall complete."
        ;;
    uninstall)
        read -r -p "Are you sure you want to remove $CHARD_ROOT and chard entries from ~/.bashrc? [y/N] " ans
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            log "[*] Removing $CHARD_ROOT ..."
            sudo rm -rf "$CHARD_ROOT"
            sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc 2>/dev/null || true
            log "[+] Uninstalled."
        else
            log "Cancelled."
        fi
        ;;
    *)
        env \
          PATH="$CHARD_ROOT/usr/bin:$CHARD_ROOT/bin:$PATH" \
          LD_LIBRARY_PATH="$CHARD_ROOT/lib64:$CHARD_ROOT/usr/lib64:$CHARD_ROOT/lib:$CHARD_ROOT/usr/lib:$LD_LIBRARY_PATH" \
          "$cmd" "$@"
        ;;
esac

    *)
        err "Unknown command: $cmd"
        exit 2
        ;;
esac
