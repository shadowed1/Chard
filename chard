#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"

if [ -f "$CHARD_RC" ]; then
    source "$CHARD_RC"
else
    echo "ERROR: Chard environment missing. Run installer first."
    exit 1
fi

CHARD_BASH="/bin/bash"
if [ ! -x "$CHARD_BASH" ]; then
    echo "ERROR: /bin/bash not found on host system!"
    return 1
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH"; exit 1 ;;
esac

chard_run() {
    if [ $# -lt 1 ]; then
        echo "Usage: chard run <binary> [args...]"
        return 1
    fi

    DEFAULT_FEATURES="assume-digests binpkg-docompress binpkg-dostrip binpkg-logs config-protect-if-modified distlocks ebuild-locks fixlafiles ipc-sandbox merge-sync multilib-strict network-sandbox news parallel-fetch pid-sandbox preserve-libs protect-owned strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersync xattr"
    export FEATURES="${FEATURES:-$DEFAULT_FEATURES}"
    DEFAULT_USE="X a52 aac acl acpi alsa amd64 bindist bluetooth branding bzip2 cairo cdda cdr cet crypt cups dbus dri dts dvd dvdr elogind encode exif flac gdbm gif gpm gtk gui iconv icu ipv6 jpeg lcms libnotify libtirpc mad mng mp3 mp4 mpeg multilib ncurses nls ogg opengl openmp pam pango pcre pdf png policykit ppds qml qt5 qt6 readline sdl seccomp sound spell ssl startup-notification svg test-rust tiff truetype udev udisks unicode upower usb vorbis vulkan wayland wxwidgets x264 xattr xcb xft xml xv xvid zlib python_targets_python3_13"
    export USE="${USE:-$DEFAULT_USE}"

    export USE="python_targets_python3_13"
    export PYTHON_TARGETS="python3_13"
    export PYTHON_SINGLE_TARGET="python3_13"


    export ROOT="$CHARD_ROOT"
    export PORTAGE_CONFIGROOT="$CHARD_ROOT"
    export PORTAGE_TMPDIR="$CHARD_ROOT/var/tmp"
    export DISTDIR="$CHARD_ROOT/var/cache/distfiles"
    export PKGDIR="$CHARD_ROOT/var/cache/packages"
    export PATH="$CHARD_ROOT/bin:$CHARD_ROOT/usr/bin:$CHARD_ROOT/bin:$CHARD_ROOT/usr/$CHOST/gcc-bin/14:$PATH"
    export LD_LIBRARY_PATH="$CHARD_ROOT/usr/lib:$CHARD_ROOT/lib:${LD_LIBRARY_PATH:-}"
    export LD_PRELOAD="$CHARD_ROOT/usr/lib64/libpython3.13.so.1.0"
    export SANDBOX="$CHARD_ROOT/usr/bin/sandbox"

    echo "[*] Running '$*' inside Chard environment..."
    env ROOT="$ROOT" \
        PYTHONPATH="$CHARD_ROOT/usr/lib/python3.13/site-packages:$PYTHONPATH" \
        PORTAGE_CONFIGROOT="$PORTAGE_CONFIGROOT" \
        HOME="$CHARD_ROOT/root" \
        PORTAGE_TMPDIR="$PORTAGE_TMPDIR" \
        DISTDIR="$DISTDIR" \
        PKGDIR="$PKGDIR" \
        PATH="$CHARD_ROOT/usr/bin:$CHARD_ROOT/usr/lib/python-exec:$CHARD_ROOT/bin:$CHARD_ROOT/usr/$CHOST/gcc-bin/14:$PATH" \
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH" \
        LD_PRELOAD="$LD_PRELOAD" \
        SANDBOX="$CHARD_ROOT/usr/bin/sandbox" \
        FEATURES="${FEATURES:-$DEFAULT_FEATURES}" \
        USE="$USE" \
        PYTHON_TARGETS="python3_13" \
        PYTHON_SINGLE_TARGET="python3_13" \
        PYTHONPATH="$CHARD_ROOT/usr/lib/python3.13/site-packages:$PYTHONPATH" \
        BASH="$CHARD_BASH" \
        USE="$USE" \
        "$@"
}


chard_build() {
    BUILD_SOURCE="/home/chronos/user/MyFiles/Downloads/chard_build"
    BUILD_TMP="$CHARD_ROOT/tmp"
    mkdir -p "$BUILD_TMP"
    echo "${GREEN}[*] Scanning $BUILD_SOURCE for archives...${RESET}"
    shopt -s nullglob
    ARCHIVES=("$BUILD_SOURCE"/*.{tar.gz,tgz,tar.xz,tar.bz2,zip})
    shopt -u nullglob
    if [ ${#ARCHIVES[@]} -eq 0 ]; then
        echo "${RED}[!] No archives found in $BUILD_SOURCE${RESET}"
        exit 1
    fi
    for ARCHIVE in "${ARCHIVES[@]}"; do
        BASENAME=$(basename "$ARCHIVE")
        NAME="${BASENAME%%.*}"
        echo "${YELLOW}[+] Processing $BASENAME${RESET}"
        TMP_DIR="$BUILD_TMP/$NAME"
        mkdir -p "$TMP_DIR"
        echo "[*] Extracting $BASENAME..."
        case "$ARCHIVE" in
            *.tar.gz|*.tgz)
                tar -xzf "$ARCHIVE" -C "$TMP_DIR"
                ;;
            *.tar.xz)
                tar -xJf "$ARCHIVE" -C "$TMP_DIR"
                ;;
            *.tar.bz2)
                tar -xjf "$ARCHIVE" -C "$TMP_DIR"
                ;;
            *.zip)
                unzip -q "$ARCHIVE" -d "$TMP_DIR"
                ;;
            *)
                echo "${RED}[!] Unknown archive format: $ARCHIVE"; continue
                ;;
        esac

        BUILD_SYSTEM=""
        if [ -f "$TMP_DIR/configure" ]; then
            BUILD_SYSTEM="gnu"
        elif [ -f "$TMP_DIR/meson.build" ]; then
            BUILD_SYSTEM="meson"
        elif [ -f "$TMP_DIR/setup.py" ]; then
            BUILD_SYSTEM="python"
        elif [ -f "$TMP_DIR/Makefile.PL" ]; then
            BUILD_SYSTEM="perl"
        elif [ -f "$TMP_DIR/Makefile" ]; then
            BUILD_SYSTEM="makefile"
        else
            echo "${RED}[!] Could not detect build system for $NAME, skipping.${RESET}"
            rm -rf "$TMP_DIR"
            continue
        fi
        cp /etc/resolv.conf /usr/local/chard/etc/resolv.conf
        echo "[*] Detected build system: $BUILD_SYSTEM"
        echo "${GREEN}[+] Mounting Chard Chroot for build...${RESET}"
        mountpoint -q "$CHARD_ROOT/proc"    || sudo mount -t proc proc "$CHARD_ROOT/proc"
        mountpoint -q "$CHARD_ROOT/sys"     || sudo mount -t sysfs sys "$CHARD_ROOT/sys"
        mountpoint -q "$CHARD_ROOT/dev"     || sudo mount --bind /dev "$CHARD_ROOT/dev"
        mountpoint -q "$CHARD_ROOT/dev/shm" || sudo mount --bind /dev/shm "$CHARD_ROOT/dev/shm"
        mountpoint -q "$CHARD_ROOT/etc/resolv.conf" || sudo mount --bind /etc/resolv.conf "$CHARD_ROOT/etc/resolv.conf"

        sudo chroot "$CHARD_ROOT" /bin/bash -c "
            cd /tmp/$NAME
            case \"$BUILD_SYSTEM\" in
                gnu)
                    ./configure --prefix=/usr --disable-dependency-tracking
                    make -j\$(nproc)
                    make install
                    ;;
                meson)
                    meson setup build --prefix=/usr
                    ninja -C build
                    ninja -C build install
                    ;;
                python)
                    /usr/bin/python3 setup.py build
                    /usr/bin/python3 setup.py install --prefix=/usr
                    ;;
                perl)
                    perl Makefile.PL INSTALL_BASE=/usr/local
                    make
                    make test || true
                    make install
                    ;;
                makefile)
                    make -j\$(nproc)
                    make install
                    ;;
                *)
                    echo 'Unknown build system'
                    exit 1
                    ;;
            esac
        "
        echo "${MAGENTA}[+] Finished building $NAME${RESET}"
        echo "[*] Cleaning up temporary build directory..."
        sudo rm -rf "$TMP_DIR"
    done
    echo "${GREEN}[+] All builds complete.${RESET}"
    sudo umount -l "$CHARD_ROOT/dev/shm"       2>/dev/null || true
    sudo umount -l "$CHARD_ROOT/dev"           2>/dev/null || true
    sudo umount -l "$CHARD_ROOT/sys"           2>/dev/null || true
    sudo umount -l "$CHARD_ROOT/proc"          2>/dev/null || true
    sudo umount -l "$CHARD_ROOT/etc/resolv.conf" 2>/dev/null || true
}

cmd="$1"; shift || true

case "$cmd" in
    ""|run)
        chard_run "$@"
        ;;
    help)
        echo "${GREEN}Chard command examples:"
        echo "  python, gcc, Et al....   - Run all available binaries from the Chard environment!"
        echo "  reinstall                - Reinstall or update Chard"
        echo "  uninstall                - Remove Chard environment and entries"
        echo "  categories | cat         - List available Portage categories"
        echo    chard build              - Place downloads in your Downloads/chard_build folder and chard will build them to $CHARD_ROOT"
        echo "  help                     - Show this help message"
        echo
        echo "Examples:"
        echo "  chard emerge app-misc/foo"
        echo "  chard cat"
        echo "  chard python"
        echo "${RESET}"
        ;;
    reinstall)
        echo "${RESET}${GREEN}"
        echo "[1] Quick Reinstall (Update Chard)"
        echo "${RESET}${YELLOW}[2] Full Reinstall (Run Chard Installer)"
        echo "${RESET}${RED}[q] Cancel"
        echo "${RESET}${GREEN}"
        read -p "Choose an option [1/2/q]: " choice
        case "$choice" in
            1)
                echo "${RESET}[*] Performing quick reinstall..."
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc -o "$CHARD_ROOT/.chardrc"
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env -o "$CHARD_ROOT/chard.env"
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/chard.logic"
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
                sudo chmod +x "$CHARD_ROOT/bin/chard"
                echo "[*] Quick reinstall complete.${RESET}"
                ;;
            2)
                echo "${RESET}[*] Performing full reinstall..."
                bash <(curl -s "https://raw.githubusercontent.com/shadowed1/Chard/main/Chard_Installer?$(date +%s)")
                ;;
            q|Q|*)
                echo "${RESET}[*] Reinstall cancelled.${RESET}"
                ;;
        esac
        ;;
    uninstall)
        read -r -p "Are you sure you want to remove $CHARD_ROOT and chard entries from ~/.bashrc? [y/N] " ans
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            echo "${RED}[*] Removing $CHARD_ROOT"
            sudo rm -rf "$CHARD_ROOT"
            sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc 2>/dev/null || true
            echo "[+] Uninstalled.${RESET}"
        else
            echo "${RED}[*] Cancelled.${RESET}"
        fi
        ;;
    categories|cat)
        PORTAGE_DIR="$CHARD_ROOT/usr/portage"
        if [ ! -d "$PORTAGE_DIR" ]; then
            echo "ERROR: Portage tree not found at $PORTAGE_DIR"
            exit 1
        fi
        echo "${GREEN}[*] Available Portage categories in $CHARD_ROOT/usr/portage:${RESET}"
        for cat in "$PORTAGE_DIR"/*/; do
            [ -d "$cat" ] || continue
            basename "$cat"
        done | sort
        ;;
    build)
        chard_build
        ;;
    *)
        chard_run "$cmd" "$@"
        ;;
esac
