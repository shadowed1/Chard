#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

CHARD_ROOT="/usr/local/chard"
CHARD_RC="$CHARD_ROOT/.chardrc"

if [ -f "$CHARD_RC" ]; then
    source "$CHARD_RC"
else
    echo "ERROR: Chard environment missing. Run installer first."
    exit 1
fi

CHARD_BASH="/bin/bash"
if [ ! -x "$CHARD_BASH" ]; then
    echo "ERROR: /bin/bash not found on host system!"
    return 1
fi

ARCH=$(uname -m)
case "$ARCH" in
    x86_64) CHOST=x86_64-pc-linux-gnu ;;
    aarch64) CHOST=aarch64-unknown-linux-gnu ;;
    *) echo "Unknown architecture: $ARCH"; exit 1 ;;
esac

chard_run() {
    if [ $# -lt 1 ]; then
        echo "${GREEN}chard ${RESET}${RED}binary${YELLOW} --args${RESET}"
        return 1
    fi

    DEFAULT_FEATURES="assume-digests binpkg-docompress binpkg-dostrip binpkg-logs config-protect-if-modified distlocks ebuild-locks fixlafiles ipc-sandbox merge-sync multilib-strict network-sandbox news parallel-fetch pid-sandbox preserve-libs protect-owned strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersync xattr"
    export FEATURES="${FEATURES:-$DEFAULT_FEATURES}"
    DEFAULT_USE="X a52 aac acl acpi alsa amd64 bindist bluetooth branding bzip2 cairo cdda cdr cet crypt cups dbus dri dts dvd dvdr elogind encode exif flac gdbm gif gpm gtk gui iconv icu ipv6 jpeg lcms libnotify libtirpc mad mng mp3 mp4 mpeg multilib ncurses nls ogg opengl openmp pam pango pcre pdf png policykit ppds qml qt5 qt6 readline sdl seccomp sound spell ssl startup-notification svg test-rust tiff truetype udev udisks unicode upower usb vorbis vulkan wayland wxwidgets x264 xattr xcb xft xml xv xvid zlib python_targets_python3_13"
    export USE="${USE:-$DEFAULT_USE}"
    export GIT_EXEC_PATH="$CHARD_ROOT/usr/libexec/git-core"
    export HOME="$CHARD_ROOT/home/chronos/user"
    export PYTHONPATH="$CHARD_ROOT/usr/lib/python3.13/site-packages:$PYTHONPATH" \
    export PYTHON_TARGETS="python3_13"
    export PYTHON_SINGLE_TARGET="python3_13"
    export CFLAGS="-O2 -pipe -I$CHARD_ROOT/usr/include -I$CHARD_ROOT/include -I$CHARD_ROOT/usr/include/duktape $CFLAGS"
    export CXXFLAGS="-O2 -pipe -I$CHARD_ROOT/usr/include -I$CHARD_ROOT/include -I$CHARD_ROOT/usr/include/duktape $CXXFLAGS"
    export ROOT="$CHARD_ROOT"
    export PORTAGE_CONFIGROOT="$CHARD_ROOT"
    export PORTAGE_TMPDIR="$CHARD_ROOT/var/tmp"
    export DISTDIR="$CHARD_ROOT/var/cache/distfiles"
    export PKGDIR="$CHARD_ROOT/var/cache/packages"
    export PATH="$CHARD_ROOT/bin:$CHARD_ROOT/usr/bin:$CHARD_ROOT/usr/$CHOST/gcc-bin/14:$HOME/.cargo/bin:$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib:$CHARD_ROOT/usr/lib/python-exec:$PATH"
    export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:-}:$CHARD_ROOT/usr/lib:$CHARD_ROOT/lib:$CHARD_ROOT/usr/lib/gcc/$CHOST/14:$CHARD_ROOT/usr/$CHOST/gcc-bin/14"
    export LD_PRELOAD="$CHARD_ROOT/usr/lib64/libpython3.13.so.1.0:$CHARD_ROOT/usr/lib64/libunistring.so.5"
    export SANDBOX="$CHARD_ROOT/usr/bin/sandbox"
    export GIT_TEMPLATE_DIR=$CHARD_ROOT/usr/share/git-core/templates

    export LD_PRELOAD="$CHARD_ROOT/usr/lib64/libpython3.13.so.1.0 \
                                 $CHARD_ROOT/usr/lib64/libb2.so.1 \
                            $CHARD_ROOD/usr/lib64/libcrypto.so.3"

    echo "[*] Running '$*' inside Chard environment..."
    env \
        ROOT="$ROOT" \
        PORTAGE_CONFIGROOT="$PORTAGE_CONFIGROOT" \
        PORTAGE_TMPDIR="$PORTAGE_TMPDIR" \
        DISTDIR="$DISTDIR" \
        PKGDIR="$PKGDIR" \
        PATH="$PATH" \
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH" \
        SANDBOX="$SANDBOX" \
        FEATURES="$FEATURES" \
        USE="$USE" \
        PYTHON_TARGETS="$PYTHON_TARGETS" \
        PYTHON_SINGLE_TARGET="$PYTHON_SINGLE_TARGET" \
        PYTHONPATH="$PYTHONPATH" \
        HOME="$HOME" \
        "$@"
}

cmd="$1"; shift || true

case "$cmd" in
    ""|run)
        chard_run "$@"
        ;;
    help)
        echo "${GREEN}Chard command examples:"
        echo "  python, gcc, Et al....   - Run all available binaries from the Chard environment!"
        echo "  reinstall                - Reinstall or update Chard"
        echo "  uninstall                - Remove Chard environment and entries"
        echo "  categories | cat         - List available Portage categories"
        echo "  help                     - Show this help message"
        echo
        echo "Examples:"
        echo "  chard emerge app-misc/foo"
        echo "  chard cat"
        echo "  chard python"
        echo "${RESET}"
        ;;
    reinstall)
        echo "${RESET}${GREEN}"
        echo "[1] Quick Reinstall (Update Chard)"
        echo "${RESET}${YELLOW}[2] Full Reinstall (Run Chard Installer)"
        echo "${RESET}${RED}[q] Cancel"
        echo "${RESET}${GREEN}"
        read -p "Choose an option [1/2/q]: " choice
        case "$choice" in
            1)
                echo "${RESET}[*] Performing quick reinstall..."
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chardrc -o "$CHARD_ROOT/.chardrc"
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.env -o "$CHARD_ROOT/chard.env"
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/.chard.logic -o "$CHARD_ROOT/chard.logic"
                sudo curl -fsSL https://raw.githubusercontent.com/shadowed1/Chard/main/chard -o "$CHARD_ROOT/bin/chard"
                sudo chmod +x "$CHARD_ROOT/bin/chard"
                echo "[*] Quick reinstall complete.${RESET}"
                ;;
            2)
                echo "${RESET}[*] Performing full reinstall..."
                bash <(curl -s "https://raw.githubusercontent.com/shadowed1/Chard/main/Chard_Installer?$(date +%s)")
                ;;
            q|Q|*)
                echo "${RESET}[*] Reinstall cancelled.${RESET}"
                ;;
        esac
        ;;
    uninstall)
        read -r -p "${RED}${BOLD}Are you sure you want to remove $CHARD_ROOT and chard entries from ~/.bashrc? [y/N] ${RESET}" ans
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            echo "${RESET}${MAGENTA}[*] Unmounting active bind mounts...${RESET}"
            sudo umount -l "/usr/local/chard/dev/shm" 2>/dev/null || true
            sudo umount -l "/usr/local/chard/dev"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/sys"     2>/dev/null || true
            sudo umount -l "/usr/local/chard/proc"    2>/dev/null || true
            sudo umount -l "/usr/local/chard/etc/ssl" 2>/dev/null || true
            echo "${BLUE}[*] Removing $CHARD_ROOT${RESET}"
            sudo rm -rf "$CHARD_ROOT"
    
            sed -i '/^# <<< CHARD ENV MARKER <<</,/^# <<< END CHARD ENV MARKER <<</d' /home/chronos/user/.bashrc 2>/dev/null || true
            echo "${CYAN}[+] Uninstalled.${RESET}"
        else
            echo "${RED}[*] Cancelled.${RESET}"
        fi
        ;;
    root)
        sudo chroot /usr/local/chard /bin/bash
        ;;
    categories|cat)
        PORTAGE_DIR="$CHARD_ROOT/usr/portage"
        if [ ! -d "$PORTAGE_DIR" ]; then
            echo "ERROR: Portage tree not found at $PORTAGE_DIR"
            exit 1
        fi
        echo "${GREEN}[*] Available Portage categories in $CHARD_ROOT/usr/portage:${RESET}"
        for cat in "$PORTAGE_DIR"/*/; do
            [ -d "$cat" ] || continue
            basename "$cat"
        done | sort
        ;;
    *)
        chard_run "$cmd" "$@"
        ;;
esac
